{
	"functions": {
		"make_hipPitchedPtr": {
			"$": {
				"kind": "function",
				"id": "driver__types_8h_1a9b5656e8661186f53809c925be87b17a",
				"prot": "public",
				"static": "yes",
				"const": "no",
				"explicit": "no",
				"inline": "yes",
				"virt": "non-virtual"
			},
			"type": [
				{
					"_": "struct ",
					"ref": [
						{
							"_": "hipPitchedPtr",
							"$": {
								"refid": "structhip_pitched_ptr",
								"kindref": "compound"
							}
						}
					]
				}
			],
			"definition": [
				"static struct hipPitchedPtr make_hipPitchedPtr"
			],
			"argsstring": [
				"(void *d, size_t p, size_t xsz, size_t ysz)"
			],
			"name": [
				"make_hipPitchedPtr"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"d"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"p"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"xsz"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"ysz"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "394",
						"column": "34",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "394",
						"bodyend": "402"
					}
				}
			]
		},
		"make_hipPos": {
			"$": {
				"kind": "function",
				"id": "driver__types_8h_1a2bc60de4106a7378d5ffefba7d90e02c",
				"prot": "public",
				"static": "yes",
				"const": "no",
				"explicit": "no",
				"inline": "yes",
				"virt": "non-virtual"
			},
			"type": [
				{
					"_": "struct ",
					"ref": [
						{
							"_": "hipPos",
							"$": {
								"refid": "structhip_pos",
								"kindref": "compound"
							}
						}
					]
				}
			],
			"definition": [
				"static struct hipPos make_hipPos"
			],
			"argsstring": [
				"(size_t x, size_t y, size_t z)"
			],
			"name": [
				"make_hipPos"
			],
			"param": [
				{
					"type": [
						"size_t"
					],
					"declname": [
						"x"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"y"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"z"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "403",
						"column": "27",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "403",
						"bodyend": "409"
					}
				}
			]
		},
		"make_hipExtent": {
			"$": {
				"kind": "function",
				"id": "driver__types_8h_1a210724deaca97a45201a69a8cae30ef7",
				"prot": "public",
				"static": "yes",
				"const": "no",
				"explicit": "no",
				"inline": "yes",
				"virt": "non-virtual"
			},
			"type": [
				{
					"_": "struct ",
					"ref": [
						{
							"_": "hipExtent",
							"$": {
								"refid": "structhip_extent",
								"kindref": "compound"
							}
						}
					]
				}
			],
			"definition": [
				"static struct hipExtent make_hipExtent"
			],
			"argsstring": [
				"(size_t w, size_t h, size_t d)"
			],
			"name": [
				"make_hipExtent"
			],
			"param": [
				{
					"type": [
						"size_t"
					],
					"declname": [
						"w"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"h"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"d"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "410",
						"column": "30",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "410",
						"bodyend": "416"
					}
				}
			]
		},
		"hipApiName": {
			"$": {
				"kind": "function",
				"id": "group___callback_1ga3400d5eaec7294a79b98f3bd465adc3a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hipApiName"
			],
			"argsstring": [
				"(uint32_t id)"
			],
			"name": [
				"hipApiName"
			],
			"param": [
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"id"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns HIP API name by ID. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "id",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"ID of HIP API"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6583",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6583",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipKernelNameRef": {
			"$": {
				"kind": "function",
				"id": "group___callback_1ga9b1a12c449cfd33f5a8c9bbe1c35bf0b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hipKernelNameRef"
			],
			"argsstring": [
				"(const hipFunction_t f)"
			],
			"name": [
				"hipKernelNameRef"
			],
			"param": [
				{
					"type": [
						{
							"_": "const ",
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns kernel name reference by function name. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Name of function"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6592",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6592",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipKernelNameRefByPtr": {
			"$": {
				"kind": "function",
				"id": "group___callback_1gaa08d00225c8cca17417fe2b9abce1088",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hipKernelNameRefByPtr"
			],
			"argsstring": [
				"(const void *hostFunction, hipStream_t stream)"
			],
			"name": [
				"hipKernelNameRefByPtr"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"hostFunction"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Retrives kernel for a given host pointer, unless stated otherwise. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hostFunction",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of host function. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream the kernel is executed on."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6602",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6602",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetStreamDeviceId": {
			"$": {
				"kind": "function",
				"id": "group___callback_1gad16a23519ee4d7d87c7be53004b76608",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"int"
			],
			"definition": [
				"int hipGetStreamDeviceId"
			],
			"argsstring": [
				"(hipStream_t stream)"
			],
			"name": [
				"hipGetStreamDeviceId"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns device ID on the stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream of device executed on."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6611",
						"column": "5",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6611",
						"declcolumn": "5"
					}
				}
			]
		},
		"hipConfigureCall": {
			"$": {
				"kind": "function",
				"id": "group___clang_1gaef4a44fd1dd0ea4a1be33170e10e0e8b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipConfigureCall"
			],
			"argsstring": [
				"(dim3 gridDim, dim3 blockDim, size_t sharedMem, hipStream_t stream)"
			],
			"name": [
				"hipConfigureCall"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"gridDim"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"blockDim"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMem"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Configure a kernel launch. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"grid dimension specified as multiple of blockDim. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block dimensions specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5633",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5633",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipSetupArgument": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga047cff6205399540ebe31cdd11257c07",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipSetupArgument"
			],
			"argsstring": [
				"(const void *arg, size_t size, size_t offset)"
			],
			"name": [
				"hipSetupArgument"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"arg"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set a kernel argument. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "arg",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer the argument in host memory. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the argument. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset of the argument on the argument stack. "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5644",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5644",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipLaunchByPtr": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga80f5f26fe76b213fbfd77e4fc9e04cbd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipLaunchByPtr"
			],
			"argsstring": [
				"(const void *func)"
			],
			"name": [
				"hipLaunchByPtr"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"func"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launch a kernel. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "func",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel to launch."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5653",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5653",
						"declcolumn": "12"
					}
				}
			]
		},
		"__hipPushCallConfiguration": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga7e230990e322e82dd1e5781326305657",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t __hipPushCallConfiguration"
			],
			"argsstring": [
				"(dim3 gridDim, dim3 blockDim, size_t sharedMem, hipStream_t stream)"
			],
			"name": [
				"__hipPushCallConfiguration"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"gridDim"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"blockDim"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMem"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Push configuration of a kernel launch. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"grid dimension specified as multiple of blockDim. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block dimensions specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5670",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5670",
						"declcolumn": "12"
					}
				}
			]
		},
		"__hipPopCallConfiguration": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga06210258503eaac9eb89d26015484774",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t __hipPopCallConfiguration"
			],
			"argsstring": [
				"(dim3 *gridDim, dim3 *blockDim, size_t *sharedMem, hipStream_t *stream)"
			],
			"name": [
				"__hipPopCallConfiguration"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"gridDim"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"blockDim"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"sharedMem"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Pop configuration of a kernel launch. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDim",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"grid dimension specified as multiple of blockDim. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDim",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block dimensions specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMem",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules."
													]
												}
											]
										}
									]
								}
							]
						},
						"Please note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5693",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5693",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipLaunchKernel": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga4421a399434f41a1679a84fec3685829",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipLaunchKernel"
			],
			"argsstring": [
				"(const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream)"
			],
			"name": [
				"hipLaunchKernel"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"function_address"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"dimBlocks"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"args"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"C compliant kernel launch API. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "function_address",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- kernel stub function pointer. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- number of blocks "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dimBlocks",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- dimension of a block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "args",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- kernel arguments "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5712",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5712",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipLaunchHostFunc": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga154cd475c8e1b9e623981fc165c543a9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipLaunchHostFunc"
			],
			"argsstring": [
				"(hipStream_t stream, hipHostFn_t fn, void *userData)"
			],
			"name": [
				"hipLaunchHostFunc"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipHostFn_t",
									"$": {
										"refid": "group___global_defs_1ga6b1ea90b2fea2d4c62eb351e1ed44f93",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"fn"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"userData"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enqueues a host function call in a stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- stream to enqueue work to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "fn",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- function to call once operations enqueued preceeding are complete. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "userData",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- User-specified data to be passed to the function. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidResourceHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5730",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5730",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvMemcpy2DUnaligned": {
			"$": {
				"kind": "function",
				"id": "group___clang_1gaac4d001873f929f60188c2cd3672de9e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvMemcpy2DUnaligned"
			],
			"argsstring": [
				"(const hip_Memcpy2D *pCopy)"
			],
			"name": [
				"hipDrvMemcpy2DUnaligned"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hip_Memcpy2D",
									"$": {
										"refid": "structhip___memcpy2_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopy"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Copies memory for 2D arrays.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"pCopy"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Parameters for the memory copy"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5739",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5739",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtLaunchKernel": {
			"$": {
				"kind": "function",
				"id": "group___clang_1ga601d372753e668aba188e2466c414bbd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtLaunchKernel"
			],
			"argsstring": [
				"(const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream, hipEvent_t startEvent, hipEvent_t stopEvent, int flags)"
			],
			"name": [
				"hipExtLaunchKernel"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"function_address"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"dimBlocks"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"args"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"startEvent"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stopEvent"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launches kernel from the pointer address, with arguments and shared memory on stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "function_address",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the Kernel to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"number of blocks. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dimBlocks",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"dimension of a block. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "args",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to kernel arguments. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "startEvent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"If non-null, specified event will be updated to track the start time of the kernel launch. The event must be created before calling this API. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stopEvent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"If non-null, specified event will be updated to track the stop time of the kernel launch. The event must be created before calling this API. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The value of hipExtAnyOrderLaunch, signifies if kernel can be launched in any order. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , . ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5761",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5761",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxCreate": {
			"$": {
				"kind": "function",
				"id": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxCreate"
			],
			"argsstring": [
				"(hipCtx_t *ctx, unsigned int flags, hipDevice_t device)"
			],
			"name": [
				"hipCtxCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create a context and set it as current/default context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Context to create "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Context creation flags "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"device handle"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4890",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4890",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxDestroy": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxDestroy"
			],
			"argsstring": [
				"(hipCtx_t ctx)"
			],
			"name": [
				"hipCtxDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroy a HIP context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Context to destroy"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,, , ,  , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4905",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4905",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxPopCurrent": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxPopCurrent"
			],
			"argsstring": [
				"(hipCtx_t *ctx)"
			],
			"name": [
				"hipCtxPopCurrent"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Pop the current/default context and return the popped context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The current context to pop"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4920",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4920",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxPushCurrent": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxPushCurrent"
			],
			"argsstring": [
				"(hipCtx_t ctx)"
			],
			"name": [
				"hipCtxPushCurrent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Push the context to be set as current/ default context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The current context to push"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4935",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4935",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxSetCurrent": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga834a192f70c2bfc0269c309436776feb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxSetCurrent"
			],
			"argsstring": [
				"(hipCtx_t ctx)"
			],
			"name": [
				"hipCtxSetCurrent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set the passed context as current/default. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The context to set as current"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4950",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4950",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetCurrent": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga741786101d348fdbfa1f64546860357a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetCurrent"
			],
			"argsstring": [
				"(hipCtx_t *ctx)"
			],
			"name": [
				"hipCtxGetCurrent"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the handle of the current/ default context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The context to get as current"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4965",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4965",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetDevice": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetDevice"
			],
			"argsstring": [
				"(hipDevice_t *device)"
			],
			"name": [
				"hipCtxGetDevice"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the handle of the device associated with current/default context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The device from the current context"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4980",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4980",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetApiVersion": {
			"$": {
				"kind": "function",
				"id": "group___context_1gabe5941e6798c71a8351b7d51311e7e8f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetApiVersion"
			],
			"argsstring": [
				"(hipCtx_t ctx, int *apiVersion)"
			],
			"name": [
				"hipCtxGetApiVersion"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"apiVersion"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the approximate HIP api version. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Context to check "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "apiVersion",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"API version to get"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"The HIP feature set does not correspond to an exact CUDA SDK api revision. This function always set *apiVersion to 4 as an approximation though HIP supports some features which were introduced in later CUDA SDK revisions. HIP apps code should not rely on the api revision number here and should use arch feature flags to test device capabilities or conditional compilation."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5002",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5002",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetCacheConfig": {
			"$": {
				"kind": "function",
				"id": "group___context_1gab10373068faafd3042c9003e2e6d905a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetCacheConfig"
			],
			"argsstring": [
				"(hipFuncCache_t *cacheConfig)"
			],
			"name": [
				"hipCtxGetCacheConfig"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipFuncCache_t",
									"$": {
										"refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"cacheConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get Cache configuration for a specific function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cacheConfig",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Cache configuration"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5020",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5020",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxSetCacheConfig": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxSetCacheConfig"
			],
			"argsstring": [
				"(hipFuncCache_t cacheConfig)"
			],
			"name": [
				"hipCtxSetCacheConfig"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFuncCache_t",
									"$": {
										"refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"cacheConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set L1/Shared cache partition. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cacheConfig",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Cache configuration to set"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5038",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5038",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxSetSharedMemConfig": {
			"$": {
				"kind": "function",
				"id": "group___context_1gad5c1d4ced27f584a74ed550dd002fa5a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxSetSharedMemConfig"
			],
			"argsstring": [
				"(hipSharedMemConfig config)"
			],
			"name": [
				"hipCtxSetSharedMemConfig"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipSharedMemConfig",
									"$": {
										"refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"config"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set Shared memory bank configuration. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "config",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Shared memory configuration to set"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5056",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5056",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetSharedMemConfig": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga3c78b22dd03435a7ca88621a45409565",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetSharedMemConfig"
			],
			"argsstring": [
				"(hipSharedMemConfig *pConfig)"
			],
			"name": [
				"hipCtxGetSharedMemConfig"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipSharedMemConfig",
									"$": {
										"refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get Shared memory bank configuration. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pConfig",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of shared memory configuration"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5074",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5074",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxSynchronize": {
			"$": {
				"kind": "function",
				"id": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxSynchronize"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipCtxSynchronize"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Blocks until the default context has completed all preceding requested tasks. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This function waits for all streams on the default context to complete execution, and then returns."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5090",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5090",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxGetFlags": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxGetFlags"
			],
			"argsstring": [
				"(unsigned int *flags)"
			],
			"name": [
				"hipCtxGetFlags"
			],
			"param": [
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return flags used for creating default context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of flags"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5105",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5105",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxEnablePeerAccess": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga834dfd99d72082fe8770142fa30b30e2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxEnablePeerAccess"
			],
			"argsstring": [
				"(hipCtx_t peerCtx, unsigned int flags)"
			],
			"name": [
				"hipCtxEnablePeerAccess"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"peerCtx"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enables direct access to memory allocations in a peer context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Memory which already allocated on peer device will be mapped into the address space of the current device. In addition, all future memory allocations on peerDeviceId will be mapped into the address space of the current device when the memory is allocated. The peer memory remains accessible from the current device until a call to hipDeviceDisablePeerAccess or hipDeviceReset.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "peerCtx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Peer context "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"flags, need to set as 0"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorPeerAccessAlreadyEnabled",
													"$": {
														"refid": "hip__runtime__api_8h_1acf78b2ed8f41d21e8f23eaa084c75349",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"PeerToPeer support is experimental."
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5129",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5129",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCtxDisablePeerAccess": {
			"$": {
				"kind": "function",
				"id": "group___context_1gaf48e4e9c3b6bbad5deaeff10d2e28b31",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCtxDisablePeerAccess"
			],
			"argsstring": [
				"(hipCtx_t peerCtx)"
			],
			"name": [
				"hipCtxDisablePeerAccess"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"peerCtx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Disable direct access from current context's virtual address space to memory allocations physically located on a peer context.Disables direct access to memory allocations in a peer context and unregisters any registered allocations. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Returns  if direct access to memory on peerDevice has not yet been enabled from the current device.",
							"ref": [
								{
									"_": "hipErrorPeerAccessNotEnabled",
									"$": {
										"refid": "hip__runtime__api_8h_1a5605bce676c6a2b37d04a21971f0d596",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "peerCtx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Peer context to be disabled"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorPeerAccessNotEnabled",
													"$": {
														"refid": "hip__runtime__api_8h_1a5605bce676c6a2b37d04a21971f0d596",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"PeerToPeer support is experimental."
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent cuCtx driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5150",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5150",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDevicePrimaryCtxGetState": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga60d31f744991c6c568ec3027cf1fb8ab",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDevicePrimaryCtxGetState"
			],
			"argsstring": [
				"(hipDevice_t dev, unsigned int *flags, int *active)"
			],
			"name": [
				"hipDevicePrimaryCtxGetState"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev"
					]
				},
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"active"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the state of the primary context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device to get primary context flags for "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to store flags "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "active",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to store context state; 0 = inactive, 1 = active"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5168",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5168",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDevicePrimaryCtxRelease": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga7bbe8905908168909ddecd98cd34c1e8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDevicePrimaryCtxRelease"
			],
			"argsstring": [
				"(hipDevice_t dev)"
			],
			"name": [
				"hipDevicePrimaryCtxRelease"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Release the primary context on the GPU. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device which primary context is released"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										{
											"_": "This function return  though doesn't release the primaryCtx by design on HIP/HCC path.",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5185",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5185",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDevicePrimaryCtxRetain": {
			"$": {
				"kind": "function",
				"id": "group___context_1gab6e1014e9a4dbe281b84e38d89ff2409",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDevicePrimaryCtxRetain"
			],
			"argsstring": [
				"(hipCtx_t *pctx, hipDevice_t dev)"
			],
			"name": [
				"hipDevicePrimaryCtxRetain"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pctx"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Retain the primary context on the GPU. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pctx",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned context handle of the new context "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device which primary context is released"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5201",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5201",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDevicePrimaryCtxReset": {
			"$": {
				"kind": "function",
				"id": "group___context_1gac2ca146e5d67b28d870dadd9dc3fc04e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDevicePrimaryCtxReset"
			],
			"argsstring": [
				"(hipDevice_t dev)"
			],
			"name": [
				"hipDevicePrimaryCtxReset"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Resets the primary context on the GPU. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device which primary context is reset"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5216",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5216",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDevicePrimaryCtxSetFlags": {
			"$": {
				"kind": "function",
				"id": "group___context_1ga5cd8ba188e628274142dd44d39780436",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDevicePrimaryCtxSetFlags"
			],
			"argsstring": [
				"(hipDevice_t dev, unsigned int flags)"
			],
			"name": [
				"hipDevicePrimaryCtxSetFlags"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set flags for the primary context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device for which the primary context flags are set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"New flags for the device"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorContextAlreadyInUse",
													"$": {
														"refid": "hip__runtime__api_8h_1a8c55dfeda10a4bd23875e15d8a7d3077",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated on the AMD platform, only for equivalent driver API on the NVIDIA platform. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5232",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5232",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSynchronize": {
			"$": {
				"kind": "function",
				"id": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSynchronize"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipDeviceSynchronize"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Waits on all active streams on current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"When this command is invoked, the host thread gets blocked until all the commands associated with streams associated with the device. HIP does not support multiple blocking modes (yet!).",
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSetDevice",
													"$": {
														"refid": "group___device_1ga43c1e7f15925eeb762195ccb5e063eae",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceReset",
													"$": {
														"refid": "group___device_1ga8d57161ae56a8edc46eeda447417bf6c",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1771",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1771",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceReset": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga8d57161ae56a8edc46eeda447417bf6c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceReset"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipDeviceReset"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"The state of current device is discarded and updated to a fresh state. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Calling this function deletes all streams created, memory allocated, kernels running, events created. Make sure that no other thread is using the device or streams, memory, kernels, events associated with the current device.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipDeviceSynchronize",
													"$": {
														"refid": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1783",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1783",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipSetDevice": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga43c1e7f15925eeb762195ccb5e063eae",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipSetDevice"
			],
			"argsstring": [
				"(int deviceId)"
			],
			"name": [
				"hipSetDevice"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"deviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set default device to be used for subsequent hip API calls from this thread. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nSets  as the default device for the calling host thread. Valid device id's are 0... (-1).",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "deviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "Valid device in range 0....",
															"ref": [
																{
																	"_": "hipGetDeviceCount()",
																	"$": {
																		"refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
																		"kindref": "member"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"device"
							],
							"ref": [
								{
									"_": "hipGetDeviceCount()",
									"$": {
										"refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
										"kindref": "member"
									}
								}
							]
						},
						"Many HIP APIs implicitly use the \"default device\" :",
						{
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												"Any device memory subsequently allocated from this host thread (using hipMalloc) will be allocated on device."
											]
										},
										{
											"para": [
												"Any streams or events created from this host thread will be associated with device."
											]
										},
										{
											"para": [
												"Any kernels launched from this host thread (using hipLaunchKernel) will be executed on device (unless a specific stream is specified, in which case the device associated with that stream will be used)."
											]
										}
									]
								}
							]
						},
						"This function may be called from any host thread. Multiple host threads may use the same device. This function does no synchronization with the previous or new device, and has very little runtime overhead. Applications can use hipSetDevice to quickly switch the default device before making a HIP runtime call which uses the default device.",
						"The default device is stored in thread-local-storage for each thread. Thread-pool implementations may inherit the default device of the previous thread. A good practice is to always call hipSetDevice at the start of HIP coding sequency to establish a known standard device.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNoDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1abaff13a1ce1dd40f0578115c56d9dc8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipGetDevice",
													"$": {
														"refid": "group___device_1ga7e0e2e8c5f78e3c7449764657c254e0a",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetDeviceCount",
													"$": {
														"refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1815",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1815",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetDevice": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga7e0e2e8c5f78e3c7449764657c254e0a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetDevice"
			],
			"argsstring": [
				"(int *deviceId)"
			],
			"name": [
				"hipGetDevice"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"deviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return the default device id for the calling host thread. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nHIP maintains an default device for each thread using thread-local-storage. This device is used implicitly for HIP runtime APIs called by this thread. hipGetDevice returns in *  the default device for the calling host thread.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "deviceId",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"*device is written with the default device"
													]
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"device"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", hipGetDevicesizeBytes ",
											"ref": [
												{
													"_": "hipSetDevice",
													"$": {
														"refid": "group___device_1ga43c1e7f15925eeb762195ccb5e063eae",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1829",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1829",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetDeviceCount": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetDeviceCount"
			],
			"argsstring": [
				"(int *count)"
			],
			"name": [
				"hipGetDeviceCount"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return number of compute-capable devices. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nReturns in  the number of devices that have ability to run compute commands. If there are no such devices, then  will return . If 1 or more devices can be found, then hipGetDeviceCount returns . ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns number of compute-capable devices."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNoDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1abaff13a1ce1dd40f0578115c56d9dc8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"*count"
							],
							"ref": [
								{
									"_": "hipGetDeviceCount",
									"$": {
										"refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorNoDevice",
									"$": {
										"refid": "hip__runtime__api_8h_1abaff13a1ce1dd40f0578115c56d9dc8d",
										"kindref": "member"
									}
								},
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1842",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1842",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga7080a145a4239a7276e0dc22062026c1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetAttribute"
			],
			"argsstring": [
				"(int *pi, hipDeviceAttribute_t attr, int deviceId)"
			],
			"name": [
				"hipDeviceGetAttribute"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"pi"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceAttribute_t",
									"$": {
										"refid": "group___global_defs_1gacc0acd7b9bda126c6bb3dfd6e2796d7c",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"deviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query for a specific device attribute. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pi",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to value to return "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"attribute to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "deviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"which device to query for information"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1852",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1852",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetDefaultMemPool": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetDefaultMemPool"
			],
			"argsstring": [
				"(hipMemPool_t *mem_pool, int device)"
			],
			"name": [
				"hipDeviceGetDefaultMemPool"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the default memory pool of the specified device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Default memory pool to return "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device index for query the default memory pool"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipDeviceGetDefaultMemPool",
													"$": {
														"refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1867",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1867",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSetMemPool": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSetMemPool"
			],
			"argsstring": [
				"(int device, hipMemPool_t mem_pool)"
			],
			"name": [
				"hipDeviceSetMemPool"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the current memory pool of a device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "The memory pool must be local to the specified device.  allocates from the current mempool of the provided stream's device. By default, a device's current memory pool is its default memory pool.",
							"computeroutput": [
								"hipMallocAsync"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "Use  for asynchronous memory allocations from a device different than the one the stream runs on.",
											"computeroutput": [
												"hipMallocFromPoolAsync"
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipDeviceGetDefaultMemPool",
													"$": {
														"refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device index for the update "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool for update as the current on the specified device"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1889",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1889",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetMemPool": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga881dfd032ba869936bca97edb1a12ca9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetMemPool"
			],
			"argsstring": [
				"(hipMemPool_t *mem_pool, int device)"
			],
			"name": [
				"hipDeviceGetMemPool"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the current memory pool for the specified device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Returns the last pool provided to  for this device or the device's default memory pool if  has never been called. By default the current mempool is the default mempool for a device, otherwise the returned pool must have been set with .",
							"computeroutput": [
								"hipDeviceSetMemPool",
								"hipDeviceSetMemPool",
								"hipDeviceSetMemPool"
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Current memory pool on the specified device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device index to query the current memory pool"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipDeviceGetDefaultMemPool",
													"$": {
														"refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1909",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1909",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetDeviceProperties": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga32208513b7cd491f0cb5fc884053f790",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetDeviceProperties"
			],
			"argsstring": [
				"(hipDeviceProp_t *prop, int deviceId)"
			],
			"name": [
				"hipGetDeviceProperties"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceProp_t",
									"$": {
										"refid": "structhip_device_prop__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"deviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns device properties. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prop",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"written with device properties "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "deviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"which device to query for information"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"xrefsect": [
								{
									"$": {
										"id": "bug_1_bug000001"
									},
									"xreftitle": [
										"Bug"
									],
									"xrefdescription": [
										{
											"para": [
												"HCC always returns 0 for maxThreadsPerMultiProcessor ",
												"HCC always returns 0 for regsPerBlock ",
												"HCC always returns 0 for l2CacheSize"
											]
										}
									]
								}
							]
						},
						"Populates hipGetDeviceProperties with information for the specified device. "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1923",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1923",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSetCacheConfig": {
			"$": {
				"kind": "function",
				"id": "group___device_1gaada3d30a46ae06f68cf1574f496b86ee",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSetCacheConfig"
			],
			"argsstring": [
				"(hipFuncCache_t cacheConfig)"
			],
			"name": [
				"hipDeviceSetCacheConfig"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFuncCache_t",
									"$": {
										"refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"cacheConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set L1/Shared cache partition. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nNote: AMD devices do not support reconfigurable cache. This API is not implemented on AMD platform. If the function is called, it will return hipErrorNotSupported. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cacheConfig",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Cache configuration"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1935",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1935",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetCacheConfig": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga37057f9830ad6fab7ce5f05f6d3c89ab",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetCacheConfig"
			],
			"argsstring": [
				"(hipFuncCache_t *cacheConfig)"
			],
			"name": [
				"hipDeviceGetCacheConfig"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipFuncCache_t",
									"$": {
										"refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"cacheConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get Cache configuration for a specific Device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cacheConfig",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of cache configuration"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  Note: AMD devices do not support reconfigurable cache. This hint is ignored on these architectures. ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1946",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1946",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetLimit": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga8edc85bb9637d6b1eda0d064d141a255",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetLimit"
			],
			"argsstring": [
				"(size_t *pValue, enum hipLimit_t limit)"
			],
			"name": [
				"hipDeviceGetLimit"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pValue"
					]
				},
				{
					"type": [
						{
							"_": "enum ",
							"ref": [
								{
									"_": "hipLimit_t",
									"$": {
										"refid": "group___global_defs_1ga02ceb1513c852c4dd1ecf3cc459fda70",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"limit"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets resource limits of current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "The function queries the size of limit value, as required by the input enum value hipLimit_t, which can be either , or . Any other input as default, the function will return .",
							"ref": [
								{
									"_": "hipLimitStackSize",
									"$": {
										"refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a30214f21a523ab016abc833abde96486",
										"kindref": "member"
									}
								},
								{
									"_": "hipLimitMallocHeapSize",
									"$": {
										"refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorUnsupportedLimit",
									"$": {
										"refid": "hip__runtime__api_8h_1a700ce451a4df4dca02b539df3cd8c03d",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pValue",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the size of the limit in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "limit",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The limit to query"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnsupportedLimit",
													"$": {
														"refid": "hip__runtime__api_8h_1a700ce451a4df4dca02b539df3cd8c03d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1960",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1960",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSetLimit": {
			"$": {
				"kind": "function",
				"id": "group___device_1gaaa264755a3c1750a12c60aa7807b7fe8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSetLimit"
			],
			"argsstring": [
				"(enum hipLimit_t limit, size_t value)"
			],
			"name": [
				"hipDeviceSetLimit"
			],
			"param": [
				{
					"type": [
						{
							"_": "enum ",
							"ref": [
								{
									"_": "hipLimit_t",
									"$": {
										"refid": "group___global_defs_1ga02ceb1513c852c4dd1ecf3cc459fda70",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"limit"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets resource limits of current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "As the input enum limit,  sets the limit value of the stack size on the current GPU device, per thread. The limit size can get via hipDeviceGetLimit. The size is in units of 256 dwords, up to the limit (128K - 16).",
							"ref": [
								{
									"_": "hipLimitStackSize",
									"$": {
										"refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a30214f21a523ab016abc833abde96486",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": " sets the limit value of the heap used by the malloc()/free() calls. For limit size, use the  API.",
							"ref": [
								{
									"_": "hipLimitMallocHeapSize",
									"$": {
										"refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210",
										"kindref": "member"
									}
								},
								{
									"_": "hipDeviceGetLimit",
									"$": {
										"refid": "group___device_1ga8edc85bb9637d6b1eda0d064d141a255",
										"kindref": "member"
									}
								}
							]
						},
						"Any other input as default, the funtion will return hipErrorUnsupportedLimit.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "limit",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Enum of hipLimit_t to set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The size of limit value in bytes"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnsupportedLimit",
													"$": {
														"refid": "hip__runtime__api_8h_1a700ce451a4df4dca02b539df3cd8c03d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1980",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1980",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetSharedMemConfig": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga1bb08f774a34a468d969a8a04791c9bb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetSharedMemConfig"
			],
			"argsstring": [
				"(hipSharedMemConfig *pConfig)"
			],
			"name": [
				"hipDeviceGetSharedMemConfig"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipSharedMemConfig",
									"$": {
										"refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pConfig"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns bank width of shared memory for current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pConfig",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The pointer of the bank width for shared memory"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1992",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1992",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetDeviceFlags": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga1270f7281bb46cf3e077944e6f233d53",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetDeviceFlags"
			],
			"argsstring": [
				"(unsigned int *flags)"
			],
			"name": [
				"hipGetDeviceFlags"
			],
			"param": [
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the flags set for current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the flags"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2000",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2000",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSetSharedMemConfig": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga9b1f279084e76691cedfbfadf9c717ee",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSetSharedMemConfig"
			],
			"argsstring": [
				"(hipSharedMemConfig config)"
			],
			"name": [
				"hipDeviceSetSharedMemConfig"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipSharedMemConfig",
									"$": {
										"refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"config"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"The bank width of shared memory on current device is set. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "config",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Configuration for the bank width of shared memory"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2012",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2012",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipSetDeviceFlags": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga6e54db382768827e84725632018307aa",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipSetDeviceFlags"
			],
			"argsstring": [
				"(unsigned flags)"
			],
			"name": [
				"hipSetDeviceFlags"
			],
			"param": [
				{
					"type": [
						"unsigned"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"The current device behavior is changed according the flags passed. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nThe schedule flags impact how HIP waits for the completion of a command running on a device. hipDeviceScheduleSpin : HIP runtime will actively spin in the thread which submitted the work until the command completes. This offers the lowest latency, but will consume a CPU core and may increase power. hipDeviceScheduleYield : The HIP runtime will yield the CPU to system so that other tasks can use it. This may increase latency to detect the completion but will consume less power and is friendlier to other tasks in the system. hipDeviceScheduleBlockingSync : On ROCm platform, this is a synonym for hipDeviceScheduleYield. hipDeviceScheduleAuto : Use a hueristic to select between Spin and Yield modes. If the number of HIP contexts is greater than the number of logical processors in the system, use Spin scheduling. Else use Yield scheduling.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flag to set on the current device"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"_": "hipDeviceMapHost : Allow mapping host memory. On ROCM, this is always allowed and the flag is ignored. hipDeviceLmemResizeToMax : \n\n",
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"ROCm silently ignores this flag."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorSetOnActiveProcess",
													"$": {
														"refid": "hip__runtime__api_8h_1a67cb78915676025c488014407580c212",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2037",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2037",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipChooseDevice": {
			"$": {
				"kind": "function",
				"id": "group___device_1gaf1e365e1d17cf40644d1470de4817c8e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipChooseDevice"
			],
			"argsstring": [
				"(int *device, const hipDeviceProp_t *prop)"
			],
			"name": [
				"hipChooseDevice"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipDeviceProp_t",
									"$": {
										"refid": "structhip_device_prop__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Device which matches  is returned. ",
							"ref": [
								{
									"_": "hipDeviceProp_t",
									"$": {
										"refid": "structhip_device_prop__t",
										"kindref": "compound"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prop",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the properties"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2046",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2046",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtGetLinkTypeAndHopCount": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga633f8eed24c1d27ed55f950aab99fc88",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtGetLinkTypeAndHopCount"
			],
			"argsstring": [
				"(int device1, int device2, uint32_t *linktype, uint32_t *hopcount)"
			],
			"name": [
				"hipExtGetLinkTypeAndHopCount"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"device1"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device2"
					]
				},
				{
					"type": [
						"uint32_t *"
					],
					"declname": [
						"linktype"
					]
				},
				{
					"type": [
						"uint32_t *"
					],
					"declname": [
						"hopcount"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the link type and hop count between two devices. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nQueries and returns the HSA link type and the hop count between the two specified devices.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device1",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Ordinal for device1 "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device2",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Ordinal for device2 "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "linktype",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the link type (See hsa_amd_link_info_type_t) between the two devices "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hopcount",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the hop count between the two devices"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2059",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2059",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipIpcGetMemHandle": {
			"$": {
				"kind": "function",
				"id": "group___device_1gafd8c80f7e3b6426a630fff768409be70",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipIpcGetMemHandle"
			],
			"argsstring": [
				"(hipIpcMemHandle_t *handle, void *devPtr)"
			],
			"name": [
				"hipIpcGetMemHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipIpcMemHandle_t",
									"$": {
										"refid": "structhip_ipc_mem_handle__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"devPtr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets an interprocess memory handle for an existing device memory allocation. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Takes a pointer to the base of an existing device memory allocation created with hipMalloc and exports it for use in another process. This is a lightweight operation and may be called multiple times on an allocation without adverse effects.",
						"If a region of memory is freed with hipFree and a subsequent call to hipMalloc returns memory with the same device address, hipIpcGetMemHandle will return a unique handle for the new memory.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"handle"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to user allocated hipIpcMemHandle to return the handle in. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														"devPtr"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Base pointer to previously allocated device memory"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMapFailed",
													"$": {
														"refid": "hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This IPC memory related feature API on Windows may behave differently from Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2084",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2084",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipIpcOpenMemHandle": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga2ada334c986e10805d58167e260cb0df",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipIpcOpenMemHandle"
			],
			"argsstring": [
				"(void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)"
			],
			"name": [
				"hipIpcOpenMemHandle"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipIpcMemHandle_t",
									"$": {
										"refid": "structhip_ipc_mem_handle__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Maps memory exported from another process with hipIpcGetMemHandle into the current device address space. For contexts on different devices hipIpcOpenMemHandle can attempt to enable peer access between the devices as if the user called hipDeviceEnablePeerAccess. This behavior is controlled by the hipIpcMemLazyEnablePeerAccess flag. hipDeviceCanAccessPeer can determine if a mapping is possible.",
						"Contexts that may open hipIpcMemHandles are restricted in the following way. hipIpcMemHandles from each device in a given process may only be opened by one context per device per other process.",
						"Memory returned from hipIpcOpenMemHandle must be freed with hipIpcCloseMemHandle.",
						"Calling hipFree on an exported memory region before calling hipIpcCloseMemHandle in the importing context will result in undefined behavior.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"devPtr"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned device pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														"handle"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- hipIpcMemHandle to open "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														"flags"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Flags for this operation. Must be specified as hipIpcMemLazyEnablePeerAccess"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "During multiple processes, using the same memory handle opened by the current context, there is no guarantee that the same device poiter will be returned in . This is diffrent from CUDA. ",
											"computeroutput": [
												"*devPtr"
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This IPC memory related feature API on Windows may behave differently from Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2120",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2120",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipIpcCloseMemHandle": {
			"$": {
				"kind": "function",
				"id": "group___device_1gac2db0688a6a471e17ca631977e199da7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipIpcCloseMemHandle"
			],
			"argsstring": [
				"(void *devPtr)"
			],
			"name": [
				"hipIpcCloseMemHandle"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"devPtr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Close memory mapped with hipIpcOpenMemHandle. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Unmaps memory returnd by hipIpcOpenMemHandle. The original allocation in the exporting process as well as imported mappings in other processes will be unaffected.",
						"Any resources used to enable peer access will be freed if this is the last mapping using them.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"devPtr"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device pointer returned by hipIpcOpenMemHandle"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMapFailed",
													"$": {
														"refid": "hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This IPC memory related feature API on Windows may behave differently from Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2138",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2138",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipIpcGetEventHandle": {
			"$": {
				"kind": "function",
				"id": "group___device_1ga16b63a461a72d22dbcbbdbdff548adba",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipIpcGetEventHandle"
			],
			"argsstring": [
				"(hipIpcEventHandle_t *handle, hipEvent_t event)"
			],
			"name": [
				"hipIpcGetEventHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipIpcEventHandle_t",
									"$": {
										"refid": "structhip_ipc_event_handle__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets an opaque interprocess handle for an event. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"This opaque handle may be copied into other processes and opened with hipIpcOpenEventHandle. Then hipEventRecord, hipEventSynchronize, hipStreamWaitEvent and hipEventQuery may be used in either process. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to hipIpcEventHandle to return the opaque event handle "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Event allocated with hipEventInterprocess and hipEventDisableTiming flags"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidConfiguration",
													"$": {
														"refid": "hip__runtime__api_8h_1ad2e6cccb1d5fb3027a24cd2f4235fe5b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This IPC event related feature API is currently applicable on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2156",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2156",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipIpcOpenEventHandle": {
			"$": {
				"kind": "function",
				"id": "group___device_1gae73ef28488c43e5343fdf02178c25a5d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipIpcOpenEventHandle"
			],
			"argsstring": [
				"(hipEvent_t *event, hipIpcEventHandle_t handle)"
			],
			"name": [
				"hipIpcOpenEventHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipIpcEventHandle_t",
									"$": {
										"refid": "structhip_ipc_event_handle__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Opens an interprocess event handles. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Opens an interprocess event handle exported from another process with cudaIpcGetEventHandle. The returned hipEvent_t behaves like a locally created event with the hipEventDisableTiming flag specified. This event need be freed with hipEventDestroy. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior. If the function is called within the same process where handle is returned by hipIpcGetEventHandle, it will return hipErrorInvalidContext.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to hipEvent_t to return the event "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The opaque interprocess handle to open"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This IPC event related feature API is currently applicable on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2175",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2175",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipInit": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga01baa652dda5815c594d047060496caa",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipInit"
			],
			"argsstring": [
				"(unsigned int flags)"
			],
			"name": [
				"hipInit"
			],
			"param": [
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Explicitly initializes the HIP runtime. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nMost HIP APIs implicitly initialize the HIP runtime. This API provides control over the timing of the initialization.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Initialization flag, should be zero."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1644",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1644",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDriverGetVersion": {
			"$": {
				"kind": "function",
				"id": "group___driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDriverGetVersion"
			],
			"argsstring": [
				"(int *driverVersion)"
			],
			"name": [
				"hipDriverGetVersion"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"driverVersion"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the approximate HIP driver version. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "driverVersion",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"driver version"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"The HIP feature set does not correspond to an exact CUDA SDK driver revision. This function always set *driverVersion to 4 as an approximation though HIP supports some features which were introduced in later CUDA SDK revisions. HIP apps code should not rely on the driver revision number here and should use arch feature flags to test device capabilities or conditional compilation."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipRuntimeGetVersion",
													"$": {
														"refid": "group___driver_1gae8b7ba34d2e11e334650aa51a4dd87ee",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1661",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1661",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipRuntimeGetVersion": {
			"$": {
				"kind": "function",
				"id": "group___driver_1gae8b7ba34d2e11e334650aa51a4dd87ee",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipRuntimeGetVersion"
			],
			"argsstring": [
				"(int *runtimeVersion)"
			],
			"name": [
				"hipRuntimeGetVersion"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"runtimeVersion"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the approximate HIP Runtime version. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "runtimeVersion",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"HIP runtime version"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"The version definition of HIP runtime is different from CUDA. On AMD platform, the function returns HIP runtime version, while on NVIDIA platform, it returns CUDA runtime version. And there is no mapping/correlation between HIP version and CUDA version."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipDriverGetVersion",
													"$": {
														"refid": "group___driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1676",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1676",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGet": {
			"$": {
				"kind": "function",
				"id": "group___driver_1gadf6c74aaf7c22fea80e9ac3400d43704",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGet"
			],
			"argsstring": [
				"(hipDevice_t *device, int ordinal)"
			],
			"name": [
				"hipDeviceGet"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"ordinal"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a handle to a compute device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Handle of device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ordinal",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device ordinal"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1684",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1684",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceComputeCapability": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga0a1cf94d2b571ca3279577d5af0d1672",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceComputeCapability"
			],
			"argsstring": [
				"(int *major, int *minor, hipDevice_t device)"
			],
			"name": [
				"hipDeviceComputeCapability"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"major"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"minor"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the compute capability of the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "major",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Major compute capability version number "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "minor",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Minor compute capability version number "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device ordinal"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1694",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1694",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetName": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga24df15e180a7b2b351cd362e5b7d2dac",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetName"
			],
			"argsstring": [
				"(char *name, int len, hipDevice_t device)"
			],
			"name": [
				"hipDeviceGetName"
			],
			"param": [
				{
					"type": [
						"char *"
					],
					"declname": [
						"name"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"len"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns an identifer string for the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"String of the device name "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "len",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Maximum length of string to store in device name "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device ordinal"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1703",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1703",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetUuid": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga70646553e01211704cf4d81312569d7d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetUuid"
			],
			"argsstring": [
				"(hipUUID *uuid, hipDevice_t device)"
			],
			"name": [
				"hipDeviceGetUuid"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipUUID",
									"$": {
										"refid": "structhip_u_u_i_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"uuid"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns an UUID for the device.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "uuid",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"UUID for the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"device ordinal"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1715",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1715",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetP2PAttribute": {
			"$": {
				"kind": "function",
				"id": "group___driver_1gaed3b34e394dd0bbdf6a02eafd38b8f15",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetP2PAttribute"
			],
			"argsstring": [
				"(int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)"
			],
			"name": [
				"hipDeviceGetP2PAttribute"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceP2PAttr",
									"$": {
										"refid": "group___global_defs_1ga5582537cfebefc286383a3abeb71f4d1",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"srcDevice"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"dstDevice"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a value for attribute of link between two devices. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the value for the attrubute "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"enum of hipDeviceP2PAttr to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "srcDevice",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The source device of the link "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dstDevice",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The destination device of the link"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1725",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1725",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetPCIBusId": {
			"$": {
				"kind": "function",
				"id": "group___driver_1gaaa961c8ec8047903617f4245fa50256a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetPCIBusId"
			],
			"argsstring": [
				"(char *pciBusId, int len, int device)"
			],
			"name": [
				"hipDeviceGetPCIBusId"
			],
			"param": [
				{
					"type": [
						"char *"
					],
					"declname": [
						"pciBusId"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"len"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a PCI Bus Id string for the device, overloaded to take int device ID. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pciBusId",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The string of PCI Bus Id format for the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "len",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Maximum length of string "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The device ordinal"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1735",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1735",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetByPCIBusId": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetByPCIBusId"
			],
			"argsstring": [
				"(int *device, const char *pciBusId)"
			],
			"name": [
				"hipDeviceGetByPCIBusId"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"pciBusId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a handle to a compute device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The handle of the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pciBusId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The string of PCI Bus Id for the device"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1743",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1743",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceTotalMem": {
			"$": {
				"kind": "function",
				"id": "group___driver_1ga8991e535d0ef1ead0524e73364623041",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceTotalMem"
			],
			"argsstring": [
				"(size_t *bytes, hipDevice_t device)"
			],
			"name": [
				"hipDeviceTotalMem"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"bytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the total amount of memory on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bytes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The size of memory in bytes, on the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The ordinal of the device"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1751",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "1751",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetLastError": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetLastError"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipGetLastError"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Return last error returned by any HIP runtime API call and resets the stored error code to . ",
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nReturns the last error that has been returned by any of the runtime calls in the same host thread, and then resets the saved error to .",
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"return code from last HIP called from the active host thread"
									]
								}
							],
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorString",
													"$": {
														"refid": "group___error_1ga045c60abfb65927aabc7e6e1e3d2598b",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2249",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2249",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtGetLastError": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga8dd52a2fe779f9b23a3e8c64a3a320a1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtGetLastError"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipExtGetLastError"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Return last error returned by any HIP runtime API call and resets the stored error code to . ",
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nReturns the last error that has been returned by any of the runtime calls in the same host thread, and then resets the saved error to .",
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"return code from last HIP called from the active host thread"
									]
								}
							],
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorString",
													"$": {
														"refid": "group___error_1ga045c60abfb65927aabc7e6e1e3d2598b",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2262",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2262",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipPeekAtLastError": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga1dd660bc739f7e13edd34615660f0148",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipPeekAtLastError"
			],
			"argsstring": [
				"(void)"
			],
			"name": [
				"hipPeekAtLastError"
			],
			"param": [
				{
					"type": [
						"void"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return last error returned by any HIP runtime API call. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nReturns the last error that has been returned by any of the runtime calls in the same host thread. Unlike hipGetLastError, this function does not reset the saved error code.",
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorString",
													"$": {
														"refid": "group___error_1ga045c60abfb65927aabc7e6e1e3d2598b",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2274",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2274",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetErrorName": {
			"$": {
				"kind": "function",
				"id": "group___error_1gaa9233b8cdf949e6dd4bd09d664932676",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hipGetErrorName"
			],
			"argsstring": [
				"(hipError_t hip_error)"
			],
			"name": [
				"hipGetErrorName"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipError_t",
									"$": {
										"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_error"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return hip error as text string form. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"hip_error"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Error code to convert to name. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"const char pointer to the NULL-terminated error name"
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorString",
													"$": {
														"refid": "group___error_1ga045c60abfb65927aabc7e6e1e3d2598b",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2283",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2283",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetErrorString": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga045c60abfb65927aabc7e6e1e3d2598b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hipGetErrorString"
			],
			"argsstring": [
				"(hipError_t hipError)"
			],
			"name": [
				"hipGetErrorString"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipError_t",
									"$": {
										"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hipError"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return handy text string message to explain the error which occurred. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														"hipError"
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Error code to convert to string. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"const char pointer to the NULL-terminated error string"
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorName",
													"$": {
														"refid": "group___error_1gaa9233b8cdf949e6dd4bd09d664932676",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2292",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2292",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGetErrorName": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga9d4b12c34915185e062dd5611fcabdec",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGetErrorName"
			],
			"argsstring": [
				"(hipError_t hipError, const char **errorString)"
			],
			"name": [
				"hipDrvGetErrorName"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipError_t",
									"$": {
										"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hipError"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"errorString"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return hip error as text string form. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hipError",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Error code to convert to string. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "errorString",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"char pointer to the NULL-terminated error string "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorName",
													"$": {
														"refid": "group___error_1gaa9233b8cdf949e6dd4bd09d664932676",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2302",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2302",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGetErrorString": {
			"$": {
				"kind": "function",
				"id": "group___error_1ga3aa89ef36e29e1f03b8d3450d05dcf96",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGetErrorString"
			],
			"argsstring": [
				"(hipError_t hipError, const char **errorString)"
			],
			"name": [
				"hipDrvGetErrorString"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipError_t",
									"$": {
										"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hipError"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"errorString"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return handy text string message to explain the error which occurred. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hipError",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Error code to convert to string. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "errorString",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"char pointer to the NULL-terminated error string "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , hipPeakAtLastError,  ",
											"ref": [
												{
													"_": "hipGetErrorName",
													"$": {
														"refid": "group___error_1gaa9233b8cdf949e6dd4bd09d664932676",
														"kindref": "member"
													}
												},
												{
													"_": "hipGetLastError",
													"$": {
														"refid": "group___error_1ga533daeb9114d7fc2db8d867adf9e419b",
														"kindref": "member"
													}
												},
												{
													"_": "hipError_t",
													"$": {
														"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2312",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2312",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventCreateWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventCreateWithFlags"
			],
			"argsstring": [
				"(hipEvent_t *event, unsigned flags)"
			],
			"name": [
				"hipEventCreateWithFlags"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				},
				{
					"type": [
						"unsigned"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an event with the specified flags. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the newly created event. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "Flags to control event behavior. Valid values are , , ,   : Default flag. The event will use active synchronization and will support timing. Blocking synchronization provides lowest possible latency at the expense of dedicating a CPU to poll on the event.  : The event will use blocking synchronization : if hipEventSynchronize is called on this event, the thread will block until the event completes. This can increase latency for the synchroniation but can result in lower power and more resources for other CPU threads.  : Disable recording of timing information. Events created with this flag would not record profiling data and provide best performance if used for synchronization.  : The event can be used as an interprocess event. hipEventDisableTiming flag also must be set when hipEventInterprocess flag is set.  : Disable acquire and release system scope fence. This may improve performance but device memory may not be visible to the host and other devices if this flag is set.",
															"ref": [
																{
																	"_": "hipEventDefault",
																	"$": {
																		"refid": "group___global_defs_1ga122a5853359eba97cf047ddd153740f0",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventBlockingSync",
																	"$": {
																		"refid": "group___global_defs_1gafa1c076a5b991763a98695063f1ea11d",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventDisableTiming",
																	"$": {
																		"refid": "group___global_defs_1ga3c0f44a85e36a4c67671da6bcdad0351",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventInterprocess",
																	"$": {
																		"refid": "group___global_defs_1ga0f01d74059baa704e42aeff8222166bb",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventDefault",
																	"$": {
																		"refid": "group___global_defs_1ga122a5853359eba97cf047ddd153740f0",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventBlockingSync",
																	"$": {
																		"refid": "group___global_defs_1gafa1c076a5b991763a98695063f1ea11d",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventDisableTiming",
																	"$": {
																		"refid": "group___global_defs_1ga3c0f44a85e36a4c67671da6bcdad0351",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventInterprocess",
																	"$": {
																		"refid": "group___global_defs_1ga0f01d74059baa704e42aeff8222166bb",
																		"kindref": "member"
																	}
																},
																{
																	"_": "hipEventDisableSystemFence",
																	"$": {
																		"refid": "group___global_defs_1ga0e9ec830fe53ed7a24a8b96da15f4f12",
																		"kindref": "member"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2717",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2717",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventCreate": {
			"$": {
				"kind": "function",
				"id": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventCreate"
			],
			"argsstring": [
				"(hipEvent_t *event)"
			],
			"name": [
				"hipEventCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Create an event",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the newly created event."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventQuery",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2729",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2729",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventRecord": {
			"$": {
				"kind": "function",
				"id": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventRecord"
			],
			"argsstring": [
				"(hipEvent_t event, hipStream_t stream)"
			],
			"name": [
				"hipEventRecord"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Record an event in the specified stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\n or  must be used to determine when the event transitions from \"recording\" (after  is called) to \"recorded\" (when timestamps are set, if requested).",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"event to record. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream in which to record event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipEventQuery()",
									"$": {
										"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
										"kindref": "member"
									}
								},
								{
									"_": "hipEventSynchronize()",
									"$": {
										"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
										"kindref": "member"
									}
								},
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								}
							]
						},
						"Events which are recorded in a non-NULL stream will transition to from recording to \"recorded\" state when they reach the head of the specified stream, after all previous commands in that stream have completed executing.",
						{
							"_": "If  has been previously called on this event, then this call will overwrite any existing state in event.",
							"ref": [
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If this function is called on an event that is currently being recorded, results are undefined\n",
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												"either outstanding recording may save state into the event, and the order is not guaranteed."
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": ": If this function is not called before use  or ,  is returned, meaning no pending event in the stream.",
											"ref": [
												{
													"_": "hipEventQuery()",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize()",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventQuery",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2763",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2763",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventDestroy": {
			"$": {
				"kind": "function",
				"id": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventDestroy"
			],
			"argsstring": [
				"(hipEvent_t event)"
			],
			"name": [
				"hipEventDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroy the specified event. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nReleases memory associated with the event. If the event is recording but has not completed recording when  is called, the function will return immediately and the completion_future resources will be released later, when the hipDevice is synchronized.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Event to destroy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipEventDestroy()",
									"$": {
										"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventQuery",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2781",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2781",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventSynchronize": {
			"$": {
				"kind": "function",
				"id": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventSynchronize"
			],
			"argsstring": [
				"(hipEvent_t event)"
			],
			"name": [
				"hipEventSynchronize"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Wait for an event to complete. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "This function will block until the event is ready, waiting for all previous work in the stream specified when event was recorded with .",
							"ref": [
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If  has not been called on , this function returns  when no event is captured.",
							"ref": [
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								},
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							],
							"computeroutput": [
								"event"
							]
						},
						"This function needs to support hipEventBlockingSync parameter.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Event on which to wait."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventQuery",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2801",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2801",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventElapsedTime": {
			"$": {
				"kind": "function",
				"id": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventElapsedTime"
			],
			"argsstring": [
				"(float *ms, hipEvent_t start, hipEvent_t stop)"
			],
			"name": [
				"hipEventElapsedTime"
			],
			"param": [
				{
					"type": [
						"float *"
					],
					"declname": [
						"ms"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"start"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stop"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return the elapsed time between two events. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nComputes the elapsed time between two events. Time is computed in ms, with a resolution of approximately 1 us.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ms",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														": Return time between start and stop in ms. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "start",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														": Start event. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stop",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														": Stop event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotReady",
													"$": {
														"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						"Events which are recorded in a NULL stream will block until all commands on all other streams complete execution, and then record the timestamp.",
						{
							"_": "Events which are recorded in a non-NULL stream will record their timestamp when they reach the head of the specified stream, after all previous commands in that stream have completed executing. Thus the time that the event recorded may be significantly after the host calls .",
							"ref": [
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If  has not been called on either event, then  is returned. If  has been called on both events, but the timestamp has not yet been recorded on one or both events (that is,  would return  on at least one of the events), then  is returned.",
							"ref": [
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorInvalidHandle",
									"$": {
										"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
										"kindref": "member"
									}
								},
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								},
								{
									"_": "hipEventQuery()",
									"$": {
										"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorNotReady",
									"$": {
										"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorNotReady",
									"$": {
										"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventQuery",
													"$": {
														"refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2830",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2830",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipEventQuery": {
			"$": {
				"kind": "function",
				"id": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipEventQuery"
			],
			"argsstring": [
				"(hipEvent_t event)"
			],
			"name": [
				"hipEventQuery"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query event status. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nQuery the status of the specified event. This function will return  if all commands in the appropriate stream (specified to ) have completed. If any execution has not completed, then  is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Event to query. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotReady",
													"$": {
														"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								},
								{
									"_": "hipEventRecord()",
									"$": {
										"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorNotReady",
									"$": {
										"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": ": This API returns , if  is not called before this API.",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord()",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipEventCreate",
													"$": {
														"refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventCreateWithFlags",
													"$": {
														"refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventRecord",
													"$": {
														"refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventDestroy",
													"$": {
														"refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventSynchronize",
													"$": {
														"refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
														"kindref": "member"
													}
												},
												{
													"_": "hipEventElapsedTime",
													"$": {
														"refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2847",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2847",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFuncSetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___execution_1ga8417deea9092f35e497bc7e19bd5e12d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFuncSetAttribute"
			],
			"argsstring": [
				"(const void *func, hipFuncAttribute attr, int value)"
			],
			"name": [
				"hipFuncSetAttribute"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"func"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFuncAttribute",
									"$": {
										"refid": "group___global_defs_1ga4a800faf1ce60529b4f052a30ef10b85",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set attribute for a specific function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "func",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the function "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Attribute to set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to set"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2201",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2201",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFuncSetCacheConfig": {
			"$": {
				"kind": "function",
				"id": "group___execution_1gafdb33ef569eb89808fc5178d04b508ba",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFuncSetCacheConfig"
			],
			"argsstring": [
				"(const void *func, hipFuncCache_t config)"
			],
			"name": [
				"hipFuncSetCacheConfig"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"func"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFuncCache_t",
									"$": {
										"refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"config"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set Cache configuration for a specific function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "func",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the function. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "config",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Configuration to set."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  Note: AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures. ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2213",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2213",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFuncSetSharedMemConfig": {
			"$": {
				"kind": "function",
				"id": "group___execution_1ga36b1d09bfb54678df0c7dc1066ec029c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFuncSetSharedMemConfig"
			],
			"argsstring": [
				"(const void *func, hipSharedMemConfig config)"
			],
			"name": [
				"hipFuncSetSharedMemConfig"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"func"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipSharedMemConfig",
									"$": {
										"refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"config"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set shared memory configuation for a specific function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "func",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the function "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "config",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Configuration"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2226",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2226",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipImportExternalSemaphore": {
			"$": {
				"kind": "function",
				"id": "group___external_1ga089c3d30b1b67b9bc4120cf557e3d2fc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipImportExternalSemaphore"
			],
			"argsstring": [
				"(hipExternalSemaphore_t *extSem_out, const hipExternalSemaphoreHandleDesc *semHandleDesc)"
			],
			"name": [
				"hipImportExternalSemaphore"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipExternalSemaphore_t",
									"$": {
										"refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extSem_out"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreHandleDesc",
									"$": {
										"refid": "structhip_external_semaphore_handle_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"semHandleDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Imports an external semaphore. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extSem_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"External semaphores to be waited on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "semHandleDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Semaphore import handle descriptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2957",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2957",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipSignalExternalSemaphoresAsync": {
			"$": {
				"kind": "function",
				"id": "group___external_1gaeb7a6254609be10d799997d749ee96c3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipSignalExternalSemaphoresAsync"
			],
			"argsstring": [
				"(const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)"
			],
			"name": [
				"hipSignalExternalSemaphoresAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphore_t",
									"$": {
										"refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extSemArray"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreSignalParams",
									"$": {
										"refid": "structhip_external_semaphore_signal_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"paramsArray"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numExtSems"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Signals a set of external semaphore objects. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extSemArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"External semaphores to be waited on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "paramsArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of semaphore parameters "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numExtSems",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of semaphores to wait on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to enqueue the wait operations in"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2971",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2971",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipWaitExternalSemaphoresAsync": {
			"$": {
				"kind": "function",
				"id": "group___external_1gade94d4535f2631d3d275f812ad372279",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipWaitExternalSemaphoresAsync"
			],
			"argsstring": [
				"(const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)"
			],
			"name": [
				"hipWaitExternalSemaphoresAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphore_t",
									"$": {
										"refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extSemArray"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreWaitParams",
									"$": {
										"refid": "structhip_external_semaphore_wait_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"paramsArray"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numExtSems"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Waits on a set of external semaphore objects. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extSemArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"External semaphores to be waited on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "paramsArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of semaphore parameters "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numExtSems",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of semaphores to wait on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to enqueue the wait operations in"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2986",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2986",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDestroyExternalSemaphore": {
			"$": {
				"kind": "function",
				"id": "group___external_1ga951f58a4bfdf32fe540e3732d9350429",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDestroyExternalSemaphore"
			],
			"argsstring": [
				"(hipExternalSemaphore_t extSem)"
			],
			"name": [
				"hipDestroyExternalSemaphore"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExternalSemaphore_t",
									"$": {
										"refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extSem"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys an external semaphore object and releases any references to the underlying resource. Any outstanding signals or waits must have completed before the semaphore is destroyed. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extSem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"handle to an external memory object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2998",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2998",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipImportExternalMemory": {
			"$": {
				"kind": "function",
				"id": "group___external_1ga3843e77ea25a17638a4d732d908ec625",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipImportExternalMemory"
			],
			"argsstring": [
				"(hipExternalMemory_t *extMem_out, const hipExternalMemoryHandleDesc *memHandleDesc)"
			],
			"name": [
				"hipImportExternalMemory"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipExternalMemory_t",
									"$": {
										"refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extMem_out"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalMemoryHandleDesc",
									"$": {
										"refid": "structhip_external_memory_handle_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"memHandleDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Imports an external memory object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extMem_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned handle to an external memory object "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "memHandleDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory import handle descriptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3010",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3010",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExternalMemoryGetMappedBuffer": {
			"$": {
				"kind": "function",
				"id": "group___external_1gafdd9c269bcab2c5dd97f6788e26db9c8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExternalMemoryGetMappedBuffer"
			],
			"argsstring": [
				"(void **devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc *bufferDesc)"
			],
			"name": [
				"hipExternalMemoryGetMappedBuffer"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExternalMemory_t",
									"$": {
										"refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extMem"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalMemoryBufferDesc",
									"$": {
										"refid": "structhip_external_memory_buffer_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"bufferDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Maps a buffer onto an imported memory object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned device pointer to buffer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extMem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Handle to external memory object "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bufferDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Buffer descriptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3022",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3022",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDestroyExternalMemory": {
			"$": {
				"kind": "function",
				"id": "group___external_1ga0528cd84c3ccb2f288c802250ebbc653",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDestroyExternalMemory"
			],
			"argsstring": [
				"(hipExternalMemory_t extMem)"
			],
			"name": [
				"hipDestroyExternalMemory"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExternalMemory_t",
									"$": {
										"refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extMem"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys an external memory object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extMem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"External memory object to be destroyed"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										""
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3032",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3032",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExternalMemoryGetMappedMipmappedArray": {
			"$": {
				"kind": "function",
				"id": "group___external_1gaee54bcd6d84a303b67777e06ebf78dce",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExternalMemoryGetMappedMipmappedArray"
			],
			"argsstring": [
				"(hipMipmappedArray_t *mipmap, hipExternalMemory_t extMem, const hipExternalMemoryMipmappedArrayDesc *mipmapDesc)"
			],
			"name": [
				"hipExternalMemoryGetMappedMipmappedArray"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t *"
					],
					"declname": [
						"mipmap"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExternalMemory_t",
									"$": {
										"refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"extMem"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalMemoryMipmappedArrayDesc",
									"$": {
										"refid": "structhip_external_memory_mipmapped_array_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"mipmapDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Maps a mipmapped array onto an external memory object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nReturned mipmapped array must be freed using hipFreeMipmappedArray.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmap",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"mipmapped array to return "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extMem",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"external memory object handle "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmapDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"external mipmapped array descriptor"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidResourceHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipImportExternalMemory",
													"$": {
														"refid": "group___external_1ga3843e77ea25a17638a4d732d908ec625",
														"kindref": "member"
													}
												},
												{
													"_": "hipDestroyExternalMemory",
													"$": {
														"refid": "group___external_1ga0528cd84c3ccb2f288c802250ebbc653",
														"kindref": "member"
													}
												},
												{
													"_": "hipExternalMemoryGetMappedBuffer",
													"$": {
														"refid": "group___external_1gafdd9c269bcab2c5dd97f6788e26db9c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeMipmappedArray",
													"$": {
														"refid": "group___texture_1ga0255fc720bfe4164717b99dbd7c954c4",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3046",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3046",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphicsMapResources": {
			"$": {
				"kind": "function",
				"id": "group___g_l_1gac625a73bf06d50c6554c08cb28e63aa6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphicsMapResources"
			],
			"argsstring": [
				"(int count, hipGraphicsResource_t *resources, hipStream_t stream)"
			],
			"name": [
				"hipGraphicsMapResources"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphicsResource_t",
									"$": {
										"refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"resources"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Maps a graphics resource for access. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Number of resources to map. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "resources",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer of resources to map. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream for synchronization."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnknown",
													"$": {
														"refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidResourceHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8309",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8309",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphicsSubResourceGetMappedArray": {
			"$": {
				"kind": "function",
				"id": "group___g_l_1ga9051a8bc901816be265c5de8f2202775",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphicsSubResourceGetMappedArray"
			],
			"argsstring": [
				"(hipArray_t *array, hipGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)"
			],
			"name": [
				"hipGraphicsSubResourceGetMappedArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphicsResource_t",
									"$": {
										"refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"resource"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"arrayIndex"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"mipLevel"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get an array through which to access a subresource of a mapped graphics resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer of array through which a subresource of resource may be accessed. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "resource",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mapped resource to access. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "arrayIndex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Array index for the subresource to access. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipLevel",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mipmap level for the subresource to access."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"In this API, the value of arrayIndex higher than zero is currently not supported. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8324",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8324",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphicsResourceGetMappedPointer": {
			"$": {
				"kind": "function",
				"id": "group___g_l_1gac06c5fe793213a7cc4047c2ae42fd915",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphicsResourceGetMappedPointer"
			],
			"argsstring": [
				"(void **devPtr, size_t *size, hipGraphicsResource_t resource)"
			],
			"name": [
				"hipGraphicsResourceGetMappedPointer"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphicsResource_t",
									"$": {
										"refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"resource"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets device accessible address of a graphics resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer of device through which graphic resource may be accessed. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Size of the buffer accessible from devPtr. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "resource",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mapped resource to access."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8336",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8336",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphicsUnmapResources": {
			"$": {
				"kind": "function",
				"id": "group___g_l_1ga6a14e77207a54c59dea731345e3e6e72",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphicsUnmapResources"
			],
			"argsstring": [
				"(int count, hipGraphicsResource_t *resources, hipStream_t stream)"
			],
			"name": [
				"hipGraphicsUnmapResources"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphicsResource_t",
									"$": {
										"refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"resources"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Unmaps graphics resources. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Number of resources to unmap. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "resources",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer of resources to unmap. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream for synchronization."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnknown",
													"$": {
														"refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorContextIsDestroyed",
													"$": {
														"refid": "hip__runtime__api_8h_1a6351a54f4747c7ada9963ca60ec74cf4",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8348",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8348",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphicsUnregisterResource": {
			"$": {
				"kind": "function",
				"id": "group___g_l_1ga48344c780768da2002fcfe3395c6a0c0",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphicsUnregisterResource"
			],
			"argsstring": [
				"(hipGraphicsResource_t resource)"
			],
			"name": [
				"hipGraphicsUnregisterResource"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphicsResource_t",
									"$": {
										"refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"resource"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Unregisters a graphics resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "resource",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Graphics resources to unregister."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8358",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8358",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamBeginCapture": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga826596fabd1d7657721cc3abfb476b10",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamBeginCapture"
			],
			"argsstring": [
				"(hipStream_t stream, hipStreamCaptureMode mode)"
			],
			"name": [
				"hipStreamBeginCapture"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStreamCaptureMode",
									"$": {
										"refid": "group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mode"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Begins graph capture on a stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream to initiate capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Controls the interaction of this capture sequence with other API calls that are not safe."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6638",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6638",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamEndCapture": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga83fc036ee874fbfe066c0fe4fce816b3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamEndCapture"
			],
			"argsstring": [
				"(hipStream_t stream, hipGraph_t *pGraph)"
			],
			"name": [
				"hipStreamEndCapture"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Ends capture on a stream, returning the captured graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream to end capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraph",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns the graph captured."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6652",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6652",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamGetCaptureInfo": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5343379e3f86d39aa8527fe0e68abf14",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamGetCaptureInfo"
			],
			"argsstring": [
				"(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)"
			],
			"name": [
				"hipStreamGetCaptureInfo"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStreamCaptureStatus",
									"$": {
										"refid": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pCaptureStatus"
					]
				},
				{
					"type": [
						"unsigned long long *"
					],
					"declname": [
						"pId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get capture status of a stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream under capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCaptureStatus",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns current status of the capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pId",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- unique ID of the capture."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorStreamCaptureImplicit",
													"$": {
														"refid": "hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6667",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6667",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamGetCaptureInfo_v2": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gab794bda84f171bcd1834dd40ed0949b5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamGetCaptureInfo_v2"
			],
			"argsstring": [
				"(hipStream_t stream, hipStreamCaptureStatus *captureStatus_out, unsigned long long *id_out, hipGraph_t *graph_out, const hipGraphNode_t **dependencies_out, size_t *numDependencies_out)"
			],
			"name": [
				"hipStreamGetCaptureInfo_v2"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStreamCaptureStatus",
									"$": {
										"refid": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"captureStatus_out"
					]
				},
				{
					"type": [
						"unsigned long long *"
					],
					"declname": [
						"id_out"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph_out"
					]
				},
				{
					"type": [
						{
							"_": "const  **",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dependencies_out"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"numDependencies_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get stream's capture state. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream under capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "captureStatus_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns current status of the capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "id_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- unique ID of the capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph_out",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns the graph being captured into. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dependencies_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns pointer to an array of nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns size of the array returned in dependencies_out."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorStreamCaptureImplicit",
													"$": {
														"refid": "hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6686",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6686",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamIsCapturing": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga1e6353035e74630a13ad7effd44e3263",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamIsCapturing"
			],
			"argsstring": [
				"(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)"
			],
			"name": [
				"hipStreamIsCapturing"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStreamCaptureStatus",
									"$": {
										"refid": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pCaptureStatus"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get stream's capture state. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream under capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCaptureStatus",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns current status of the capture."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorStreamCaptureImplicit",
													"$": {
														"refid": "hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6704",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6704",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamUpdateCaptureDependencies": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf40ec47e46b07252d36204482ab47c02",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamUpdateCaptureDependencies"
			],
			"argsstring": [
				"(hipStream_t stream, hipGraphNode_t *dependencies, size_t numDependencies, unsigned int flags)"
			],
			"name": [
				"hipStreamUpdateCaptureDependencies"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Update the set of dependencies in a capturing stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream under capture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to an array of nodes to Add/Replace. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size of the array in dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "Flag how to update dependency set. Should be one of value in enum  ",
															"ref": [
																{
																	"_": "hipStreamUpdateCaptureDependenciesFlags",
																	"$": {
																		"refid": "group___global_defs_1ga76c22e13ab588b0a551814adca12e91a",
																		"kindref": "member"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorIllegalState",
													"$": {
														"refid": "hip__runtime__api_8h_1adbc9063863e0cb8f70021622133161b7",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6720",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6720",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipThreadExchangeStreamCaptureMode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaa5d692f2f09cad68b7534917e76d8c7f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipThreadExchangeStreamCaptureMode"
			],
			"argsstring": [
				"(hipStreamCaptureMode *mode)"
			],
			"name": [
				"hipThreadExchangeStreamCaptureMode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStreamCaptureMode",
									"$": {
										"refid": "group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mode"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Swaps the stream capture mode of a thread. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to mode value to swap with the current mode "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6734",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6734",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphCreate": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga0569a00583e14be02790df5531e905d6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphCreate"
			],
			"argsstring": [
				"(hipGraph_t *pGraph, unsigned int flags)"
			],
			"name": [
				"hipGraphCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraph"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraph",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- flags for graph creation, must be 0."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMemoryAllocation",
													"$": {
														"refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6748",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6748",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphDestroy": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gadf21ff5ddbe98084e0fe3db592290ca7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphDestroy"
			],
			"argsstring": [
				"(hipGraph_t graph)"
			],
			"name": [
				"hipGraphDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to destroy."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6761",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6761",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddDependencies": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga55de501ca624e30d33a58722b97ab119",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddDependencies"
			],
			"argsstring": [
				"(hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)"
			],
			"name": [
				"hipGraphAddDependencies"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"from"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"to"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Adds dependency edges to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "from",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph nodes with dependenties to add from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "to",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph nodes to add dependenties to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of dependencies to add. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6776",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6776",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphRemoveDependencies": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga3a97f18f0c27e7cd58b404532e940dc6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphRemoveDependencies"
			],
			"argsstring": [
				"(hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)"
			],
			"name": [
				"hipGraphRemoveDependencies"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"from"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"to"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Removes dependency edges from a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to remove dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "from",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Array of nodes that provide the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "to",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Array of dependent nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of dependencies to remove. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6792",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6792",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphGetEdges": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gab44fc541c62279d674436289d8f504b1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphGetEdges"
			],
			"argsstring": [
				"(hipGraph_t graph, hipGraphNode_t *from, hipGraphNode_t *to, size_t *numEdges)"
			],
			"name": [
				"hipGraphGetEdges"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"from"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"to"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"numEdges"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a graph's dependency edges. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nfrom and to may both be NULL, in which case this function only returns the number of edges in numEdges. Otherwise, numEdges entries will be filled in. If numEdges is higher than the actual number of edges, the remaining entries in from and to will be set to NULL, and the number of edges actually returned will be written to numEdges \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to get the edges from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "from",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph nodes to return edge endpoints. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "to",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph nodes to return edge endpoints. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numEdges",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns number of edges. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6812",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6812",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphGetNodes": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf006701d98164ed3492755bbb19bab83",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphGetNodes"
			],
			"argsstring": [
				"(hipGraph_t graph, hipGraphNode_t *nodes, size_t *numNodes)"
			],
			"name": [
				"hipGraphGetNodes"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"nodes"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"numNodes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns graph nodes. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nnodes may be NULL, in which case this function will return the number of nodes in numNodes. Otherwise, numNodes entries will be filled in. If numNodes is higher than the actual number of nodes, the remaining entries in nodes will be set to NULL, and the number of nodes actually obtained will be returned in numNodes. \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to get the nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to return the graph nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numNodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns number of graph nodes. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6831",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6831",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphGetRootNodes": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gafc3f79160be0a919644835388258bd87",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphGetRootNodes"
			],
			"argsstring": [
				"(hipGraph_t graph, hipGraphNode_t *pRootNodes, size_t *pNumRootNodes)"
			],
			"name": [
				"hipGraphGetRootNodes"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pRootNodes"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pNumRootNodes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns graph's root nodes. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\npRootNodes may be NULL, in which case this function will return the number of root nodes in pNumRootNodes. Otherwise, pNumRootNodes entries will be filled in. If pNumRootNodes is higher than the actual number of root nodes, the remaining entries in pRootNodes will be set to NULL, and the number of nodes actually obtained will be returned in pNumRootNodes. \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to get the nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pRootNodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to return the graph's root nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNumRootNodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns the number of graph's root nodes. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6849",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6849",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeGetDependencies": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga03f5231946f3e850de44120b3fffd58b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeGetDependencies"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipGraphNode_t *pDependencies, size_t *pNumDependencies)"
			],
			"name": [
				"hipGraphNodeGetDependencies"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pNumDependencies"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a node's dependencies. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\npDependencies may be NULL, in which case this function will return the number of dependencies in pNumDependencies. Otherwise, pNumDependencies entries will be filled in. If pNumDependencies is higher than the actual number of dependencies, the remaining entries in pDependencies will be set to NULL, and the number of nodes actually obtained will be returned in pNumDependencies. \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- graph node to get the dependencies from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to to return the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNumDependencies",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns the number of graph node dependencies. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6868",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6868",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeGetDependentNodes": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5ca0eedf026ec470d3e7d10724b08253",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeGetDependentNodes"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)"
			],
			"name": [
				"hipGraphNodeGetDependentNodes"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependentNodes"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pNumDependentNodes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a node's dependent nodes. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nDependentNodes may be NULL, in which case this function will return the number of dependent nodes in pNumDependentNodes. Otherwise, pNumDependentNodes entries will be filled in. If pNumDependentNodes is higher than the actual number of dependent nodes, the remaining entries in pDependentNodes will be set to NULL, and the number of nodes actually obtained will be returned in pNumDependentNodes. \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- graph node to get the Dependent nodes from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependentNodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to return the graph dependent nodes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNumDependentNodes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returns the number of graph node dependent nodes. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6888",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6888",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeGetType": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga87c68ae9408a6438d4a1101560ceea11",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeGetType"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipGraphNodeType *pType)"
			],
			"name": [
				"hipGraphNodeGetType"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNodeType",
									"$": {
										"refid": "group___global_defs_1ga4727d20b89566832c74b762f987b9728",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pType"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a node's type. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pType",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the return the type "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6902",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6902",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphDestroyNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga29ce4a5ca318996445984df02b036f01",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphDestroyNode"
			],
			"argsstring": [
				"(hipGraphNode_t node)"
			],
			"name": [
				"hipGraphDestroyNode"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Remove a node from the graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- graph node to remove "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6914",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6914",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphClone": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf9eec67b896029a35ee31055c247cc77",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphClone"
			],
			"argsstring": [
				"(hipGraph_t *pGraphClone, hipGraph_t originalGraph)"
			],
			"name": [
				"hipGraphClone"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphClone"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"originalGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Clones a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphClone",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returns newly created cloned graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "originalGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- original graph to clone from. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMemoryAllocation",
													"$": {
														"refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6927",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6927",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeFindInClone": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga14d9f4cc7967a4cb06aca0631025495d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeFindInClone"
			],
			"argsstring": [
				"(hipGraphNode_t *pNode, hipGraphNode_t originalNode, hipGraph_t clonedGraph)"
			],
			"name": [
				"hipGraphNodeFindInClone"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"originalNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"clonedGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Finds a cloned version of a node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returns the cloned node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "originalNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- original node handle. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "clonedGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Cloned graph to query. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6941",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6941",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphInstantiate": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf5ede92050539e795805f4e2705e6b59",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphInstantiate"
			],
			"argsstring": [
				"(hipGraphExec_t *pGraphExec, hipGraph_t graph, hipGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize)"
			],
			"name": [
				"hipGraphInstantiate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pErrorNode"
					]
				},
				{
					"type": [
						"char *"
					],
					"declname": [
						"pLogBuffer"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"bufferSize"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an executable graph from a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphExec",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instantiated executable graph that is created. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to instantiate. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pErrorNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to error node in case error occured in graph instantiation, it could modify the correponding node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pLogBuffer",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to log buffer. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bufferSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of log buffer."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6960",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6960",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphInstantiateWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5f8c8f7c3cf2db57908891b715759028",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphInstantiateWithFlags"
			],
			"argsstring": [
				"(hipGraphExec_t *pGraphExec, hipGraph_t graph, unsigned long long flags)"
			],
			"name": [
				"hipGraphInstantiateWithFlags"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						"unsigned long long"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an executable graph from a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphExec",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instantiated executable graph that is created. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to instantiate. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Flags to control instantiation. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues.It does not support any of flag and is behaving as hipGraphInstantiate. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6975",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6975",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphInstantiateWithParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga97772b87ae4396a8100890df46890c8c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphInstantiateWithParams"
			],
			"argsstring": [
				"(hipGraphExec_t *pGraphExec, hipGraph_t graph, hipGraphInstantiateParams *instantiateParams)"
			],
			"name": [
				"hipGraphInstantiateWithParams"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphInstantiateParams",
									"$": {
										"refid": "structhip_graph_instantiate_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"instantiateParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an executable graph from a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphExec",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instantiated executable graph that is created. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to instantiate. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "instantiateParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Graph Instantiate Params "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6989",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6989",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphLaunch": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaa7e8979d0977ded7d554ae272ad557ff",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphLaunch"
			],
			"argsstring": [
				"(hipGraphExec_t graphExec, hipStream_t stream)"
			],
			"name": [
				"hipGraphLaunch"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"launches an executable graph in a stream "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of executable graph to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of stream in which to launch executable graph. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7001",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7001",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphUpload": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga6626b6ab9daa6358b0c2067272c449ff",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphUpload"
			],
			"argsstring": [
				"(hipGraphExec_t graphExec, hipStream_t stream)"
			],
			"name": [
				"hipGraphUpload"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"uploads an executable graph in a stream "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of executable graph to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of stream in which to launch executable graph. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7013",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7013",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaefab3caa775470618527796774eae6f9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraphNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphAddNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNodeParams",
									"$": {
										"refid": "structhip_graph_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a kernel execution node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the dependencies on the kernel execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters for the node. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", . ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7027",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7027",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecGetFlags": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga87384379d402af7a44f1464419f65d46",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecGetFlags"
			],
			"argsstring": [
				"(hipGraphExec_t graphExec, unsigned long long *flags)"
			],
			"name": [
				"hipGraphExecGetFlags"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graphExec"
					]
				},
				{
					"type": [
						"unsigned long long *"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return the flags on executable graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Executable graph to get the flags. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Flags used to instantiate this executable graph. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", . ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7040",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7040",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga74265124259dae4cd413b635e1f33901",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipGraphNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNodeParams",
									"$": {
										"refid": "structhip_graph_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates parameters of a created node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , . ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7051",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7051",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8bc17629df369e20c61f8fba26b59a23",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t graphExec, hipGraphNode_t node, hipGraphNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphExecNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNodeParams",
									"$": {
										"refid": "structhip_graph_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates parameters of a created node on executable graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of executable graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , . ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7063",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7063",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecDestroy": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga4786c0e6cc8c1cd96a346e0d82177a35",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecDestroy"
			],
			"argsstring": [
				"(hipGraphExec_t graphExec)"
			],
			"name": [
				"hipGraphExecDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graphExec"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys an executable graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of executable graph to destry."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ".",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7075",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7075",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecUpdate": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga0fb2ea2d5d6348888b074a7e44738b98",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecUpdate"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraph_t hGraph, hipGraphNode_t *hErrorNode_out, hipGraphExecUpdateResult *updateResult_out)"
			],
			"name": [
				"hipGraphExecUpdate"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraph"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hErrorNode_out"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphExecUpdateResult",
									"$": {
										"refid": "group___global_defs_1gac79a2b2c0f83ae81c9325978c044892e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"updateResult_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Check whether an executable graph can be updated with a graph and perform the update if * possible. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of executable graph to update. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- graph that contains the updated parameters. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hErrorNode_out",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- node which caused the permissibility check to forbid the update. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "updateResult_out",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Whether the graph update was permitted. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorGraphExecUpdateFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a3aa157043af8a1579eb0d89c05ff5aa1",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7091",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7091",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddKernelNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gab5d1eebec77853325f9f9884698b1a67",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddKernelNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipKernelNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphAddKernelNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipKernelNodeParams",
									"$": {
										"refid": "structhip_kernel_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a kernel execution node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the dependencies on the kernel execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters to the kernel execution node on the GPU. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7107",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7107",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphKernelNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga6d46df5efcbfebb98d7b9bfaba4d81b6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphKernelNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipKernelNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphKernelNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipKernelNodeParams",
									"$": {
										"refid": "structhip_kernel_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets kernel node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to get parameters from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7120",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7120",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphKernelNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga00c58e917faec3f6d71cbef95336105b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphKernelNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphKernelNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipKernelNodeParams",
									"$": {
										"refid": "structhip_kernel_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a kernel node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7131",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7131",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecKernelNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5b1918dae65224863b7370e6d4ad3f2a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecKernelNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphExecKernelNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipKernelNodeParams",
									"$": {
										"refid": "structhip_kernel_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a kernel node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the kernel node parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7143",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7143",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphAddMemcpyNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga33aff03ac42d5ccf4bc39d78b91d1397",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphAddMemcpyNode"
			],
			"argsstring": [
				"(hipGraphNode_t *phGraphNode, hipGraph_t hGraph, const hipGraphNode_t *dependencies, size_t numDependencies, const HIP_MEMCPY3D *copyParams, hipCtx_t ctx)"
			],
			"name": [
				"hipDrvGraphAddMemcpyNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"phGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"copyParams"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memcpy node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "phGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memcpy execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "copyParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters for the memory copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- cotext related to current device. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7159",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7159",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemcpyNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gafc4759560bef7b96ca3eefccde8dd550",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemcpyNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemcpy3DParms *pCopyParams)"
			],
			"name": [
				"hipGraphAddMemcpyNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopyParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memcpy node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memcpy execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCopyParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters for the memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7175",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7175",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemcpyNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga72fec822464281fa91a6a3b19556f17d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemcpyNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)"
			],
			"name": [
				"hipGraphMemcpyNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a memcpy node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to get parameters from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7187",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7187",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemcpyNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga098c63fb0fbb57e8d9ee6da0fbfccc70",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemcpyNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, const hipMemcpy3DParms *pNodeParams)"
			],
			"name": [
				"hipGraphMemcpyNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memcpy node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7198",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7198",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphKernelNodeSetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gacfa93a3e229d03215c3da71f44d70d56",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphKernelNodeSetAttribute"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, hipKernelNodeAttrID attr, const hipKernelNodeAttrValue *value)"
			],
			"name": [
				"hipGraphKernelNodeSetAttribute"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipKernelNodeAttrID",
									"$": {
										"refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipKernelNodeAttrValue",
									"$": {
										"refid": "group___global_defs_1ga34eb9fa298c10a891ed61bea24ed6c19",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a node attribute. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the attribute node is set to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7210",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7210",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphKernelNodeGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaa3d0f64875d84bea5ddf11b94364d598",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphKernelNodeGetAttribute"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, hipKernelNodeAttrID attr, hipKernelNodeAttrValue *value)"
			],
			"name": [
				"hipGraphKernelNodeGetAttribute"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipKernelNodeAttrID",
									"$": {
										"refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipKernelNodeAttrValue",
									"$": {
										"refid": "group___global_defs_1ga34eb9fa298c10a891ed61bea24ed6c19",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a node attribute. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the attribute node is set to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7222",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7222",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecMemcpyNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8b2a9b3158e565a1266269fed5f658ae",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecMemcpyNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)"
			],
			"name": [
				"hipGraphExecMemcpyNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memcpy node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the kernel node parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7234",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7234",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemcpyNode1D": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga05e51a4f490804536f16f5dc83459ca1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemcpyNode1D"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphAddMemcpyNode1D"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a 1D memcpy node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memcpy execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the source. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7252",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7252",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemcpyNodeSetParams1D": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga3c7686dca4a405d9ec5a8a89615d33a7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemcpyNodeSetParams1D"
			],
			"argsstring": [
				"(hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphMemcpyNodeSetParams1D"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memcpy node's parameters to perform a 1-dimensional copy. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the source. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7268",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7268",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecMemcpyNodeSetParams1D": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga456ee94786d7923e4e7968dc19a03563",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecMemcpyNodeSetParams1D"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphExecMemcpyNodeSetParams1D"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memcpy node in the given graphExec to perform a 1-dimensional copy. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the source. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7285",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7285",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemcpyNodeFromSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga6f3c6ac9b90264dd297f9ee45fdb5a1c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemcpyNodeFromSymbol"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphAddMemcpyNodeFromSymbol"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memcpy node to copy from a symbol on the device and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memcpy execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7305",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7305",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemcpyNodeSetParamsFromSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga2d8fb8cff71140a7183b488dfd5c5642",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemcpyNodeSetParamsFromSymbol"
			],
			"argsstring": [
				"(hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphMemcpyNodeSetParamsFromSymbol"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memcpy node's parameters to copy from a symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7323",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7323",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecMemcpyNodeSetParamsFromSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gae4d2ca401e05487ff9e9a094abccf792",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphExecMemcpyNodeSetParamsFromSymbol"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memcpy node in the given graphExec to copy from a symbol on the. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												"device."
											]
										}
									]
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address to the destination. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7341",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7341",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemcpyNodeToSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gadc76882339279fa8c70f9666d2088435",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemcpyNodeToSymbol"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphAddMemcpyNodeToSymbol"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memcpy node to copy to a symbol on the device and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memcpy execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address of the src. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7361",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7361",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemcpyNodeSetParamsToSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga1993d843a450078b3a91f82ff4e0ac02",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemcpyNodeSetParamsToSymbol"
			],
			"argsstring": [
				"(hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphMemcpyNodeSetParamsToSymbol"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memcpy node's parameters to copy to a symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address of the src. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7380",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7380",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecMemcpyNodeSetParamsToSymbol": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga698fb0f0bd392e4f383ee62e9a61d1e0",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecMemcpyNodeSetParamsToSymbol"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipGraphExecMemcpyNodeSetParamsToSymbol"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memcpy node in the given graphExec to copy to a symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device symbol address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory address of the src. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the size of the memory to copy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Offset from start of symbol in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the type of memory copy. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7399",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7399",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemsetNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf195e543467f8b1d313dfb997cb38c58",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemsetNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemsetParams *pMemsetParams)"
			],
			"name": [
				"hipGraphAddMemsetNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemsetParams",
									"$": {
										"refid": "structhip_memset_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pMemsetParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memset node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pMemsetParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters for the memory set. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7415",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7415",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemsetNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga9d41c500748b2b774aecb54d7ede5bbd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemsetNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipMemsetParams *pNodeParams)"
			],
			"name": [
				"hipGraphMemsetNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemsetParams",
									"$": {
										"refid": "structhip_memset_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a memset node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to get parameters from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7428",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7428",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemsetNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gad5ab6dd1f9d88c3bc662c271c8aff1a3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemsetNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, const hipMemsetParams *pNodeParams)"
			],
			"name": [
				"hipGraphMemsetNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemsetParams",
									"$": {
										"refid": "structhip_memset_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memset node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7439",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7439",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecMemsetNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaaea31b879fa5eed6a2e12e156020f467",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecMemsetNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemsetParams *pNodeParams)"
			],
			"name": [
				"hipGraphExecMemsetNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemsetParams",
									"$": {
										"refid": "structhip_memset_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memset node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7451",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7451",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddHostNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaeb6a31dddbc88f6c565edf541de788fa",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddHostNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipHostNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphAddHostNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipHostNodeParams",
									"$": {
										"refid": "structhip_host_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a host execution node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"-pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7466",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7466",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphHostNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5ee553eb113a3cf55afc9f279b231989",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphHostNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipHostNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphHostNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipHostNodeParams",
									"$": {
										"refid": "structhip_host_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a host node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to get parameters from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7479",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7479",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphHostNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8e51945beaf0b3b27c3b79a0decd3b80",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphHostNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, const hipHostNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphHostNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipHostNodeParams",
									"$": {
										"refid": "structhip_host_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a host node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7490",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7490",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecHostNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga4a6f01ac80a51ba37ff0beac10588e61",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecHostNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipHostNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphExecHostNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipHostNodeParams",
									"$": {
										"refid": "structhip_host_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a host node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7502",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7502",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddChildGraphNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga215a83cccf00cc4b6a6e43415b68bf4a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddChildGraphNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraph_t childGraph)"
			],
			"name": [
				"hipGraphAddChildGraphNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"childGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a child graph node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "childGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the graph to clone into this node "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7517",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7517",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphChildGraphNodeGetGraph": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaa3a045ef7065eb0dbaaf0c65cdec8565",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphChildGraphNodeGetGraph"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipGraph_t *pGraph)"
			],
			"name": [
				"hipGraphChildGraphNodeGetGraph"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a handle to the embedded graph of a child graph node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to get child graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraph",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to get the graph. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7530",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7530",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecChildGraphNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga532a7a3b938fc5eed6a5d63d409e60a2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecChildGraphNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t node, hipGraph_t childGraph)"
			],
			"name": [
				"hipGraphExecChildGraphNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"childGraph"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates node parameters in the child graph node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- node from the graph which was used to instantiate graphExec. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "childGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- child graph with updated parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7542",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7542",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddEmptyNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gadb06da0ec43f0dd73672d9dcd351df61",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddEmptyNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)"
			],
			"name": [
				"hipGraphAddEmptyNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an empty node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create and add to the graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the graph the node is add to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the node dependenties. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of dependencies. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7556",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7556",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddEventRecordNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga74dca46f970bafa279ec9af41ceca7a9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddEventRecordNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)"
			],
			"name": [
				"hipGraphAddEventRecordNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an event record node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create and add to the graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the graph the node to be added. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the node dependenties. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Event for the node. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7572",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7572",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphEventRecordNodeGetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gad5cf984b5b764ca5d715a6673cc5d6cb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphEventRecordNodeGetEvent"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipEvent_t *event_out)"
			],
			"name": [
				"hipGraphEventRecordNodeGetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the event associated with an event record node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to get event from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to return the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7585",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7585",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphEventRecordNodeSetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gac91ec8eb7a374eb1f7cec45e172efe8c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphEventRecordNodeSetEvent"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipEvent_t event)"
			],
			"name": [
				"hipGraphEventRecordNodeSetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets an event record node's event. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to set event to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7596",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7596",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecEventRecordNodeSetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga9778c1957d72d7ed372a8c2820536066",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecEventRecordNodeSetEvent"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)"
			],
			"name": [
				"hipGraphExecEventRecordNodeSetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the event for an event record node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- node from the graph which was used to instantiate graphExec. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7608",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7608",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddEventWaitNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga1756a144a9ca0b596f81773befdcbc67",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddEventWaitNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)"
			],
			"name": [
				"hipGraphAddEventWaitNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an event wait node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create and add to the graph. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the graph the node to be added. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the node dependenties. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Event for the node. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7623",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7623",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphEventWaitNodeGetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaccfa3e841e4af4a1897b52f47d75a43d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphEventWaitNodeGetEvent"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipEvent_t *event_out)"
			],
			"name": [
				"hipGraphEventWaitNodeGetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the event associated with an event wait node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to get event from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to return the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7637",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7637",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphEventWaitNodeSetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gac802549bd73126ed736833af7a8c6863",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphEventWaitNodeSetEvent"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipEvent_t event)"
			],
			"name": [
				"hipGraphEventWaitNodeSetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets an event wait node's event. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instane of the node to set event to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7648",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7648",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecEventWaitNodeSetEvent": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gab7649d14c214d61f24e143c1599be9f0",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecEventWaitNodeSetEvent"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)"
			],
			"name": [
				"hipGraphExecEventWaitNodeSetEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the event for an event record node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- node from the graph which was used to instantiate graphExec. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the event. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7660",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7660",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemAllocNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gae9ea0d05ebde492309f77ba0a23b81a9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemAllocNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipMemAllocNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphAddMemAllocNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemAllocNodeParams",
									"$": {
										"refid": "structhip_mem_alloc_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memory allocation node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the graph node to create and add to the graph "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Instane of the graph the node to be added "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Const pointer to the node dependenties "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The number of dependencies "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node parameters for memory allocation "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7675",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7675",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemAllocNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8fbf788fab0247056ab27ce6eccfb20e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemAllocNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, hipMemAllocNodeParams *pNodeParams)"
			],
			"name": [
				"hipGraphMemAllocNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemAllocNodeParams",
									"$": {
										"refid": "structhip_mem_alloc_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pNodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns parameters for memory allocation node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Memory allocation node for a query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Parameters for the specified memory allocation node "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7687",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7687",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddMemFreeNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga70f6f4924c404883cbc0d7cb6ac38100",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddMemFreeNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dev_ptr)"
			],
			"name": [
				"hipGraphAddMemFreeNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dev_ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memory free node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the graph node to create and add to the graph "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Instane of the graph the node to be added "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Const pointer to the node dependenties "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The number of dependencies "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the memory to be freed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7701",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7701",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphMemFreeNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga0173b789bbf238185d90733fe36d9a07",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphMemFreeNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t node, void *dev_ptr)"
			],
			"name": [
				"hipGraphMemFreeNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"node"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dev_ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns parameters for memory free node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "node",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Memory free node for a query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Device pointer for the specified memory free node "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7713",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7713",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetGraphMemAttribute": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5eb353becf0e5a38a376dd7aa13677c0",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetGraphMemAttribute"
			],
			"argsstring": [
				"(int device, hipGraphMemAttributeType attr, void *value)"
			],
			"name": [
				"hipDeviceGetGraphMemAttribute"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphMemAttributeType",
									"$": {
										"refid": "group___global_defs_1ga920ab2073b2ff77f37ae672d376ffe7e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the mem attribute for graphs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- device the attr is get for. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- attr to get. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- value for specific attr. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7725",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7725",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceSetGraphMemAttribute": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga0921c547b41f9124bb4aec6d5f7dab46",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceSetGraphMemAttribute"
			],
			"argsstring": [
				"(int device, hipGraphMemAttributeType attr, void *value)"
			],
			"name": [
				"hipDeviceSetGraphMemAttribute"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphMemAttributeType",
									"$": {
										"refid": "group___global_defs_1ga920ab2073b2ff77f37ae672d376ffe7e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set the mem attribute for graphs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- device the attr is set for. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- attr to set. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- value for specific attr. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7737",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7737",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGraphMemTrim": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf637d203d43c5df6d44a1c509bd43f4d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGraphMemTrim"
			],
			"argsstring": [
				"(int device)"
			],
			"name": [
				"hipDeviceGraphMemTrim"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Free unused memory on specific device used for graph back to OS. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- device the memory is used for graphs "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7748",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7748",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipUserObjectCreate": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga0c464e200034254c80cdfb9277a55cb5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipUserObjectCreate"
			],
			"argsstring": [
				"(hipUserObject_t *object_out, void *ptr, hipHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)"
			],
			"name": [
				"hipUserObjectCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipUserObject_t",
									"$": {
										"refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"object_out"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipHostFn_t",
									"$": {
										"refid": "group___global_defs_1ga6b1ea90b2fea2d4c62eb351e1ed44f93",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"destroy"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"initialRefcount"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an instance of userObject to manage lifetime of a resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "object_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instace of userobj. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to pass to destroy function. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "destroy",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- destroy callback to remove resource. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "initialRefcount",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reference to resource. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- flags passed to API. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7762",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7762",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipUserObjectRelease": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga6b15f4e7a77f9dbda0d4e3a3febedff5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipUserObjectRelease"
			],
			"argsstring": [
				"(hipUserObject_t object, unsigned int count)"
			],
			"name": [
				"hipUserObjectRelease"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipUserObject_t",
									"$": {
										"refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"object"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Release number of references to resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "object",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instace of userobj. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reference to resource to be retained. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7774",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7774",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipUserObjectRetain": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga87b191d080e9b6c9d1ec1bc7990e405d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipUserObjectRetain"
			],
			"argsstring": [
				"(hipUserObject_t object, unsigned int count)"
			],
			"name": [
				"hipUserObjectRetain"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipUserObject_t",
									"$": {
										"refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"object"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Retain number of references to resource. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "object",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instace of userobj. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reference to resource to be retained. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7785",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7785",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphRetainUserObject": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gae158b791c4bb11d2389fc8876aea4a8f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphRetainUserObject"
			],
			"argsstring": [
				"(hipGraph_t graph, hipUserObject_t object, unsigned int count, unsigned int flags)"
			],
			"name": [
				"hipGraphRetainUserObject"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipUserObject_t",
									"$": {
										"refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"object"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Retain user object for graphs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph to retain the user object for. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "object",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instace of userobj. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reference to resource to be retained. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- flags passed to API. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7798",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7798",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphReleaseUserObject": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga3287f181e8e0999c6774ac37ba04ee8f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphReleaseUserObject"
			],
			"argsstring": [
				"(hipGraph_t graph, hipUserObject_t object, unsigned int count)"
			],
			"name": [
				"hipGraphReleaseUserObject"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipUserObject_t",
									"$": {
										"refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"object"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Release user object from graphs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph to retain the user object for. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "object",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to instace of userobj. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reference to resource to be retained. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7811",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7811",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphDebugDotPrint": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaad520a916f418e08e0ca9078a21e244f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphDebugDotPrint"
			],
			"argsstring": [
				"(hipGraph_t graph, const char *path, unsigned int flags)"
			],
			"name": [
				"hipGraphDebugDotPrint"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"path"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Write a DOT file describing graph structure. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- graph object for which DOT file has to be generated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "path",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- path to write the DOT file. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Flags from hipGraphDebugDotFlags to get additional node information. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOperatingSystem",
													"$": {
														"refid": "hip__runtime__api_8h_1a57b7f198b5706b2bc57e39029803bd3a",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7824",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7824",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphKernelNodeCopyAttributes": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga6fd9af1ec50bc34c6500fe276d05946f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphKernelNodeCopyAttributes"
			],
			"argsstring": [
				"(hipGraphNode_t hSrc, hipGraphNode_t hDst)"
			],
			"name": [
				"hipGraphKernelNodeCopyAttributes"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hSrc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hDst"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies attributes from source node to destination node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Copies attributes from source node to destination node. Both node must have the same context.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hDst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Destination node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hSrc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "- Source node. For list of attributes see .",
															"ref": [
																{
																	"_": "hipKernelNodeAttrID",
																	"$": {
																		"refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
																		"kindref": "member"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7840",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7840",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeSetEnabled": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8902200d9fed1df7644fc7a51c4d327b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeSetEnabled"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int isEnabled)"
			],
			"name": [
				"hipGraphNodeSetEnabled"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"isEnabled"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enables or disables the specified node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Sets hNode to be either enabled or disabled. Disabled nodes are functionally equivalent to empty nodes until they are reenabled. Existing node parameters are not affected by disabling/enabling the node.",
						"The node is identified by the corresponding hNode in the non-executable graph, from which the executable graph was instantiated.",
						"hNode must not have been removed from the original graph.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"Currently only kernel, memset and memcpy nodes are supported."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The executable graph in which to set the specified node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "isEnabled",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node is enabled if != 0, otherwise the node is disabled."
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7864",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7864",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphNodeGetEnabled": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga207d60e261a723f81dd573423602239c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphNodeGetEnabled"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int *isEnabled)"
			],
			"name": [
				"hipGraphNodeGetEnabled"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"isEnabled"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query whether a node in the given graphExec is enabled. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Sets isEnabled to 1 if hNode is enabled, or 0 if it is disabled.",
						"The node is identified by the corresponding node in the non-executable graph, from which the executable graph was instantiated.",
						"hNode must not have been removed from the original graph.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"Currently only kernel, memset and memcpy nodes are supported."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The executable graph in which to set the specified node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "isEnabled",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Location to return the enabled status of the node."
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7886",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7886",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddExternalSemaphoresWaitNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gac086da9e2ee7561a7b47ce4f7276faf2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddExternalSemaphoresWaitNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphAddExternalSemaphoresWaitNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreWaitNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_wait_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a external semaphor wait node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"-pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7901",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7901",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphAddExternalSemaphoresSignalNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga49886f3a676840be5b5eea99af87d4bf",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphAddExternalSemaphoresSignalNode"
			],
			"argsstring": [
				"(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphAddExternalSemaphoresSignalNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"graph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pDependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreSignalNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_signal_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a external semaphor signal node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "graph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the graph to add the created node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- the number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"-pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7917",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7917",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExternalSemaphoresSignalNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga25d077916d21a34bf5bfb7f7cc13eaf8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExternalSemaphoresSignalNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphExternalSemaphoresSignalNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreSignalNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_signal_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates node parameters in the external semaphore signal node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the params to be set. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7929",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7929",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExternalSemaphoresWaitNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga993155e50b96e92f383bdcf62aa2d099",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExternalSemaphoresWaitNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphExternalSemaphoresWaitNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreWaitNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_wait_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates node parameters in the external semaphore wait node. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the params to be set. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7940",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7940",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExternalSemaphoresSignalNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga5fce7651a7e9333ea23687f346d70c7f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExternalSemaphoresSignalNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, hipExternalSemaphoreSignalNodeParams *params_out)"
			],
			"name": [
				"hipGraphExternalSemaphoresSignalNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipExternalSemaphoreSignalNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_signal_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"params_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns external semaphore signal node params. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "params_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to params. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7951",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7951",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExternalSemaphoresWaitNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gaf6e73d6a19ca850f395febf4adb46ce7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExternalSemaphoresWaitNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, hipExternalSemaphoreWaitNodeParams *params_out)"
			],
			"name": [
				"hipGraphExternalSemaphoresWaitNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipExternalSemaphoreWaitNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_wait_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"params_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns external semaphore wait node params. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "params_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to params. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7962",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7962",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecExternalSemaphoresSignalNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga69757fcf41c1939bb698f3e31913803b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphExecExternalSemaphoresSignalNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreSignalNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_signal_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates node parameters in the external semaphore signal node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The executable graph in which to set the specified node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the params to be set. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7974",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7974",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGraphExecExternalSemaphoresWaitNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga4a2826775ca03a0302005e81587a634f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
			],
			"name": [
				"hipGraphExecExternalSemaphoresWaitNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipExternalSemaphoreWaitNodeParams",
									"$": {
										"refid": "structhip_external_semaphore_wait_node_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Updates node parameters in the external semaphore wait node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The executable graph in which to set the specified node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Node from the graph from which graphExec was instantiated. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the params to be set. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7986",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7986",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphMemcpyNodeGetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga08610f43c866c43ec03a62075f9f05b4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphMemcpyNodeGetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, HIP_MEMCPY3D *nodeParams)"
			],
			"name": [
				"hipDrvGraphMemcpyNodeGetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a memcpy node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to get parameters from. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "7998",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "7998",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphMemcpyNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga71199fde02ca746f24c73ed224a5cefb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphMemcpyNodeSetParams"
			],
			"argsstring": [
				"(hipGraphNode_t hNode, const HIP_MEMCPY3D *nodeParams)"
			],
			"name": [
				"hipDrvGraphMemcpyNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"nodeParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets a memcpy node's parameters. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to Set parameters for. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "nodeParams",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8009",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8009",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphAddMemsetNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1gafaf5229693eeebed100a0cc374fe77df",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphAddMemsetNode"
			],
			"argsstring": [
				"(hipGraphNode_t *phGraphNode, hipGraph_t hGraph, const hipGraphNode_t *dependencies, size_t numDependencies, const HIP_MEMSET_NODE_PARAMS *memsetParams, hipCtx_t ctx)"
			],
			"name": [
				"hipDrvGraphAddMemsetNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"phGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMSET_NODE_PARAMS",
									"$": {
										"refid": "struct_h_i_p___m_e_m_s_e_t___n_o_d_e___p_a_r_a_m_s",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"memsetParams"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memset node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "phGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to graph node to create. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of graph to add the created node to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the dependencies on the memset execution node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- number of the dependencies. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "memsetParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the parameters for the memory set. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- cotext related to current device. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8024",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8024",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphAddMemFreeNode": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga55f78947cfc9b1844672f11d197ddeed",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphAddMemFreeNode"
			],
			"argsstring": [
				"(hipGraphNode_t *phGraphNode, hipGraph_t hGraph, const hipGraphNode_t *dependencies, size_t numDependencies, hipDeviceptr_t dptr)"
			],
			"name": [
				"hipDrvGraphAddMemFreeNode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"phGraphNode"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraph_t",
									"$": {
										"refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraph"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dependencies"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"numDependencies"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memory free node and adds it to a graph. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "phGraphNode",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the graph node to create and add to the graph "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraph",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Instane of the graph the node to be added "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Const pointer to the node dependenties "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDependencies",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The number of dependencies "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to the memory to be freed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8040",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8040",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphExecMemcpyNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga8173e6bad29de6ac5eab05463dda127c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphExecMemcpyNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const HIP_MEMCPY3D *copyParams, hipCtx_t ctx)"
			],
			"name": [
				"hipDrvGraphExecMemcpyNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"copyParams"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memcpy node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "copyParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- const pointer to the memcpy node params. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- cotext related to current device. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8055",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8055",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvGraphExecMemsetNodeSetParams": {
			"$": {
				"kind": "function",
				"id": "group___graph_1ga55e13a2aa4c69a6d38670f8705b3ca38",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvGraphExecMemsetNodeSetParams"
			],
			"argsstring": [
				"(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const HIP_MEMSET_NODE_PARAMS *memsetParams, hipCtx_t ctx)"
			],
			"name": [
				"hipDrvGraphExecMemsetNodeSetParams"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphExec_t",
									"$": {
										"refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hGraphExec"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipGraphNode_t",
									"$": {
										"refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hNode"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMSET_NODE_PARAMS",
									"$": {
										"refid": "struct_h_i_p___m_e_m_s_e_t___n_o_d_e___p_a_r_a_m_s",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"memsetParams"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipCtx_t",
									"$": {
										"refid": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ctx"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters for a memset node in the given graphExec. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hGraphExec",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the executable graph with the node. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hNode",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- instance of the node to set parameters to. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "memsetParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to the parameters. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ctx",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- cotext related to current device. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8069",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8069",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipPointerSetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad35dd7d821d5a4d32693e3eada647177",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipPointerSetAttribute"
			],
			"argsstring": [
				"(const void *value, hipPointer_attribute attribute, hipDeviceptr_t ptr)"
			],
			"name": [
				"hipPointerSetAttribute"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipPointer_attribute",
									"$": {
										"refid": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attribute"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets information on the specified pointer.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Sets pointer attribute value "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attribute",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Attribute to set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to set attributes for"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2879",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2879",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipPointerGetAttributes": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga7c3e8663feebb7be9fd3a1e5139bcefc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipPointerGetAttributes"
			],
			"argsstring": [
				"(hipPointerAttribute_t *attributes, const void *ptr)"
			],
			"name": [
				"hipPointerGetAttributes"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipPointerAttribute_t",
									"$": {
										"refid": "structhip_pointer_attribute__t",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"attributes"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns attributes for the specified pointer. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nThe output parameter 'attributes' has a member named 'type' that describes what memory the pointer is associated with, such as device memory, host memory, managed memory, and others. Otherwise, the API cannot handle the pointer and returns .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attributes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"attributes for the specified pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to get attributes for"
													]
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipErrorInvalidValue",
									"$": {
										"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "The unrecognized memory type is unsupported to keep the HIP functionality backward compatibility due to  enum values.",
											"ref": [
												{
													"_": "hipMemoryType",
													"$": {
														"refid": "group___global_defs_1gaea86e91d3cd65992d787b39b218435a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"The current behavior of this HIP API corresponds to the CUDA API before version 11.0."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipPointerGetAttribute",
													"$": {
														"refid": "group___memory_1gaf147601f5094423a9810db112ef8ef07",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2902",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2902",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipPointerGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaf147601f5094423a9810db112ef8ef07",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipPointerGetAttribute"
			],
			"argsstring": [
				"(void *data, hipPointer_attribute attribute, hipDeviceptr_t ptr)"
			],
			"name": [
				"hipPointerGetAttribute"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"data"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipPointer_attribute",
									"$": {
										"refid": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attribute"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns information about the specified pointer.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned pointer attribute value "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attribute",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Attribute to query for "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to get attributes for"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipPointerGetAttributes",
													"$": {
														"refid": "group___memory_1ga7c3e8663feebb7be9fd3a1e5139bcefc",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2917",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2917",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvPointerGetAttributes": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad0d11c0ccac6e262c147e5b47642cf1d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvPointerGetAttributes"
			],
			"argsstring": [
				"(unsigned int numAttributes, hipPointer_attribute *attributes, void **data, hipDeviceptr_t ptr)"
			],
			"name": [
				"hipDrvPointerGetAttributes"
			],
			"param": [
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numAttributes"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipPointer_attribute",
									"$": {
										"refid": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attributes"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"data"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns information about the specified pointer.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numAttributes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"number of attributes to query for "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attributes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"attributes to query for "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"a two-dimensional containing pointers to memory locations where the result of each attribute query will be written to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to get attributes for"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipPointerGetAttribute",
													"$": {
														"refid": "group___memory_1gaf147601f5094423a9810db112ef8ef07",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2935",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2935",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMalloc": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMalloc"
			],
			"argsstring": [
				"(void **ptr, size_t size)"
			],
			"name": [
				"hipMalloc"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate memory on the default accelerator. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  (bad context, null *ptr)",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3065",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3065",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtMallocWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3529b96082582c65b645085491e91309",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtMallocWithFlags"
			],
			"argsstring": [
				"(void **ptr, size_t sizeBytes, unsigned int flags)"
			],
			"name": [
				"hipExtMallocWithFlags"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate memory on the default accelerator. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nIf requested memory size is 0, no memory is allocated, *ptr returns nullptr, and  is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of memory allocation"
													]
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "The memory allocation flag should be either , , , or . If the flag is any other value, the API returns .",
							"ref": [
								{
									"_": "hipDeviceMallocDefault",
									"$": {
										"refid": "group___global_defs_1gaa4247e48df3515377a4190d9d5eef26f",
										"kindref": "member"
									}
								},
								{
									"_": "hipDeviceMallocFinegrained",
									"$": {
										"refid": "group___global_defs_1gabf06f7f184187487343b027b04c13173",
										"kindref": "member"
									}
								},
								{
									"_": "hipDeviceMallocUncached",
									"$": {
										"refid": "group___global_defs_1ga7e54931e846bc5815b2ffdc4c26bc841",
										"kindref": "member"
									}
								},
								{
									"_": "hipMallocSignalMemory",
									"$": {
										"refid": "group___global_defs_1ga9c7b267b119306ca08402b6df91d101b",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorInvalidValue",
									"$": {
										"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  (bad context, null *ptr)",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3085",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3085",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocHost": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga66399e729223ff5b66ffc16297c0710e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocHost"
			],
			"argsstring": [
				"(void **ptr, size_t size)"
			],
			"name": [
				"hipMallocHost"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate pinned host memory [Deprecated]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated host pinned memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										{
											"_": "This API is deprecated, use  instead ",
											"ref": [
												{
													"_": "hipHostMalloc()",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3099",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3099",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemAllocHost": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemAllocHost"
			],
			"argsstring": [
				"(void **ptr, size_t size)"
			],
			"name": [
				"hipMemAllocHost"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate pinned host memory [Deprecated]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated host pinned memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										{
											"_": "This API is deprecated, use  instead ",
											"ref": [
												{
													"_": "hipHostMalloc()",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3113",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3113",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostMalloc": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostMalloc"
			],
			"argsstring": [
				"(void **ptr, size_t size, unsigned int flags)"
			],
			"name": [
				"hipHostMalloc"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocates device accessible page locked (pinned) host memory. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"This API allocates pinned host memory which is mapped into the address space of all GPUs in the system, the memory can be accessed directly by the GPU device, and can be read or written with much higher bandwidth than pageable memory obtained with functions such as malloc().",
						"Using the pinned host memory, applications can implement faster data transfers for HostToDevice and DeviceToHost. The runtime tracks the hipHostMalloc allocations and can avoid some of the setup required for regular unpinned memory.",
						"When the memory accesses are infrequent, zero-copy memory can be a good choice, for coherent allocation. GPU can directly access the host memory over the CPU/GPU interconnect, without need to copy the data.",
						"Currently the allocation granularity is 4KB for the API.",
						"Developers need to choose proper allocation flag with consideration of synchronization.",
						{
							"_": "\nIf no input for flags, it will be the default pinned memory allocation on the host.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated host pinned memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size in bytes If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of host memory allocation"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSetDeviceFlags",
													"$": {
														"refid": "group___device_1ga6e54db382768827e84725632018307aa",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3145",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3145",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostAlloc": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga0e35f3397f6ea9c3f47a17461ae01231",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostAlloc"
			],
			"argsstring": [
				"(void **ptr, size_t size, unsigned int flags)"
			],
			"name": [
				"hipHostAlloc"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate device accessible page locked host memory [Deprecated]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated host pinned memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested memory size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of host memory allocation"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										{
											"_": "This API is deprecated, use  instead ",
											"ref": [
												{
													"_": "hipHostMalloc()",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3724",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3724",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostGetDevicePointer": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostGetDevicePointer"
			],
			"argsstring": [
				"(void **devPtr, void *hstPtr, unsigned int flags)"
			],
			"name": [
				"hipHostGetDevicePointer"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"hstPtr"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get Device pointer from Host Pointer allocated through hipHostMalloc. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device Pointer mapped to passed host pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hstPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Host Pointer allocated through hipHostMalloc "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags to be passed for extension"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSetDeviceFlags",
													"$": {
														"refid": "group___device_1ga6e54db382768827e84725632018307aa",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3736",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3736",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostGetFlags": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga4d26915873b3e3534ceb4dc310f8709a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostGetFlags"
			],
			"argsstring": [
				"(unsigned int *flagsPtr, void *hostPtr)"
			],
			"name": [
				"hipHostGetFlags"
			],
			"param": [
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flagsPtr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"hostPtr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return flags associated with host pointer. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flagsPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory location to store flags "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hostPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Host Pointer allocated through hipHostMalloc "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3746",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3746",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostRegister": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostRegister"
			],
			"argsstring": [
				"(void *hostPtr, size_t sizeBytes, unsigned int flags)"
			],
			"name": [
				"hipHostRegister"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"hostPtr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Register host memory so it can be accessed from the current device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nFlags:\n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hostPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to host memory to be registered. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the host memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"See below."
													]
												}
											]
										}
									]
								}
							],
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												{
													"_": " Memory is Mapped and Portable",
													"ref": [
														{
															"_": "hipHostRegisterDefault",
															"$": {
																"refid": "group___global_defs_1gac7c100d241ff84ad10109bb00b7b25dc",
																"kindref": "member"
															}
														}
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " Memory is considered registered by all contexts. HIP only supports one context so this is always assumed true.",
													"ref": [
														{
															"_": "hipHostRegisterPortable",
															"$": {
																"refid": "group___global_defs_1ga2db444f2315d412d3c7ba80ec6049583",
																"kindref": "member"
															}
														}
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " Map the allocation into the address space for the current device. The device pointer can be obtained with .",
													"ref": [
														{
															"_": "hipHostRegisterMapped",
															"$": {
																"refid": "group___global_defs_1gacfa4edcfcb39fc61bff6bdecb14d7618",
																"kindref": "member"
															}
														},
														{
															"_": "hipHostGetDevicePointer",
															"$": {
																"refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
																"kindref": "member"
															}
														}
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"_": "After registering the memory, use  to obtain the mapped device pointer. On many systems, the mapped device pointer will have a different value than the mapped host pointer. Applications must use the device pointer in device code, and the host pointer in device code.",
							"ref": [
								{
									"_": "hipHostGetDevicePointer",
									"$": {
										"refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
										"kindref": "member"
									}
								}
							]
						},
						"On some systems, registered memory is pinned. On some systems, registered memory may not be actually be pinned but uses OS or hardware facilities to all GPU access to the host memory.",
						"Developers are strongly encouraged to register memory blocks which are aligned to the host cache-line size. (typically 64-bytes but can be obtains from the CPUID instruction).",
						"If registering non-aligned pointers, the application must take care when register pointers from the same cache line on different devices. HIP's coarse-grained synchronization model does not guarantee correct results if different devices write to different parts of the same cache block - typically one of the writes will \"win\" and overwrite data from the other registered memory region.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipHostUnregister",
													"$": {
														"refid": "group___memory_1ga4c9e1810b9f5858d36c4d28c91c86924",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostGetFlags",
													"$": {
														"refid": "group___memory_1ga4d26915873b3e3534ceb4dc310f8709a",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostGetDevicePointer",
													"$": {
														"refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3783",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3783",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostUnregister": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga4c9e1810b9f5858d36c4d28c91c86924",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostUnregister"
			],
			"argsstring": [
				"(void *hostPtr)"
			],
			"name": [
				"hipHostUnregister"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"hostPtr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Un-register host pointer. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hostPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "Host pointer previously registered with  ",
															"ref": [
																{
																	"_": "hipHostRegister",
																	"$": {
																		"refid": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
																		"kindref": "member"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"Error code"
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipHostRegister",
													"$": {
														"refid": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3792",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3792",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocPitch": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga805c7320498926e444616fe090c727ee",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocPitch"
			],
			"argsstring": [
				"(void **ptr, size_t *pitch, size_t width, size_t height)"
			],
			"name": [
				"hipMallocPitch"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Allocates at least width (in bytes) * height bytes of linear memory Padding may occur to ensure alighnment requirements are met for the given row The change in width size due to padding will be returned in *pitch. Currently the alignment is set to 128 bytes",
						{
							"_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitch",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch for allocation (in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested pitched allocation width (in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested pitched allocation height"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"Error code"
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3811",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3811",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemAllocPitch": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad44d400532df8e67a6db45027cd05405",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemAllocPitch"
			],
			"argsstring": [
				"(hipDeviceptr_t *dptr, size_t *pitch, size_t widthInBytes, size_t height, unsigned int elementSizeBytes)"
			],
			"name": [
				"hipMemAllocPitch"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"pitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"widthInBytes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"elementSizeBytes"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Allocates at least width (in bytes) * height bytes of linear memory Padding may occur to ensure alighnment requirements are met for the given row The change in width size due to padding will be returned in *pitch. Currently the alignment is set to 128 bytes",
						{
							"_": "\nIf size is 0, no memory is allocated,  pElement = (T*)((char*)BaseAddress + Row * Pitch) + Column;",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the allocated device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitch",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch for allocation (in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "widthInBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested pitched allocation width (in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested pitched allocation height "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "elementSizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The size of element bytes, should be 4, 8 or 16"
													]
												}
											]
										}
									]
								}
							],
							"emphasis": [
								"ptr returns nullptr, and hipSuccess is returned. The intended usage of pitch is as a separate parameter of the allocation, used to compute addresses within the 2D array. Given the row and column of an array element of type T, the address is computed as: T"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"Error code"
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3834",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3834",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFree": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFree"
			],
			"argsstring": [
				"(void *ptr)"
			],
			"name": [
				"hipFree"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Free memory allocated by the hcc hip memory allocation API. This API performs an implicit  call. If pointer is NULL, the hip runtime is initialized and hipSuccess is returned. ",
							"ref": [
								{
									"_": "hipDeviceSynchronize()",
									"$": {
										"refid": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to memory to be freed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": " (if pointer is invalid, including host pointers allocated with hipHostMalloc)",
											"ref": [
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3849",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3849",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFreeHost": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga28d7d92836116dfadeb62e416ee887d3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFreeHost"
			],
			"argsstring": [
				"(void *ptr)"
			],
			"name": [
				"hipFreeHost"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Free memory allocated by the hcc hip host memory allocation API [Deprecated]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to memory to be freed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  (if pointer is invalid, including device pointers allocated with hipMalloc)",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										{
											"_": "This API is deprecated, use  instead ",
											"ref": [
												{
													"_": "hipHostFree()",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3861",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3861",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipHostFree": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipHostFree"
			],
			"argsstring": [
				"(void *ptr)"
			],
			"name": [
				"hipHostFree"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Free memory allocated by the hcc hip host memory allocation API This API performs an implicit  call. If pointer is NULL, the hip runtime is initialized and hipSuccess is returned. ",
							"ref": [
								{
									"_": "hipDeviceSynchronize()",
									"$": {
										"refid": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to memory to be freed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  (if pointer is invalid, including device pointers allocated with hipMalloc)",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3D",
													"$": {
														"refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
														"kindref": "member"
													}
												},
												{
													"_": "hipMalloc3DArray",
													"$": {
														"refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3875",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3875",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy"
			],
			"argsstring": [
				"(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpy"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from src to dst. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"It supports memory from host to device, device to host, device to device and host to host The src and dst must not overlap.",
						"For hipMemcpy, the copy is always performed by the current device (set by hipSetDevice). For multi-gpu or peer-to-peer configurations, it is recommended to set the current device to the device where the src data is physically located. For optimal peer-to-peer copies, the copy device must be able to access the src and dst pointers (by calling hipDeviceEnablePeerAccess with copy agent as the current device and src/dest as the peerDevice argument. if this is not done, the hipMemcpy will still work, but will perform the copy using a staging buffer on the host. Calling hipMemcpy with dst and src pointers that do not match the hipMemcpyKind results in undefined behavior.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kind of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnknown",
													"$": {
														"refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3905",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3905",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyWithStream": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae9ba7e2beacec0bd9d606ec8d241da37",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyWithStream"
			],
			"argsstring": [
				"(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyWithStream"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Memory copy on the stream. It allows single or multiple devices to do memory copy on single or multiple streams. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kind of transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Valid stream "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnknown",
													"$": {
														"refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorContextIsDestroyed",
													"$": {
														"refid": "hip__runtime__api_8h_1a6351a54f4747c7ada9963ca60ec74cf4",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , hipLaunchKernelGGL ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												},
												{
													"_": "hipSetDevice",
													"$": {
														"refid": "group___device_1ga43c1e7f15925eeb762195ccb5e063eae",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3920",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3920",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyHtoD": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaa415ecdd2535e1eb618ed8a31a6f03af",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyHtoD"
			],
			"argsstring": [
				"(hipDeviceptr_t dst, void *src, size_t sizeBytes)"
			],
			"name": [
				"hipMemcpyHtoD"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Host to Device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3939",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3939",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyDtoH": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyDtoH"
			],
			"argsstring": [
				"(void *dst, hipDeviceptr_t src, size_t sizeBytes)"
			],
			"name": [
				"hipMemcpyDtoH"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Device to Host. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3957",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3957",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyDtoD": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyDtoD"
			],
			"argsstring": [
				"(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes)"
			],
			"name": [
				"hipMemcpyDtoD"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Device to Device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3975",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3975",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyHtoDAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyHtoDAsync"
			],
			"argsstring": [
				"(hipDeviceptr_t dst, void *src, size_t sizeBytes, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyHtoDAsync"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Host to Device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3994",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3994",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyDtoHAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyDtoHAsync"
			],
			"argsstring": [
				"(void *dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyDtoHAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Device to Host asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4013",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4013",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyDtoDAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyDtoDAsync"
			],
			"argsstring": [
				"(hipDeviceptr_t dst, hipDeviceptr_t src, size_t sizeBytes, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyDtoDAsync"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from Device to Device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4032",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4032",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleGetGlobal": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3e425a680285f495e776f096e9632c89",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleGetGlobal"
			],
			"argsstring": [
				"(hipDeviceptr_t *dptr, size_t *bytes, hipModule_t hmod, const char *name)"
			],
			"name": [
				"hipModuleGetGlobal"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"bytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hmod"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns a global pointer from a module. Returns in *dptr and *bytes the pointer and size of the global of name name located in module hmod. If no variable of that name exists, it returns hipErrorNotFound. Both parameters dptr and bytes are optional. If one of them is NULL, it is ignored and hipSuccess is returned. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns global device pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bytes",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns global size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hmod",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Module to retrieve global from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Name of global to retrieve"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotFound",
													"$": {
														"refid": "hip__runtime__api_8h_1a06c39dc608210baa87be26f49620197d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4049",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4049",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetSymbolAddress": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaecac468bcedcfb139058df2d83d38987",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetSymbolAddress"
			],
			"argsstring": [
				"(void **devPtr, const void *symbol)"
			],
			"name": [
				"hipGetSymbolAddress"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets device pointer associated with symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the device associated the symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the symbole of the device"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4061",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4061",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetSymbolSize": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae61bb9a71f0fe9b3eee29336d6b83d97",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetSymbolSize"
			],
			"argsstring": [
				"(size_t *size, const void *symbol)"
			],
			"name": [
				"hipGetSymbolSize"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the size of the given symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the device symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the size"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4074",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4074",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetProcAddress": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga7823a32f9f6f133612c6288a0932bbc2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetProcAddress"
			],
			"argsstring": [
				"(const char *symbol, void **pfn, int hipVersion, uint64_t flags, hipDriverProcAddressQueryResult *symbolStatus)"
			],
			"name": [
				"hipGetProcAddress"
			],
			"param": [
				{
					"type": [
						"const char *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"pfn"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"hipVersion"
					]
				},
				{
					"type": [
						"uint64_t"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDriverProcAddressQueryResult",
									"$": {
										"refid": "group___global_defs_1ga3e30b1faa389b4565cae7af03d5d3e76",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"symbolStatus"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the symbol's function address. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"symbol name in char* "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pfn",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"output pointer to symbol "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hipVersion",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"version of the function requested. Rocm 6.0.1 = 601 "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"currently there is no flags other than default "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbolStatus",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"optional enum returned to indicate what part failed "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4086",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4086",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyToSymbol": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gac0d988981c8535af1712f1f57436869b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyToSymbol"
			],
			"argsstring": [
				"(const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpyToSymbol"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Copies data to the given symbol on the device. Symbol HIP APIs allow a kernel to define a device-side data symbol which can be accessed on the host side. The symbol can be in __constant or device space. Note that the symbol name needs to be encased in the HIP_SYMBOL macro. This also applies to hipMemcpyFromSymbol, hipGetSymbolAddress, and hipGetSymbolSize. For detail usage, see the example at . ",
							"ulink": [
								{
									"_": "https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-5.0.x/docs/markdown/hip_porting_guide.md",
									"$": {
										"url": "https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-5.0.x/docs/markdown/hip_porting_guide.md"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the device symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the source address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"offset in bytes from start of symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"type of memory transfer"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4107",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4107",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyToSymbolAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaaceb6e89fb822d3a8e387b526b718478",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyToSymbolAsync"
			],
			"argsstring": [
				"(const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyToSymbolAsync"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data to the given symbol on the device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the device symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the source address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"offset in bytes from start of symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"type of memory transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream identifier"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4124",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4124",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyFromSymbol": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga5e06c171bb33ac109bf9e642bea57314",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyFromSymbol"
			],
			"argsstring": [
				"(void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpyFromSymbol"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data from the given symbol on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns pointer to destinition memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the symbole address on the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes from the start of symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of memory transfer"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4140",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4140",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyFromSymbolAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga50a9366e07b89172e140203a744a80c5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyFromSymbolAsync"
			],
			"argsstring": [
				"(void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyFromSymbolAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data from the given symbol on the device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns pointer to destinition memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the symbole address on the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"offset in bytes from the start of symbole "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"type of memory transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream identifier"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4157",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4157",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyAsync"
			],
			"argsstring": [
				"(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copy data from src to dst asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nFor multi-gpu or peer-to-peer configurations, it is recommended to use a stream which is a attached to the device where the src data is physically located. For optimal peer-to-peer copies, the copy device must be able to access the src and dst pointers (by calling hipDeviceEnablePeerAccess with copy agent as the current device and src/dest as the peerDevice argument. if this is not done, the hipMemcpy will still work, but will perform the copy using a staging buffer on the host.",
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"If host or dest are not pinned, the memory copy will be performed synchronously. For best performance, use hipHostMalloc to allocate host memory that is transferred asynchronously."
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"on HCC hipMemcpyAsync does not support overlapped H2D and D2H copies. For hipMemcpy, the copy is always performed by the device associated with the specified stream."
									]
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being copy from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of memory transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorUnknown",
													"$": {
														"refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , hipMemcpyArrayToArray, hipMemcpy2DArrayToArray, , , , hipMemcpyToArrayAsync, , hipMemcpyFromArrayAsync, , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DFromArray",
													"$": {
														"refid": "group___memory_1ga9c5763233c9803b8e964881487fc4e60",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromSymbol",
													"$": {
														"refid": "group___memory_1ga5e06c171bb33ac109bf9e642bea57314",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArrayAsync",
													"$": {
														"refid": "group___memory_1gab6953ee5f575d0324c19ffc51a72f8fb",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DFromArrayAsync",
													"$": {
														"refid": "group___memory_1ga946fe29e78ce1580cb95fa2210389263",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbolAsync",
													"$": {
														"refid": "group___memory_1gaaceb6e89fb822d3a8e387b526b718478",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromSymbolAsync",
													"$": {
														"refid": "group___memory_1ga50a9366e07b89172e140203a744a80c5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4190",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4190",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemset": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gac7441e74affcce4b8b69dba996c5ebc4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemset"
			],
			"argsstring": [
				"(void *dst, int value, size_t sizeBytes)"
			],
			"name": [
				"hipMemset"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4201",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4201",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD8": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad484d4b0a7e178d1d180498625b6122f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD8"
			],
			"argsstring": [
				"(hipDeviceptr_t dest, unsigned char value, size_t count)"
			],
			"name": [
				"hipMemsetD8"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dest"
					]
				},
				{
					"type": [
						"unsigned char"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dest",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data ptr to be filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4211",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4211",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD8Async": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga11b214a1af7b60f85694331802dd557c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD8Async"
			],
			"argsstring": [
				"(hipDeviceptr_t dest, unsigned char value, size_t count, hipStream_t stream)"
			],
			"name": [
				"hipMemsetD8Async"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dest"
					]
				},
				{
					"type": [
						"unsigned char"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": " is asynchronous with respect to the host, so the call may return before the memset is complete. The operation can optionally be associated to a stream by passing a non-zero stream argument. If stream is non-zero, the operation may overlap with operations in other streams.",
							"ref": [
								{
									"_": "hipMemsetD8Async()",
									"$": {
										"refid": "group___memory_1ga11b214a1af7b60f85694331802dd557c",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dest",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data ptr to be filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Constant value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4227",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4227",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD16": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3ee39cf8737f4a5d0e1e8c9eb870f02f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD16"
			],
			"argsstring": [
				"(hipDeviceptr_t dest, unsigned short value, size_t count)"
			],
			"name": [
				"hipMemsetD16"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dest"
					]
				},
				{
					"type": [
						"unsigned short"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant short value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dest",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data ptr to be filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Constant value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4237",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4237",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD16Async": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga76cf7b34d3d8dad2fb5c4959cfd1a988",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD16Async"
			],
			"argsstring": [
				"(hipDeviceptr_t dest, unsigned short value, size_t count, hipStream_t stream)"
			],
			"name": [
				"hipMemsetD16Async"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dest"
					]
				},
				{
					"type": [
						"unsigned short"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant short value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": " is asynchronous with respect to the host, so the call may return before the memset is complete. The operation can optionally be associated to a stream by passing a non-zero stream argument. If stream is non-zero, the operation may overlap with operations in other streams.",
							"ref": [
								{
									"_": "hipMemsetD16Async()",
									"$": {
										"refid": "group___memory_1ga76cf7b34d3d8dad2fb5c4959cfd1a988",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dest",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data ptr to be filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Constant value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4253",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4253",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD32": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga54b16e2fd8d6230c22193ae11b58486b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD32"
			],
			"argsstring": [
				"(hipDeviceptr_t dest, int value, size_t count)"
			],
			"name": [
				"hipMemsetD32"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dest"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the memory area pointed to by dest with the constant integer value for specified number of times. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dest",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data being filled "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Constant value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4263",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4263",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae7d90e14c387e49f10db597f12915c54",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetAsync"
			],
			"argsstring": [
				"(void *dst, int value, size_t sizeBytes, hipStream_t stream)"
			],
			"name": [
				"hipMemsetAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sizeBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the first sizeBytes bytes of the memory area pointed to by dev with the constant byte value value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": " is asynchronous with respect to the host, so the call may return before the memset is complete. The operation can optionally be associated to a stream by passing a non-zero stream argument. If stream is non-zero, the operation may overlap with operations in other streams.",
							"ref": [
								{
									"_": "hipMemsetAsync()",
									"$": {
										"refid": "group___memory_1gae7d90e14c387e49f10db597f12915c54",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to set for each byte of specified memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sizeBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size in bytes to set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4279",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4279",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemsetD32Async": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae0e29827e32436fc6f0431b865e32244",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemsetD32Async"
			],
			"argsstring": [
				"(hipDeviceptr_t dst, int value, size_t count, hipStream_t stream)"
			],
			"name": [
				"hipMemsetD32Async"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the memory area pointed to by dev with the constant integer value for specified number of times. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": " is asynchronous with respect to the host, so the call may return before the memset is complete. The operation can optionally be associated to a stream by passing a non-zero stream argument. If stream is non-zero, the operation may overlap with operations in other streams.",
							"ref": [
								{
									"_": "hipMemsetD32Async()",
									"$": {
										"refid": "group___memory_1gae0e29827e32436fc6f0431b865e32244",
										"kindref": "member"
									}
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to set for each byte of specified memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of values to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4295",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4295",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemset2D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gae1e7b4c740cc02611ea8122bec376201",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemset2D"
			],
			"argsstring": [
				"(void *dst, size_t pitch, int value, size_t width, size_t height)"
			],
			"name": [
				"hipMemset2D"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"pitch"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills the memory area pointed to by dst with the constant value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Constant value to be set "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														""
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														""
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4307",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4307",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemset2DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga2bac47006b553a69424431c0445f8e95",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemset2DAsync"
			],
			"argsstring": [
				"(void *dst, size_t pitch, int value, size_t width, size_t height, hipStream_t stream)"
			],
			"name": [
				"hipMemset2DAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"pitch"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills asynchronously the memory area pointed to by dst with the constant value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to 2D device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch size in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to be set for each byte of specified memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix set columns in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix set rows in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4319",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4319",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemset3D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3c04a21c9de9c55b3e47d8c87a0b0593",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemset3D"
			],
			"argsstring": [
				"(hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)"
			],
			"name": [
				"hipMemset3D"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipPitchedPtr",
									"$": {
										"refid": "structhip_pitched_ptr",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pitchedDevPtr"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills synchronously the memory area pointed to by pitchedDevPtr with the constant value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitchedDevPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to pitched device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to set for each byte of specified memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size parameters for width field in bytes in device memory "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4328",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4328",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemset3DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga5565cddc90c7ebd0f8b081d5440b3166",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemset3DAsync"
			],
			"argsstring": [
				"(hipPitchedPtr pitchedDevPtr, int value, hipExtent extent, hipStream_t stream)"
			],
			"name": [
				"hipMemset3DAsync"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipPitchedPtr",
									"$": {
										"refid": "structhip_pitched_ptr",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pitchedDevPtr"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Fills asynchronously the memory area pointed to by pitchedDevPtr with the constant value. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitchedDevPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to pitched device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value to set for each byte of specified memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size parameters for width field in bytes in device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream identifier "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4338",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4338",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemGetInfo": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemGetInfo"
			],
			"argsstring": [
				"(size_t *free, size_t *total)"
			],
			"name": [
				"hipMemGetInfo"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"free"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"total"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query memory info. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"On ROCM, this function gets the actual free memory left on the current device, so supports the cases while running multi-workload (such as multiple processes, multiple threads, and multiple GPUs).",
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"On Windows, the free memory only accounts for memory allocated by this process and may be optimistic."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "free",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns free memory on the current device in bytes "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "total",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns total allocatable memory on the current device in bytes"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4355",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4355",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPtrGetInfo": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaf7e9522b8fd7bae6cc1bf2e3238fd20f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPtrGetInfo"
			],
			"argsstring": [
				"(void *ptr, size_t *size)"
			],
			"name": [
				"hipMemPtrGetInfo"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get allocated memory size via memory pointer. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"This function gets the allocated shared virtual memory size from memory pointer.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to allocated memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the allocated memory size in bytes"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4368",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4368",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga8376a0644463118cd96432365bb470e3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocArray"
			],
			"argsstring": [
				"(hipArray_t *array, const hipChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)"
			],
			"name": [
				"hipMallocArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate an array on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to allocated array in device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested channel format "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested array allocation width "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested array allocation height "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested properties of allocated array "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4381",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4381",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArrayCreate": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArrayCreate"
			],
			"argsstring": [
				"(hipArray_t *pHandle, const HIP_ARRAY_DESCRIPTOR *pAllocateArray)"
			],
			"name": [
				"hipArrayCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pHandle"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_ARRAY_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pAllocateArray"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an array memory pointer on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pHandle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the array memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pAllocateArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested array desciptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4393",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4393",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArrayDestroy": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArrayDestroy"
			],
			"argsstring": [
				"(hipArray_t array)"
			],
			"name": [
				"hipArrayDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroy an array memory pointer on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the array memory"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4403",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4403",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArray3DCreate": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga9dc08dfcd1078227106d9a4a3fe77d25",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArray3DCreate"
			],
			"argsstring": [
				"(hipArray_t *array, const HIP_ARRAY3D_DESCRIPTOR *pAllocateArray)"
			],
			"name": [
				"hipArray3DCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_ARRAY3D_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y3_d___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pAllocateArray"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create a 3D array memory pointer on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the 3D array memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pAllocateArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested array desciptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4414",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4414",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMalloc3D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMalloc3D"
			],
			"argsstring": [
				"(hipPitchedPtr *pitchedDevPtr, hipExtent extent)"
			],
			"name": [
				"hipMalloc3D"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipPitchedPtr",
									"$": {
										"refid": "structhip_pitched_ptr",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pitchedDevPtr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create a 3D memory pointer on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitchedDevPtr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the 3D memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested extent"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4425",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4425",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFreeArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFreeArray"
			],
			"argsstring": [
				"(hipArray_t array)"
			],
			"name": [
				"hipFreeArray"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Frees an array on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to array to free "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocArray",
													"$": {
														"refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4434",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4434",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMalloc3DArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMalloc3DArray"
			],
			"argsstring": [
				"(hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)"
			],
			"name": [
				"hipMalloc3DArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						{
							"_": "const struct  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						{
							"_": "struct ",
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate an array on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to allocated array in device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested channel format "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested array allocation width, height and depth "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Requested properties of allocated array "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMalloc",
													"$": {
														"refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocPitch",
													"$": {
														"refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeArray",
													"$": {
														"refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostMalloc",
													"$": {
														"refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
														"kindref": "member"
													}
												},
												{
													"_": "hipHostFree",
													"$": {
														"refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4446",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4446",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArrayGetInfo": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga9f67e594f3d410393b312ade84044597",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArrayGetInfo"
			],
			"argsstring": [
				"(hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)"
			],
			"name": [
				"hipArrayGetInfo"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				},
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets info about the specified array. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned array type "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned array shape. 2D arrays will have depth of zero "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned array flags "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The HIP array to get info for"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipArray3DGetDescriptor",
													"$": {
														"refid": "group___memory_1ga68d59254ab8994d3f61063bb57bf5498",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4460",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4460",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArrayGetDescriptor": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArrayGetDescriptor"
			],
			"argsstring": [
				"(HIP_ARRAY_DESCRIPTOR *pArrayDescriptor, hipArray_t array)"
			],
			"name": [
				"hipArrayGetDescriptor"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_ARRAY_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pArrayDescriptor"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a 1D or 2D array descriptor. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pArrayDescriptor",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned array descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Array to get descriptor of"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, , , hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer, , , ,  ",
											"ref": [
												{
													"_": "hipArray3DCreate",
													"$": {
														"refid": "group___memory_1ga9dc08dfcd1078227106d9a4a3fe77d25",
														"kindref": "member"
													}
												},
												{
													"_": "hipArray3DGetDescriptor",
													"$": {
														"refid": "group___memory_1ga68d59254ab8994d3f61063bb57bf5498",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy3D",
													"$": {
														"refid": "group___memory_1ga38facb98eb1ae8206376c3c48bf5c444",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy3DAsync",
													"$": {
														"refid": "group___memory_1ga9c638fd577a3a0b80daffeede136063a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoD",
													"$": {
														"refid": "group___memory_1gaa415ecdd2535e1eb618ed8a31a6f03af",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD8",
													"$": {
														"refid": "group___memory_1gad484d4b0a7e178d1d180498625b6122f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD16",
													"$": {
														"refid": "group___memory_1ga3ee39cf8737f4a5d0e1e8c9eb870f02f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD32",
													"$": {
														"refid": "group___memory_1ga54b16e2fd8d6230c22193ae11b58486b",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetInfo",
													"$": {
														"refid": "group___memory_1ga9f67e594f3d410393b312ade84044597",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4479",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4479",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipArray3DGetDescriptor": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga68d59254ab8994d3f61063bb57bf5498",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipArray3DGetDescriptor"
			],
			"argsstring": [
				"(HIP_ARRAY3D_DESCRIPTOR *pArrayDescriptor, hipArray_t array)"
			],
			"name": [
				"hipArray3DGetDescriptor"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_ARRAY3D_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y3_d___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pArrayDescriptor"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a 3D array descriptor. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pArrayDescriptor",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned 3D array descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- 3D array to get descriptor of"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ,  , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorContextIsDestroyed",
													"$": {
														"refid": "hip__runtime__api_8h_1a6351a54f4747c7ada9963ca60ec74cf4",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, , , hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer, , , ,  ",
											"ref": [
												{
													"_": "hipArray3DCreate",
													"$": {
														"refid": "group___memory_1ga9dc08dfcd1078227106d9a4a3fe77d25",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayCreate",
													"$": {
														"refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayDestroy",
													"$": {
														"refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetDescriptor",
													"$": {
														"refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocHost",
													"$": {
														"refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemAllocPitch",
													"$": {
														"refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DAsync",
													"$": {
														"refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy3D",
													"$": {
														"refid": "group___memory_1ga38facb98eb1ae8206376c3c48bf5c444",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy3DAsync",
													"$": {
														"refid": "group___memory_1ga9c638fd577a3a0b80daffeede136063a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAtoH",
													"$": {
														"refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoD",
													"$": {
														"refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoDAsync",
													"$": {
														"refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoH",
													"$": {
														"refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyDtoHAsync",
													"$": {
														"refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoA",
													"$": {
														"refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoD",
													"$": {
														"refid": "group___memory_1gaa415ecdd2535e1eb618ed8a31a6f03af",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyHtoDAsync",
													"$": {
														"refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetAddressRange",
													"$": {
														"refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemGetInfo",
													"$": {
														"refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD8",
													"$": {
														"refid": "group___memory_1gad484d4b0a7e178d1d180498625b6122f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD16",
													"$": {
														"refid": "group___memory_1ga3ee39cf8737f4a5d0e1e8c9eb870f02f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemsetD32",
													"$": {
														"refid": "group___memory_1ga54b16e2fd8d6230c22193ae11b58486b",
														"kindref": "member"
													}
												},
												{
													"_": "hipArrayGetInfo",
													"$": {
														"refid": "group___memory_1ga9f67e594f3d410393b312ade84044597",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4497",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4497",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2D"
			],
			"argsstring": [
				"(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpy2D"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dpitch"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"spitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dpitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of destination memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "spitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of source memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4514",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4514",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyParam2D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaa6913c5738f524d8fd043ab6f2c0e5ed",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyParam2D"
			],
			"argsstring": [
				"(const hip_Memcpy2D *pCopy)"
			],
			"name": [
				"hipMemcpyParam2D"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hip_Memcpy2D",
									"$": {
										"refid": "structhip___memcpy2_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopy"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies memory for 2D arrays. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCopy",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Parameters for the memory copy "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4525",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4525",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyParam2DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gad0068c52b6f5c2ed758ec2f68db8751b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyParam2DAsync"
			],
			"argsstring": [
				"(const hip_Memcpy2D *pCopy, hipStream_t stream)"
			],
			"name": [
				"hipMemcpyParam2DAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hip_Memcpy2D",
									"$": {
										"refid": "structhip___memcpy2_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopy"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies memory for 2D arrays. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCopy",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Parameters for the memory copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to use "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4536",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4536",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2DAsync"
			],
			"argsstring": [
				"(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpy2DAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dpitch"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"spitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dpitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of destination memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "spitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of source memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to use "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4554",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4554",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2DToArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2DToArray"
			],
			"argsstring": [
				"(hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpy2DToArray"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"spitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "spitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of source memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4573",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4573",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2DToArrayAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gab6953ee5f575d0324c19ffc51a72f8fb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2DToArrayAsync"
			],
			"argsstring": [
				"(hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpy2DToArrayAsync"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"spitch"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "spitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of source memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Accelerator view which the copy is being enqueued "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToArray",
													"$": {
														"refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4593",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4593",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyToArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyToArray"
			],
			"argsstring": [
				"(hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpyToArray"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4613",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4613",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyFromArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyFromArray"
			],
			"argsstring": [
				"(void *dst, hipArray_const_t srcArray, size_t wOffset, size_t hOffset, size_t count, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpyFromArray"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"srcArray"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "srcArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size in bytes to copy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4632",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4632",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2DFromArray": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga9c5763233c9803b8e964881487fc4e60",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2DFromArray"
			],
			"argsstring": [
				"(void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind)"
			],
			"name": [
				"hipMemcpy2DFromArray"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dpitch"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dpitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of destination memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4651",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4651",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy2DFromArrayAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga946fe29e78ce1580cb95fa2210389263",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy2DFromArrayAsync"
			],
			"argsstring": [
				"(void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)"
			],
			"name": [
				"hipMemcpy2DFromArrayAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dpitch"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"wOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"hOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemcpyKind",
									"$": {
										"refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"kind"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dpitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch of destination memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "wOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting X offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source starting Y offset "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width of matrix transfer (columns in bytes) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height of matrix transfer (rows) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kind",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of transfer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Accelerator view which the copy is being enqueued "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4670",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4670",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyAtoH": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gabf833a230a7883199514e3fe7face896",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyAtoH"
			],
			"argsstring": [
				"(void *dst, hipArray_t srcArray, size_t srcOffset, size_t count)"
			],
			"name": [
				"hipMemcpyAtoH"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dst"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"srcArray"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"srcOffset"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dst",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "srcArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "srcOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes of source array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of memory copy in bytes "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4684",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4684",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpyHtoA": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpyHtoA"
			],
			"argsstring": [
				"(hipArray_t dstArray, size_t dstOffset, const void *srcHost, size_t count)"
			],
			"name": [
				"hipMemcpyHtoA"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dstArray"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dstOffset"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"srcHost"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dstArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Destination memory address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dstOffset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes of destination array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "srcHost",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Source host pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of memory copy in bytes "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4698",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4698",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy3D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga38facb98eb1ae8206376c3c48bf5c444",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy3D"
			],
			"argsstring": [
				"(const struct hipMemcpy3DParms *p)"
			],
			"name": [
				"hipMemcpy3D"
			],
			"param": [
				{
					"type": [
						{
							"_": "const struct  *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"p"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "p",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"3D memory copy parameters "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4709",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4709",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemcpy3DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga9c638fd577a3a0b80daffeede136063a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemcpy3DAsync"
			],
			"argsstring": [
				"(const struct hipMemcpy3DParms *p, hipStream_t stream)"
			],
			"name": [
				"hipMemcpy3DAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": "const struct  *",
							"ref": [
								{
									"_": "hipMemcpy3DParms",
									"$": {
										"refid": "structhip_memcpy3_d_parms",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"p"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "p",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"3D memory copy parameters "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to use "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4721",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4721",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvMemcpy3D": {
			"$": {
				"kind": "function",
				"id": "group___memory_1gaa385d7b1d0f0d941224abd9549ea9494",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvMemcpy3D"
			],
			"argsstring": [
				"(const HIP_MEMCPY3D *pCopy)"
			],
			"name": [
				"hipDrvMemcpy3D"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopy"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCopy",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"3D memory copy parameters "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4732",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4732",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDrvMemcpy3DAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_1ga6141790316fdb3c85ce34cf94c721c20",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDrvMemcpy3DAsync"
			],
			"argsstring": [
				"(const HIP_MEMCPY3D *pCopy, hipStream_t stream)"
			],
			"name": [
				"hipDrvMemcpy3DAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_MEMCPY3D",
									"$": {
										"refid": "struct_h_i_p___m_e_m_c_p_y3_d",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pCopy"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Copies data between host and device asynchronously. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pCopy",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"3D memory copy parameters "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream to use "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidPitchValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidMemcpyDirection",
													"$": {
														"refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipMemcpy",
													"$": {
														"refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2DToArray",
													"$": {
														"refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpy2D",
													"$": {
														"refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyFromArray",
													"$": {
														"refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyToSymbol",
													"$": {
														"refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemcpyAsync",
													"$": {
														"refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4744",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4744",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocManaged": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1gaadf4780d920bb6f5cc755880740ef7dc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocManaged"
			],
			"argsstring": [
				"(void **dev_ptr, size_t size, unsigned int flags)"
			],
			"name": [
				"hipMallocManaged"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocates memory that will be automatically managed by HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"This API is used for managed memory, allows data be shared and accessible to both CPU and GPU using a single pointer.",
						"The API returns the allocation pointer, managed by HMM, can be used further to execute kernels on device and fetch data between the host and device as needed.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"It is recommend to do the capability check before call this API."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMemoryAllocation",
													"$": {
														"refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to allocated device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- requested allocation size in bytes, it should be granularity of 4KB "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- must be either hipMemAttachGlobal or hipMemAttachHost (defaults to hipMemAttachGlobal)"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3178",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3178",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPrefetchAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1ga08ca029eec15591f680c7b19b0fb1d1a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPrefetchAsync"
			],
			"argsstring": [
				"(const void *dev_ptr, size_t count, int device, hipStream_t stream)"
			],
			"name": [
				"hipMemPrefetchAsync"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Prefetches memory to the specified destination device using HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to be prefetched "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes for prefetching "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"destination device to prefetch to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to enqueue prefetch operation"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3193",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3193",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemAdvise": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1ga5c8a3ea8a8702747588082ed39ea51bf",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemAdvise"
			],
			"argsstring": [
				"(const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)"
			],
			"name": [
				"hipMemAdvise"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemoryAdvise",
									"$": {
										"refid": "group___global_defs_1ga2757323c1ac94b1d71f699fcbd5bdc2f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"advice"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Advise about the usage of a given memory range to HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nThis HIP API advises about the usage to be applied on unified memory allocation in the range starting from the pointer address devPtr, with the size of count bytes. The memory range must refer to managed memory allocated via the API hipMallocManaged, and the range will be handled with proper round down and round up respectively in the driver to be aligned to CPU page size, the same way as corresponding CUDA API behaves in CUDA version 8.0 and afterwards.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to memory to set the advice for "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size in bytes of the memory range, it should be CPU page size alligned. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "advice",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"advice to be applied for the specified memory range "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"device to apply the advice for"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux and is under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3216",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3216",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemRangeGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1gaad1ddb8bc3e1905a5f116dbcdc842ea3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemRangeGetAttribute"
			],
			"argsstring": [
				"(void *data, size_t data_size, hipMemRangeAttribute attribute, const void *dev_ptr, size_t count)"
			],
			"name": [
				"hipMemRangeGetAttribute"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"data"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"data_size"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemRangeAttribute",
									"$": {
										"refid": "group___global_defs_1ga1e8d4a7cf5d1844fa34e4f9ac3bfcc63",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attribute"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query an attribute of a given memory range in HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"a pointer to a memory location where the result of each attribute query will be written to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data_size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the size of data "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attribute",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the attribute to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"start of the range to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size of the range to query"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3234",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3234",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemRangeGetAttributes": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1ga4a37d3eac6147dcaa3d0cd3de3268121",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemRangeGetAttributes"
			],
			"argsstring": [
				"(void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)"
			],
			"name": [
				"hipMemRangeGetAttributes"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"data"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"data_sizes"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemRangeAttribute",
									"$": {
										"refid": "group___global_defs_1ga1e8d4a7cf5d1844fa34e4f9ac3bfcc63",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attributes"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"num_attributes"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query attributes of a given memory range in HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"a two-dimensional array containing pointers to memory locations where the result of each attribute query will be written to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "data_sizes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"an array, containing the sizes of each result "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attributes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the attribute to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "num_attributes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"an array of attributes to query (numAttributes and the number of attributes in this array should match) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"start of the range to query "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"size of the range to query"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3255",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3255",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamAttachMemAsync": {
			"$": {
				"kind": "function",
				"id": "group___memory_m_1gabd2ab38956e78d8a5d5a0320f5ef5027",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamAttachMemAsync"
			],
			"argsstring": [
				"(hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)"
			],
			"name": [
				"hipStreamAttachMemAsync"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"length"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Attach memory to a stream asynchronously in HIP. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- stream in which to enqueue the attach operation "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- pointer to memory (must be a pointer to managed memory or to a valid host-accessible region of system-allocated memory) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "length",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- length of memory (defaults to zero) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- must be one of hipMemAttachGlobal, hipMemAttachHost or hipMemAttachSingle (defaults to hipMemAttachSingle)"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3275",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3275",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtModuleLaunchKernel": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga73d0c5f72869e258aa4899a829d9645c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "HIP_PUBLIC_API",
							"$": {
								"refid": "hip__common_8h_1a8845b0725b24c717f73bd1d9f5f6386a",
								"kindref": "member"
							}
						},
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"HIP_PUBLIC_API hipError_t hipExtModuleLaunchKernel"
			],
			"argsstring": [
				"(hipFunction_t f, uint32_t globalWorkSizeX, uint32_t globalWorkSizeY, uint32_t globalWorkSizeZ, uint32_t localWorkSizeX, uint32_t localWorkSizeY, uint32_t localWorkSizeZ, size_t sharedMemBytes, hipStream_t hStream, void **kernelParams, void **extra, hipEvent_t startEvent, hipEvent_t stopEvent, uint32_t flags)"
			],
			"name": [
				"hipExtModuleLaunchKernel"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeX"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeY"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeZ"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeX"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeY"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeZ"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hStream"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"kernelParams"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"extra"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"startEvent"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stopEvent"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launches kernel with parameters and shared memory on stream with arguments passed to kernel params or extra arguments. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nHIP/ROCm actually updates the start event when the associated kernel completes. Currently, timing between startEvent and stopEvent does not include the time it takes to perform a system scope release/cache flush - only the time it takes to issues writes to cache. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "globalWorkSizeX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X grid dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "globalWorkSizeY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y grid dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "globalWorkSizeZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z grid dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "localWorkSizeX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "localWorkSizeY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "localWorkSizeZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hStream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kernelParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to kernel parameters. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extra",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to kernel arguments. These are passed directly to the kernel and must be in the memory layout and alignment expected by the kernel. All passed arguments must be naturally aligned according to their type. The memory address of each argument should be a multiple of its size in bytes. Please refer to hip_porting_driver_api.md for sample usage. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "startEvent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"If non-null, specified event will be updated to track the start time of the kernel launch. The event must be created before calling this API. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stopEvent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"If non-null, specified event will be updated to track the stop time of the kernel launch. The event must be created before calling this API. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The value of hipExtAnyOrderLaunch, signifies if kernel can be launched in any order. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , .",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipInvalidDeviceId",
													"$": {
														"refid": "group___global_defs_1ga142b1b5268b4d18fe34050d5c9d9907d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_ext.h",
						"line": "69",
						"column": "24",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_ext.h",
						"declline": "69",
						"declcolumn": "24"
					}
				}
			]
		},
		"hipHccModuleLaunchKernel": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga831807ab4494122f88235c44565a0769",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "HIP_PUBLIC_API",
							"$": {
								"refid": "hip__common_8h_1a8845b0725b24c717f73bd1d9f5f6386a",
								"kindref": "member"
							}
						},
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"HIP_PUBLIC_API hipError_t hipHccModuleLaunchKernel"
			],
			"argsstring": [
				"(hipFunction_t f, uint32_t globalWorkSizeX, uint32_t globalWorkSizeY, uint32_t globalWorkSizeZ, uint32_t localWorkSizeX, uint32_t localWorkSizeY, uint32_t localWorkSizeZ, size_t sharedMemBytes, hipStream_t hStream, void **kernelParams, void **extra, hipEvent_t startEvent, hipEvent_t stopEvent)"
			],
			"name": [
				"hipHccModuleLaunchKernel"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeX"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeY"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"globalWorkSizeZ"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeX"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeY"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"localWorkSizeZ"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hStream"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"kernelParams"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"extra"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"startEvent"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stopEvent"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "This HIP API is deprecated, please use  instead. ",
							"ref": [
								{
									"_": "hipExtModuleLaunchKernel()",
									"$": {
										"refid": "group___module_1ga73d0c5f72869e258aa4899a829d9645c",
										"kindref": "member"
									}
								}
							]
						}
					]
				}
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_ext.h",
						"line": "83",
						"column": "23",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_ext.h",
						"declline": "83",
						"declcolumn": "23"
					}
				}
			]
		},
		"hipModuleLoad": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga31d806d976e91d36bd990ae3004d8760",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLoad"
			],
			"argsstring": [
				"(hipModule_t *module, const char *fname)"
			],
			"name": [
				"hipModuleLoad"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"module"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"fname"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Loads code object from file into a module the currrent context. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "fname",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Filename of code object to load"
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "module",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Module"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"File/memory resources allocated in this function are released only in hipModuleUnload."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorFileNotFound",
													"$": {
														"refid": "hip__runtime__api_8h_1a68b083041e88827b329d20bbd06df557",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorSharedObjectInitFailed",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e2bb13294030f0ebce0a5db1b55c4c4",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5260",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5260",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleUnload": {
			"$": {
				"kind": "function",
				"id": "group___module_1gae58e345f55bb3ec13dca80d2df88e0ed",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleUnload"
			],
			"argsstring": [
				"(hipModule_t module)"
			],
			"name": [
				"hipModuleUnload"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"module"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Frees the module. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nThe module is freed, and the code objects associated with it are destroyed. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "module",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Module to free"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidResourceHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5270",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5270",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleGetFunction": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga9648b457bb837838cb936b417b56a65d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleGetFunction"
			],
			"argsstring": [
				"(hipFunction_t *function, hipModule_t module, const char *kname)"
			],
			"name": [
				"hipModuleGetFunction"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"function"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"module"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"kname"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Function with kname will be extracted if present in module. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "module",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Module to get function from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kname",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the name of function "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "function",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to function handle"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotFound",
													"$": {
														"refid": "hip__runtime__api_8h_1a06c39dc608210baa87be26f49620197d",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5281",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5281",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFuncGetAttributes": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga18a72890686975fdd46c7c8a7bb5a607",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFuncGetAttributes"
			],
			"argsstring": [
				"(struct hipFuncAttributes *attr, const void *func)"
			],
			"name": [
				"hipFuncGetAttributes"
			],
			"param": [
				{
					"type": [
						{
							"_": "struct  *",
							"ref": [
								{
									"_": "hipFuncAttributes",
									"$": {
										"refid": "structhip_func_attributes",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"func"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Find out attributes for a given function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Attributes of funtion "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "func",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the function handle"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5290",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5290",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFuncGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga488a7f867a3e46015659b5665071d2eb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFuncGetAttribute"
			],
			"argsstring": [
				"(int *value, hipFunction_attribute attrib, hipFunction_t hfunc)"
			],
			"name": [
				"hipFuncGetAttribute"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_attribute",
									"$": {
										"refid": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attrib"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hfunc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Find out a specific attribute for a given function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the value "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attrib",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Attributes of the given funtion "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hfunc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Function to get attributes from"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5300",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5300",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleGetTexRef": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga1ceb20d084d571c28282ee2fd052264c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleGetTexRef"
			],
			"argsstring": [
				"(textureReference **texRef, hipModule_t hmod, const char *name)"
			],
			"name": [
				"hipModuleGetTexRef"
			],
			"param": [
				{
					"type": [
						{
							"_": " **",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hmod"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"returns the handle of the texture reference with the name from the module. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hmod",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Module "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of name of texture reference "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotFound",
													"$": {
														"refid": "hip__runtime__api_8h_1a06c39dc608210baa87be26f49620197d",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5310",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5310",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleLoadData": {
			"$": {
				"kind": "function",
				"id": "group___module_1gaabdbd73e952a741e861d01109c4790f3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLoadData"
			],
			"argsstring": [
				"(hipModule_t *module, const void *image)"
			],
			"name": [
				"hipModuleLoadData"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"module"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"image"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"builds module from code object which resides in host memory. Image is pointer to that location. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "image",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The pointer to the location of data "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "module",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Retuned module"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"hipSuccess, hipErrorNotInitialized, hipErrorOutOfMemory, hipErrorNotInitialized "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5320",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5320",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleLoadDataEx": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga3e70722338894f48540c7be9a136af79",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLoadDataEx"
			],
			"argsstring": [
				"(hipModule_t *module, const void *image, unsigned int numOptions, hipJitOption *options, void **optionValues)"
			],
			"name": [
				"hipModuleLoadDataEx"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipModule_t",
									"$": {
										"refid": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"module"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"image"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numOptions"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipJitOption",
									"$": {
										"refid": "group___global_defs_1ga54cbbb7697c63cf9b13383b49819d500",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"options"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"optionValues"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"builds module from code object which resides in host memory. Image is pointer to that location. Options are not used. hipModuleLoadData is called. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "image",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The pointer to the location of data "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "module",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Retuned module "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numOptions",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of options "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "options",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Options for JIT "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "optionValues",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Option values for JIT"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"hipSuccess, hipErrorNotInitialized, hipErrorOutOfMemory, hipErrorNotInitialized "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5333",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5333",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleLaunchKernel": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga2e4de5937aa8171e9eda16c881ed0674",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLaunchKernel"
			],
			"argsstring": [
				"(hipFunction_t f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, hipStream_t stream, void **kernelParams, void **extra)"
			],
			"name": [
				"hipModuleLaunchKernel"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimX"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimY"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimZ"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimX"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimY"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimZ"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"kernelParams"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"extra"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"launches kernel f with launch parameters and shared memory on stream with arguments passed to kernelparams or extra "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32. So gridDim.x * blockDim.x, gridDim.y * blockDim.y and gridDim.z * blockDim.z are always less than 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X grid dimension specified as multiple of blockDimX. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y grid dimension specified as multiple of blockDimY. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z grid dimension specified as multiple of blockDimZ. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X block dimensions specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y grid dimension specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z grid dimension specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kernelParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel parameters to launch "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extra",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to kernel arguments. These are passed directly to the kernel and must be in the memory layout and alignment expected by the kernel. All passed arguments must be naturally aligned according to their type. The memory address of each argument should be a multiple of its size in bytes. Please refer to hip_porting_driver_api.md for sample usage."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5363",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5363",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleLaunchCooperativeKernel": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga7b7e76759a946338dd16a991505e31e1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLaunchCooperativeKernel"
			],
			"argsstring": [
				"(hipFunction_t f, unsigned int gridDimX, unsigned int gridDimY, unsigned int gridDimZ, unsigned int blockDimX, unsigned int blockDimY, unsigned int blockDimZ, unsigned int sharedMemBytes, hipStream_t stream, void **kernelParams)"
			],
			"name": [
				"hipModuleLaunchCooperativeKernel"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimX"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimY"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"gridDimZ"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimX"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimY"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"blockDimZ"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"kernelParams"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"launches kernel f with launch parameters and shared memory on stream with arguments passed to kernelParams, where thread blocks can cooperate and synchronize as they execute "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X grid dimension specified as multiple of blockDimX. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y grid dimension specified as multiple of blockDimY. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDimZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z grid dimension specified as multiple of blockDimZ. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"X block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimY",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Y block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimZ",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Z block dimension specified in work-items. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case the default stream is used with associated synchronization rules. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kernelParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"A list of kernel arguments."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidImage",
													"$": {
														"refid": "hip__runtime__api_8h_1a1988fef2a9c47f5c0986b88a79d030a4",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidConfiguration",
													"$": {
														"refid": "hip__runtime__api_8h_1ad2e6cccb1d5fb3027a24cd2f4235fe5b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchOutOfResources",
													"$": {
														"refid": "hip__runtime__api_8h_1a9aefc3e9d1456dcfd6e9344b87cdd90a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchTimeOut",
													"$": {
														"refid": "hip__runtime__api_8h_1a66dc2910c027f51c0730e165395ed131",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorCooperativeLaunchTooLarge",
													"$": {
														"refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorSharedObjectInitFailed",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e2bb13294030f0ebce0a5db1b55c4c4",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5393",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5393",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleLaunchCooperativeKernelMultiDevice": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga13609d6a39d91c1ffcff11b0a712e9db",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleLaunchCooperativeKernelMultiDevice"
			],
			"argsstring": [
				"(hipFunctionLaunchParams *launchParamsList, unsigned int numDevices, unsigned int flags)"
			],
			"name": [
				"hipModuleLaunchCooperativeKernelMultiDevice"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipFunctionLaunchParams",
									"$": {
										"refid": "structhip_function_launch_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"launchParamsList"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numDevices"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launches kernels on multiple devices where thread blocks can cooperate and synchronize as they execute. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "launchParamsList",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"List of launch parameters, one per device. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDevices",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the launchParamsList array. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags to control launch behavior."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidImage",
													"$": {
														"refid": "hip__runtime__api_8h_1a1988fef2a9c47f5c0986b88a79d030a4",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidConfiguration",
													"$": {
														"refid": "hip__runtime__api_8h_1ad2e6cccb1d5fb3027a24cd2f4235fe5b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidResourceHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchFailure",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchOutOfResources",
													"$": {
														"refid": "hip__runtime__api_8h_1a9aefc3e9d1456dcfd6e9344b87cdd90a",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorLaunchTimeOut",
													"$": {
														"refid": "hip__runtime__api_8h_1a66dc2910c027f51c0730e165395ed131",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorCooperativeLaunchTooLarge",
													"$": {
														"refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorSharedObjectInitFailed",
													"$": {
														"refid": "hip__runtime__api_8h_1a3e2bb13294030f0ebce0a5db1b55c4c4",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5412",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5412",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipLaunchCooperativeKernel": {
			"$": {
				"kind": "function",
				"id": "group___module_1gaa516e011bb07d01550102c98adb57ec2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipLaunchCooperativeKernel"
			],
			"argsstring": [
				"(const void *f, dim3 gridDim, dim3 blockDimX, void **kernelParams, unsigned int sharedMemBytes, hipStream_t stream)"
			],
			"name": [
				"hipLaunchCooperativeKernel"
			],
			"param": [
				{
					"type": [
						"const void *"
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"gridDim"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "dim3",
									"$": {
										"refid": "structdim3",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"blockDimX"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"kernelParams"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"sharedMemBytes"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"launches kernel f with launch parameters and shared memory on stream with arguments passed to kernelparams or extra, where thread blocks can cooperate and synchronize as they execute "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel to launch. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridDim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Grid dimensions specified as multiple of blockDim. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockDimX",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Block dimensions specified in work-items "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "kernelParams",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"A list of kernel arguments "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "sharedMemBytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules."
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorCooperativeLaunchTooLarge",
													"$": {
														"refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5433",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5433",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipLaunchCooperativeKernelMultiDevice": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga661fc9f6975de96edd80c78af888a03f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipLaunchCooperativeKernelMultiDevice"
			],
			"argsstring": [
				"(hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)"
			],
			"name": [
				"hipLaunchCooperativeKernelMultiDevice"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipLaunchParams",
									"$": {
										"refid": "structhip_launch_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"launchParamsList"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"numDevices"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launches kernels on multiple devices where thread blocks can cooperate and synchronize as they execute. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "launchParamsList",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"List of launch parameters, one per device. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDevices",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the launchParamsList array. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags to control launch behavior."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorCooperativeLaunchTooLarge",
													"$": {
														"refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5447",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5447",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtLaunchMultiKernelMultiDevice": {
			"$": {
				"kind": "function",
				"id": "group___module_1ga24070776eacdf32ba3c4f339315df6ff",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtLaunchMultiKernelMultiDevice"
			],
			"argsstring": [
				"(hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)"
			],
			"name": [
				"hipExtLaunchMultiKernelMultiDevice"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipLaunchParams",
									"$": {
										"refid": "structhip_launch_params",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"launchParamsList"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"numDevices"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Launches kernels on multiple devices and guarantees all specified kernels are dispatched on respective streams before enqueuing any other work on the specified streams from any other threads. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "launchParamsList",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"List of launch parameters, one per device. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numDevices",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the launchParamsList array. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags to control launch behavior."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5460",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5460",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleOccupancyMaxPotentialBlockSize": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1ga322e4690ca20dbf8a07293f2a1105c94",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleOccupancyMaxPotentialBlockSize"
			],
			"argsstring": [
				"(int *gridSize, int *blockSize, hipFunction_t f, size_t dynSharedMemPerBlk, int blockSizeLimit)"
			],
			"name": [
				"hipModuleOccupancyMaxPotentialBlockSize"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"gridSize"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSizeLimit"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"determine the grid and block sizes to achieves maximum occupancy for a kernel "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"minimum grid size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"kernel function for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSizeLimit",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the maximum block size for the kernel, use 0 for no limit"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5490",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5490",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleOccupancyMaxPotentialBlockSizeWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1gacbf7b212b8fe741bde1ced9c8836cb1d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleOccupancyMaxPotentialBlockSizeWithFlags"
			],
			"argsstring": [
				"(int *gridSize, int *blockSize, hipFunction_t f, size_t dynSharedMemPerBlk, int blockSizeLimit, unsigned int flags)"
			],
			"name": [
				"hipModuleOccupancyMaxPotentialBlockSizeWithFlags"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"gridSize"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSizeLimit"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"determine the grid and block sizes to achieves maximum occupancy for a kernel "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"minimum grid size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"kernel function for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSizeLimit",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the maximum block size for the kernel, use 0 for no limit "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Extra flags for occupancy calculation (only default supported)"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5509",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5509",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleOccupancyMaxActiveBlocksPerMultiprocessor": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1ga8f2d8a6b4faae54789811b77f86059ab",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleOccupancyMaxActiveBlocksPerMultiprocessor"
			],
			"argsstring": [
				"(int *numBlocks, hipFunction_t f, int blockSize, size_t dynSharedMemPerBlk)"
			],
			"name": [
				"hipModuleOccupancyMaxActiveBlocksPerMultiprocessor"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns occupancy for a device function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel function (hipFunction) for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Block size the kernel is intended to be launched with "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5521",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5521",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1gab6c697eef5ea8043d6a629155461b7d9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
			],
			"argsstring": [
				"(int *numBlocks, hipFunction_t f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)"
			],
			"name": [
				"hipModuleOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipFunction_t",
									"$": {
										"refid": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns occupancy for a device function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel function(hipFunction_t) for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Block size the kernel is intended to be launched with "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Extra flags for occupancy calculation (only default supported) "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5533",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5533",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipOccupancyMaxActiveBlocksPerMultiprocessor": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1ga59c488f35b0ba4b4938ba16e1a7ed7ec",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessor"
			],
			"argsstring": [
				"(int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk)"
			],
			"name": [
				"hipOccupancyMaxActiveBlocksPerMultiprocessor"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns occupancy for a device function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel function for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Block size the kernel is intended to be launched with "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5544",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5544",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1ga137f983b7da9d96ecee675dcc9eee86d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
			],
			"argsstring": [
				"(int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)"
			],
			"name": [
				"hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"numBlocks"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns occupancy for a device function. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numBlocks",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Kernel function for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Block size the kernel is intended to be launched with "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Extra flags for occupancy calculation (currently ignored) "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDeviceFunction",
													"$": {
														"refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5556",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5556",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipOccupancyMaxPotentialBlockSize": {
			"$": {
				"kind": "function",
				"id": "group___occupancy_1ga68a4c477d2e4f769bdb090d0b10bbe66",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipOccupancyMaxPotentialBlockSize"
			],
			"argsstring": [
				"(int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)"
			],
			"name": [
				"hipOccupancyMaxPotentialBlockSize"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"gridSize"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"blockSize"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"f"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"dynSharedMemPerBlk"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"blockSizeLimit"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"determine the grid and block sizes to achieves maximum occupancy for a kernel "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "gridSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"minimum grid size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"block size for maximum potential occupancy "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "f",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"kernel function for which occupancy is calulated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dynSharedMemPerBlk",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"dynamic shared memory usage (in bytes) intended for each block "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "blockSizeLimit",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the maximum block size for the kernel, use 0 for no limit"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5572",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5572",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceCanAccessPeer": {
			"$": {
				"kind": "function",
				"id": "group___peer_to_peer_1ga0a1c9ccd775758d9d7d5b5a1f525b719",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceCanAccessPeer"
			],
			"argsstring": [
				"(int *canAccessPeer, int deviceId, int peerDeviceId)"
			],
			"name": [
				"hipDeviceCanAccessPeer"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"canAccessPeer"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"deviceId"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"peerDeviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Determine if a device can access a peer's memory. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\nReturns \"1\" in  if the specified  is capable of directly accessing memory physically located on peerDevice , or \"0\" if not.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "canAccessPeer",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returns the peer access capability (0 or 1) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "deviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- device from where memory may be accessed. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "peerDeviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- device where memory is physically located"
													]
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"canAccessPeer",
								"device"
							]
						},
						{
							"_": "Returns \"0\" in  if deviceId == peerDeviceId, and both are valid devices : a device is not a peer of itself.",
							"computeroutput": [
								"canAccessPeer"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": " if deviceId or peerDeviceId are not valid devices ",
											"ref": [
												{
													"_": "hipErrorInvalidDevice",
													"$": {
														"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4773",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4773",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceEnablePeerAccess": {
			"$": {
				"kind": "function",
				"id": "group___peer_to_peer_1ga0caca59034134d7a7bb893cc1caa653e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceEnablePeerAccess"
			],
			"argsstring": [
				"(int peerDeviceId, unsigned int flags)"
			],
			"name": [
				"hipDeviceEnablePeerAccess"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"peerDeviceId"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enable direct access from current device's virtual address space to memory allocations physically located on a peer device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Memory which already allocated on peer device will be mapped into the address space of the current device. In addition, all future memory allocations on peerDeviceId will be mapped into the address space of the current device when the memory is allocated. The peer memory remains accessible from the current device until a call to hipDeviceDisablePeerAccess or hipDeviceReset.",
						{
							"_": "\nReturns , , , \n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "peerDeviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Peer device to enable direct access to from the current device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Reserved for future use, must be zero"
													]
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorInvalidDevice",
									"$": {
										"refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorInvalidValue",
									"$": {
										"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
										"kindref": "member"
									}
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": " if peer access is already enabled for this device. ",
											"ref": [
												{
													"_": "hipErrorPeerAccessAlreadyEnabled",
													"$": {
														"refid": "hip__runtime__api_8h_1acf78b2ed8f41d21e8f23eaa084c75349",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4790",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4790",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceDisablePeerAccess": {
			"$": {
				"kind": "function",
				"id": "group___peer_to_peer_1ga85030c72824fb60aaddc7374ab60481b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceDisablePeerAccess"
			],
			"argsstring": [
				"(int peerDeviceId)"
			],
			"name": [
				"hipDeviceDisablePeerAccess"
			],
			"param": [
				{
					"type": [
						"int"
					],
					"declname": [
						"peerDeviceId"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Disable direct access from current device's virtual address space to memory allocations physically located on a peer device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Returns hipErrorPeerAccessNotEnabled if direct access to memory on peerDevice has not yet been enabled from the current device.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "peerDeviceId",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Peer device to disable direct access to"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorPeerAccessNotEnabled",
													"$": {
														"refid": "hip__runtime__api_8h_1a5605bce676c6a2b37d04a21971f0d596",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4802",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4802",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemGetAddressRange": {
			"$": {
				"kind": "function",
				"id": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemGetAddressRange"
			],
			"argsstring": [
				"(hipDeviceptr_t *pbase, size_t *psize, hipDeviceptr_t dptr)"
			],
			"name": [
				"hipMemGetAddressRange"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pbase"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"psize"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get information on memory allocations. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pbase",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- BAse pointer address "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "psize",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Size of allocation "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr-",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Device Pointer"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidDevicePointer",
													"$": {
														"refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , ,  ",
											"ref": [
												{
													"_": "hipCtxCreate",
													"$": {
														"refid": "group___context_1gab6dbcff5c5b1249a5ac5cf39ae9d08bc",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxDestroy",
													"$": {
														"refid": "group___context_1ga9a65fe43238ef303a6d97826c05fd14e",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetFlags",
													"$": {
														"refid": "group___context_1ga12a7a993e10f775fbf61a0b14288ed1b",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPopCurrent",
													"$": {
														"refid": "group___context_1ga2cc4ea5a6b78d9d7990a88a7863467d4",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetCurrent",
													"$": {
														"refid": "group___context_1ga741786101d348fdbfa1f64546860357a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCurrent",
													"$": {
														"refid": "group___context_1ga834a192f70c2bfc0269c309436776feb",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxPushCurrent",
													"$": {
														"refid": "group___context_1ga9c9d92f29d68cacdea4c062c97e50a8a",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSetCacheConfig",
													"$": {
														"refid": "group___context_1ga7eacc656f1d1b6f5a683bea31be67a2f",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxSynchronize",
													"$": {
														"refid": "group___context_1gad45cd968e8e3dcfd24ef050cab2f41c8",
														"kindref": "member"
													}
												},
												{
													"_": "hipCtxGetDevice",
													"$": {
														"refid": "group___context_1ga8aa32cf64272da929f23ecbafefefcee",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "4815",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "4815",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipProfilerStart": {
			"$": {
				"kind": "function",
				"id": "group___profiler_1ga40aa20d731f9c8f0586127d589759e1d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipProfilerStart"
			],
			"argsstring": [
				"()"
			],
			"name": [
				"hipProfilerStart"
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Start recording of profiling information When using this API, start the profiler with profiling disabled. (startdisabled) ",
							"ndash": [
								""
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": hipProfilerStart API is deprecated, use roctracer/rocTX instead. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5597",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5597",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipProfilerStop": {
			"$": {
				"kind": "function",
				"id": "group___profiler_1ga777994cae0f7bdef24131fc1f3ed626e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipProfilerStop"
			],
			"argsstring": [
				"()"
			],
			"name": [
				"hipProfilerStop"
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Stop recording of profiling information. When using this API, start the profiler with profiling disabled. (startdisabled) ",
							"ndash": [
								""
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"hipProfilerStart API is deprecated, use roctracer/rocTX instead. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5605",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5605",
						"declcolumn": "12"
					}
				}
			]
		},
		"hiprtcGetErrorString": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga27bebf4ed3e810ca627cbbfc34880be1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				"const char *"
			],
			"definition": [
				"const char * hiprtcGetErrorString"
			],
			"argsstring": [
				"(hiprtcResult result)"
			],
			"name": [
				"hiprtcGetErrorString"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcResult",
									"$": {
										"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"result"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns text string message to explain the error which occurred. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "result",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"code to convert to string. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										"const char pointer to the NULL-terminated error string"
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"In HIP, this function returns the name of the error, if the hiprtc result is defined, it will return \"Invalid HIPRTC error code\""
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "141",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "141",
						"declcolumn": "12"
					}
				}
			]
		},
		"hiprtcVersion": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1gaef1b2a666014e32bb1ced53729e7f8a6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcVersion"
			],
			"argsstring": [
				"(int *major, int *minor)"
			],
			"name": [
				"hiprtcVersion"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"major"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"minor"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the parameters as major and minor version. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "major",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"HIP Runtime Compilation major version. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "minor",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"HIP Runtime Compilation minor version."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "HIPRTC_ERROR_INVALID_INPUT",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
														"kindref": "member"
													}
												},
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "153",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "153",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcAddNameExpression": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga050d3a66e5a6fc90284857af3760b142",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcAddNameExpression"
			],
			"argsstring": [
				"(hiprtcProgram prog, const char *name_expression)"
			],
			"name": [
				"hiprtcAddNameExpression"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name_expression"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Adds the given name exprssion to the runtime compilation program. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf const char pointer is NULL, it will return .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name_expression",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"const char pointer to the name expression. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "HIPRTC_ERROR_INVALID_INPUT",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "173",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "173",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcCompileProgram": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga74abced999a8acc5db43bcd108f0e87e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcCompileProgram"
			],
			"argsstring": [
				"(hiprtcProgram prog, int numOptions, const char **options)"
			],
			"name": [
				"hiprtcCompileProgram"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"numOptions"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"options"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Compiles the given runtime compilation program. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf the compiler failed to build the runtime compilation program, it will return .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numOptions",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"number of compiler options. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "options",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"compiler options as const array of strins. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "HIPRTC_ERROR_COMPILATION",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ad2b17befbe962616ab95250d40c8e62b",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "190",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "190",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcCreateProgram": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga349098a215c47ccecd4942993d312e37",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcCreateProgram"
			],
			"argsstring": [
				"(hiprtcProgram *prog, const char *src, const char *name, int numHeaders, const char **headers, const char **includeNames)"
			],
			"name": [
				"hiprtcCreateProgram"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"src"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"numHeaders"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"headers"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"includeNames"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates an instance of hiprtcProgram with the given input parameters, and sets the output hiprtcProgram prog with it. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nAny invalide input parameter, it will return  or .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "src",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"const char pointer to the program source. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"const char pointer to the program name. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numHeaders",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"number of headers. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "headers",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"array of strings pointing to headers. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "includeNames",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"array of strings pointing to names included in program source. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "HIPRTC_ERROR_INVALID_INPUT",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
										"kindref": "member"
									}
								},
								{
									"_": "HIPRTC_ERROR_INVALID_PROGRAM",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a37d841d4dd1bae0e5e2cd1df2c24e795",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If failed to create the program, it will return .",
							"ref": [
								{
									"_": "HIPRTC_ERROR_PROGRAM_CREATION_FAILURE",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a0d31deb90b120cbf8a94c30e6be27718",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "214",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "214",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcDestroyProgram": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1gaaf03e08e317ee3e50e3af04aade84787",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcDestroyProgram"
			],
			"argsstring": [
				"(hiprtcProgram *prog)"
			],
			"name": [
				"hiprtcDestroyProgram"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys an instance of given hiprtcProgram. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf prog is NULL, it will return .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "HIPRTC_ERROR_INVALID_INPUT",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "231",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "231",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcGetLoweredName": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga1e890947c8786af8f3a3eeda2280a5cc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcGetLoweredName"
			],
			"argsstring": [
				"(hiprtcProgram prog, const char *name_expression, const char **lowered_name)"
			],
			"name": [
				"hiprtcGetLoweredName"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name_expression"
					]
				},
				{
					"type": [
						"const char **"
					],
					"declname": [
						"lowered_name"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the lowered (mangled) name from an instance of hiprtcProgram with the given input parameters, and sets the output lowered_name with it. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf any invalide nullptr input parameters, it will return ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name_expression",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"const char pointer to the name expression. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "lowered_name",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"const char array to the lowered (mangled) name. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"ref": [
								{
									"_": "HIPRTC_ERROR_INVALID_INPUT",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If name_expression is not found, it will return ",
							"ref": [
								{
									"_": "HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8fcdce6a190a32526947d5285f16faf9",
										"kindref": "member"
									}
								}
							]
						},
						{
							"_": "If failed to get lowered_name from the program, it will return .",
							"ref": [
								{
									"_": "HIPRTC_ERROR_COMPILATION",
									"$": {
										"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ad2b17befbe962616ab95250d40c8e62b",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "250",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "250",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcGetProgramLog": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga60a18885be6dab83e09d0d340b5003d3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcGetProgramLog"
			],
			"argsstring": [
				"(hiprtcProgram prog, char *log)"
			],
			"name": [
				"hiprtcGetProgramLog"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"char *"
					],
					"declname": [
						"log"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the log generated by the runtime compilation program instance. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "log",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"memory pointer to the generated log. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "263",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "263",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcGetCode": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1gac80b2c9cf7d3635e82c3b7aea35ca82f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcGetCode"
			],
			"argsstring": [
				"(hiprtcProgram prog, char *code)"
			],
			"name": [
				"hiprtcGetCode"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"char *"
					],
					"declname": [
						"code"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the pointer of compilation binary by the runtime compilation program instance. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "code",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"char pointer to binary. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "286",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "286",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcGetCodeSize": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga3dce3c4183d7a09c9ffffd763f744ecb",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcGetCodeSize"
			],
			"argsstring": [
				"(hiprtcProgram prog, size_t *codeSizeRet)"
			],
			"name": [
				"hiprtcGetCodeSize"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"codeSizeRet"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the size of compilation binary by the runtime compilation program instance. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "codeSizeRet",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the size of binary. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "297",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "297",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcGetBitcodeSize": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga775e1e9a7a23c169913eaa8eb874f2d6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcGetBitcodeSize"
			],
			"argsstring": [
				"(hiprtcProgram prog, size_t *bitcode_size)"
			],
			"name": [
				"hiprtcGetBitcodeSize"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcProgram",
									"$": {
										"refid": "hiprtc_8h_1ae7aaeb207c077fba9893c698d78e9e58",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"prog"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"bitcode_size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the size of compiled bitcode by the runtime compilation program instance. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prog",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"runtime compilation program instance. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bitcode_size",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"the size of bitcode. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "320",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "320",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcLinkCreate": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga39f7dee1fb248b9b3977b53c18deea8d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcLinkCreate"
			],
			"argsstring": [
				"(unsigned int num_options, hiprtcJIT_option *option_ptr, void **option_vals_pptr, hiprtcLinkState *hip_link_state_ptr)"
			],
			"name": [
				"hiprtcLinkCreate"
			],
			"param": [
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"num_options"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcJIT_option",
									"$": {
										"refid": "group___global_defs_1gafcd5a7fcd242d0772494b7949dc2fc96",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"option_ptr"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"option_vals_pptr"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcLinkState",
									"$": {
										"refid": "hiprtc_8h_1ac0b93695503e1f129f87781bbb1095d3",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_link_state_ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates the link instance via hiprtc APIs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "num_options",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of options "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "option_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of options "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "option_vals_pptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of option values cast to void* "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hip_link_state_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"hiprtc link state created upon success"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												},
												{
													"_": "HIPRTC_ERROR_INVALID_INPUT",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
														"kindref": "member"
													}
												},
												{
													"_": "HIPRTC_ERROR_INVALID_OPTION",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a83af982bfeefbef92066ecf652131256",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "334",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "334",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcLinkAddFile": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga1b0f89907c20e8fd1d7e47cbecb80a4b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcLinkAddFile"
			],
			"argsstring": [
				"(hiprtcLinkState hip_link_state, hiprtcJITInputType input_type, const char *file_path, unsigned int num_options, hiprtcJIT_option *options_ptr, void **option_values)"
			],
			"name": [
				"hiprtcLinkAddFile"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcLinkState",
									"$": {
										"refid": "hiprtc_8h_1ac0b93695503e1f129f87781bbb1095d3",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_link_state"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcJITInputType",
									"$": {
										"refid": "group___global_defs_1ga8efcc39ccfeccddb37bc20a43f4516c2",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"input_type"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"file_path"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"num_options"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcJIT_option",
									"$": {
										"refid": "group___global_defs_1gafcd5a7fcd242d0772494b7949dc2fc96",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"options_ptr"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"option_values"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Adds a file with bit code to be linked with options. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf input values are invalid, it will \n\n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hip_link_state",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"hiprtc link state "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "input_type",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of the input data or bitcode "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "file_path",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Path to the input file where bitcode is present "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "num_options",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the options "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "options_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of options applied to this input "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "option_values",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of option values cast to void*"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_ERROR_INVALID_INPUT",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "355",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "355",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcLinkAddData": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga772b8b360f0a1e891ca55fdc32e7e74e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcLinkAddData"
			],
			"argsstring": [
				"(hiprtcLinkState hip_link_state, hiprtcJITInputType input_type, void *image, size_t image_size, const char *name, unsigned int num_options, hiprtcJIT_option *options_ptr, void **option_values)"
			],
			"name": [
				"hiprtcLinkAddData"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcLinkState",
									"$": {
										"refid": "hiprtc_8h_1ac0b93695503e1f129f87781bbb1095d3",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_link_state"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcJITInputType",
									"$": {
										"refid": "group___global_defs_1ga8efcc39ccfeccddb37bc20a43f4516c2",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"input_type"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"image"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"image_size"
					]
				},
				{
					"type": [
						"const char *"
					],
					"declname": [
						"name"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"num_options"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hiprtcJIT_option",
									"$": {
										"refid": "group___global_defs_1gafcd5a7fcd242d0772494b7949dc2fc96",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"options_ptr"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"option_values"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Completes the linking of the given program. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf adding the file fails, it will \n\n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hip_link_state",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"hiprtc link state "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "input_type",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Type of the input data or bitcode "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "image",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Input data which is null terminated "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "image_size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the input data "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "name",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Optional name for this input "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "num_options",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the options "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "options_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of options applied to this input "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "option_values",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of option values cast to void*"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												},
												{
													"_": "HIPRTC_ERROR_INVALID_INPUT",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_ERROR_PROGRAM_CREATION_FAILURE",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a0d31deb90b120cbf8a94c30e6be27718",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "379",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "379",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcLinkComplete": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga1479cebdfe7986b909531d2ee37714b2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcLinkComplete"
			],
			"argsstring": [
				"(hiprtcLinkState hip_link_state, void **bin_out, size_t *size_out)"
			],
			"name": [
				"hiprtcLinkComplete"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcLinkState",
									"$": {
										"refid": "hiprtc_8h_1ac0b93695503e1f129f87781bbb1095d3",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_link_state"
					]
				},
				{
					"type": [
						"void **"
					],
					"declname": [
						"bin_out"
					]
				},
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"size_out"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Completes the linking of the given program. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nIf adding the data fails, it will \n\n",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hip_link_state",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"hiprtc link state "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bin_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Upon success, points to the output binary "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size_out",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of the binary is stored (optional)"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_ERROR_LINKING",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ade69dfa707075ad89d45c79d31825cba",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "398",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "398",
						"declcolumn": "14"
					}
				}
			]
		},
		"hiprtcLinkDestroy": {
			"$": {
				"kind": "function",
				"id": "group___runtime_1ga472583d0d93fa14458171969ae726c24",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hiprtcResult",
							"$": {
								"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hiprtcResult hiprtcLinkDestroy"
			],
			"argsstring": [
				"(hiprtcLinkState hip_link_state)"
			],
			"name": [
				"hiprtcLinkDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hiprtcLinkState",
									"$": {
										"refid": "hiprtc_8h_1ac0b93695503e1f129f87781bbb1095d3",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"hip_link_state"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Deletes the link instance via hiprtc APIs. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hip_link_state",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"link state instance"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "HIPRTC_SUCCESS",
													"$": {
														"refid": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hiprtcResult",
													"$": {
														"refid": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "409",
						"column": "14",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"declline": "409",
						"declcolumn": "14"
					}
				}
			]
		},
		"hipStreamCreate": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamCreate"
			],
			"argsstring": [
				"(hipStream_t *stream)"
			],
			"name": [
				"hipStreamCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an asynchronous stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nCreate a new asynchronous stream.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Valid pointer to hipStream_t. This function writes the memory with the newly created stream. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"stream"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2343",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2343",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamCreateWithFlags": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamCreateWithFlags"
			],
			"argsstring": [
				"(hipStream_t *stream, unsigned int flags)"
			],
			"name": [
				"hipStreamCreateWithFlags"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an asynchronous stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nCreate a new asynchronous stream.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See , .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to new stream "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"to control stream creation. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"stream"
							],
							"ref": [
								{
									"_": "hipStreamDefault",
									"$": {
										"refid": "group___global_defs_1ga6df5f70eb976836ab3598cacf0ffcdf9",
										"kindref": "member"
									}
								},
								{
									"_": "hipStreamNonBlocking",
									"$": {
										"refid": "group___global_defs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2360",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2360",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamCreateWithPriority": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamCreateWithPriority"
			],
			"argsstring": [
				"(hipStream_t *stream, unsigned int flags, int priority)"
			],
			"name": [
				"hipStreamCreateWithPriority"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"priority"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an asynchronous stream with the specified priority. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nCreate a new asynchronous stream with the specified priority.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See , .",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to new stream "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"to control stream creation. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "priority",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"of the stream. Lower numbers represent higher priorities. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"stream"
							],
							"ref": [
								{
									"_": "hipStreamDefault",
									"$": {
										"refid": "group___global_defs_1ga6df5f70eb976836ab3598cacf0ffcdf9",
										"kindref": "member"
									}
								},
								{
									"_": "hipStreamNonBlocking",
									"$": {
										"refid": "group___global_defs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d",
										"kindref": "member"
									}
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2378",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2378",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDeviceGetStreamPriorityRange": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga2b0709fb23b273abec8ea223ebb362bc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDeviceGetStreamPriorityRange"
			],
			"argsstring": [
				"(int *leastPriority, int *greatestPriority)"
			],
			"name": [
				"hipDeviceGetStreamPriorityRange"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"leastPriority"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"greatestPriority"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns numerical values that correspond to the least and greatest stream priority. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nReturns in *leastPriority and *greatestPriority the numerical values that correspond to the least and greatest stream priority respectively. Stream priorities follow a convention where lower numbers imply greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority]. If the user attempts to create a stream with a priority value that is outside the the meaningful range as specified by this API, the priority is automatically clamped to within the valid range. ",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "leastPriority",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer in which value corresponding to least priority is returned. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "greatestPriority",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer in which value corresponding to greatest priority is returned. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2393",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2393",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamDestroy": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamDestroy"
			],
			"argsstring": [
				"(hipStream_t stream)"
			],
			"name": [
				"hipStreamDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys the specified stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nDestroys the specified stream.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream identifier. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						"If commands are still executing on the specified stream, some may complete execution before the queue is deleted.",
						"The queue may be destroyed while some commands are still inflight, or may wait for all commands queued to the stream before destroying it.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamQuery",
													"$": {
														"refid": "group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2411",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2411",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamQuery": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamQuery"
			],
			"argsstring": [
				"(hipStream_t stream)"
			],
			"name": [
				"hipStreamQuery"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						{
							"_": "Return  if all of the operations in the specified  have completed, or  if not. ",
							"ref": [
								{
									"_": "hipSuccess",
									"$": {
										"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
										"kindref": "member"
									}
								},
								{
									"_": "hipErrorNotReady",
									"$": {
										"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
										"kindref": "member"
									}
								}
							],
							"computeroutput": [
								"stream"
							]
						}
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nThis is thread-safe and returns a snapshot of the current state of the queue. However, if other host threads are sending work to the stream, the status may change immediately after the function is called. It is typically used for debug.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to query"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotReady",
													"$": {
														"refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2427",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2427",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamSynchronize": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamSynchronize"
			],
			"argsstring": [
				"(hipStream_t stream)"
			],
			"name": [
				"hipStreamSynchronize"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Wait for all commands in stream to complete. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nThis command is host-synchronous : the host will block until the specified stream is empty.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream identifier."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						"This command follows standard null-stream semantics. Specifically, specifying the null stream will cause the command to wait for other streams on the same device to complete all pending operations.",
						"This command honors the hipDeviceLaunchBlocking flag, which controls whether the wait is active or blocking.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2448",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2448",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamWaitEvent": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamWaitEvent"
			],
			"argsstring": [
				"(hipStream_t stream, hipEvent_t event, unsigned int flags)"
			],
			"name": [
				"hipStreamWaitEvent"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipEvent_t",
									"$": {
										"refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"event"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Make the specified compute stream wait for an event. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nThis function inserts a wait operation into the specified stream. All future work submitted to  will wait until  reports completion before beginning execution.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to make wait. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "event",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"event to wait on "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"control operation [must be 0]"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"stream",
								"event"
							]
						},
						"This function only waits for commands in the current stream to complete. Notably,, this function does not impliciy wait for commands in the default stream to complete, even if the specified stream is created with hipStreamNonBlocking = 0.",
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2468",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2468",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamGetFlags": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga3249555a26439591b8873f70b39bb116",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamGetFlags"
			],
			"argsstring": [
				"(hipStream_t stream, unsigned int *flags)"
			],
			"name": [
				"hipStreamGetFlags"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Return flags associated with this stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\n\nReturn flags associated with this stream in *.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to be queried "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to an unsigned integer in which the stream's flags are returned "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"flags"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2482",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2482",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamGetPriority": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gae5a0d1e66035b157149ec10f5c7952be",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamGetPriority"
			],
			"argsstring": [
				"(hipStream_t stream, int *priority)"
			],
			"name": [
				"hipStreamGetPriority"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"priority"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Query the priority of a stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\n\nQuery the priority of a stream. The priority is returned in in priority.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to be queried "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "priority",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to an unsigned integer in which the stream's priority is returned "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2496",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2496",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamGetDevice": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga91b2d98f5530f0bd73a257fdca1abe4d",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamGetDevice"
			],
			"argsstring": [
				"(hipStream_t stream, hipDevice_t *device)"
			],
			"name": [
				"hipStreamGetDevice"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDevice_t",
									"$": {
										"refid": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the device assocaited with the stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to be queried "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "device",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"device associated with the stream "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , , , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorContextIsDestroyed",
													"$": {
														"refid": "hip__runtime__api_8h_1a6351a54f4747c7ada9963ca60ec74cf4",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorDeinitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1ace22befc51bb6dd1bdb3f0d8517b1409",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidContext",
													"$": {
														"refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceGetStreamPriorityRange",
													"$": {
														"refid": "group___stream_1ga2b0709fb23b273abec8ea223ebb362bc",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2507",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2507",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtStreamCreateWithCUMask": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gad61df06555ebdfa30784b3233ca5e13f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtStreamCreateWithCUMask"
			],
			"argsstring": [
				"(hipStream_t *stream, uint32_t cuMaskSize, const uint32_t *cuMask)"
			],
			"name": [
				"hipExtStreamCreateWithCUMask"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"cuMaskSize"
					]
				},
				{
					"type": [
						"const uint32_t *"
					],
					"declname": [
						"cuMask"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create an asynchronous stream with the specified CU mask. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nCreate a new asynchronous stream with the specified CU mask.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, application must call hipStreamDestroy.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "inout"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to new stream "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cuMaskSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of CU mask bit array passed in. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cuMask",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "Bit-vector representing the CU mask. Each active bit represents using one CU. The first 32 bits represent the first 32 CUs, and so on. If its size is greater than physical CU number (i.e., multiProcessorCount member of ), the extra elements are ignored. It is user's responsibility to make sure the input is meaningful. ",
															"ref": [
																{
																	"_": "hipDeviceProp_t",
																	"$": {
																		"refid": "structhip_device_prop__t",
																		"kindref": "compound"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							],
							"computeroutput": [
								"stream"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2527",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2527",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipExtStreamGetCUMask": {
			"$": {
				"kind": "function",
				"id": "group___stream_1gaf08dde4ae0b8acdff59bc4f5c77a261b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipExtStreamGetCUMask"
			],
			"argsstring": [
				"(hipStream_t stream, uint32_t cuMaskSize, uint32_t *cuMask)"
			],
			"name": [
				"hipExtStreamGetCUMask"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"cuMaskSize"
					]
				},
				{
					"type": [
						"uint32_t *"
					],
					"declname": [
						"cuMask"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get CU mask associated with an asynchronous stream. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"stream to be queried "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cuMaskSize",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"number of the block of memories (uint32_t *) allocated by user "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "cuMask",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to a pre-allocated block of memories (uint32_t *) in which the stream's CU mask is returned. The CU mask is returned in a chunck of 32 bits where each active bit represents one active CU "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2540",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2540",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamAddCallback": {
			"$": {
				"kind": "function",
				"id": "group___stream_1ga3e098cd7478828b2104abb41a7bb00d3",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamAddCallback"
			],
			"argsstring": [
				"(hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)"
			],
			"name": [
				"hipStreamAddCallback"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStreamCallback_t",
									"$": {
										"refid": "group___stream_1ga6d4e90ec5736f9728102be22d0559dfd",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"callback"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"userData"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Adds a callback to be called on the host after all currently enqueued items in the stream have completed. For each hipStreamAddCallback call, a callback will be executed exactly once. The callback will block later work in the stream until it is finished. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream to add callback to "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "callback",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- The function to call once preceding stream operations are complete "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "userData",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- User specified data to be passed to the callback function "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Reserved for future use, must be 0 "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidHandle",
													"$": {
														"refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , ,  ",
											"ref": [
												{
													"_": "hipStreamCreate",
													"$": {
														"refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithFlags",
													"$": {
														"refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamQuery",
													"$": {
														"refid": "group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamSynchronize",
													"$": {
														"refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitEvent",
													"$": {
														"refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamDestroy",
													"$": {
														"refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamCreateWithPriority",
													"$": {
														"refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2560",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2560",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamWaitValue32": {
			"$": {
				"kind": "function",
				"id": "group___stream_m_1gafade0b118c7ed28e1dae21cd4df0a9d6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamWaitValue32"
			],
			"argsstring": [
				"(hipStream_t stream, void *ptr, uint32_t value, unsigned int flags, uint32_t mask)"
			],
			"name": [
				"hipStreamWaitValue32"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"mask"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enqueues a wait command to the stream.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nEnqueues a wait command to the stream, all operations enqueued on this stream after this, will not execute until the defined wait condition is true.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream identifier "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to memory object allocated using 'hipMallocSignalMemory' flag "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Value to be used in compare operation "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Defines the compare operation, supported values are hipStreamWaitValueGte hipStreamWaitValueEq, hipStreamWaitValueAnd and hipStreamWaitValueNor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mask",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mask to be applied on value at memory before it is compared with value, default value is set to enable every bit"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						"hipStreamWaitValueGte: waits until *ptr&mask >= value hipStreamWaitValueEq : waits until *ptr&mask == value hipStreamWaitValueAnd: waits until ((*ptr&mask) & value) != 0 hipStreamWaitValueNor: waits until ~((*ptr&mask) | (value&mask)) != 0",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"when using 'hipStreamWaitValueNor', mask is applied on both 'value' and '*ptr'."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "Support for hipStreamWaitValue32 can be queried using '' and 'hipDeviceAttributeCanUseStreamWaitValue' flag.",
											"ref": [
												{
													"_": "hipDeviceGetAttribute()",
													"$": {
														"refid": "group___device_1ga7080a145a4239a7276e0dc22062026c1",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipExtMallocWithFlags",
													"$": {
														"refid": "group___memory_1ga3529b96082582c65b645085491e91309",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue64",
													"$": {
														"refid": "group___stream_m_1ga9ef06d564d19ef9afc11d60d20c9c541",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue64",
													"$": {
														"refid": "group___stream_m_1ga11f3abc1fff46457df89bccd5cfa87ca",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue32",
													"$": {
														"refid": "group___stream_m_1ga2520d4e1e57697edff2a85a3c03d652b",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceGetAttribute",
													"$": {
														"refid": "group___device_1ga7080a145a4239a7276e0dc22062026c1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2605",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2605",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamWaitValue64": {
			"$": {
				"kind": "function",
				"id": "group___stream_m_1ga9ef06d564d19ef9afc11d60d20c9c541",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamWaitValue64"
			],
			"argsstring": [
				"(hipStream_t stream, void *ptr, uint64_t value, unsigned int flags, uint64_t mask)"
			],
			"name": [
				"hipStreamWaitValue64"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"uint64_t"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						"uint64_t"
					],
					"declname": [
						"mask"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enqueues a wait command to the stream.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nEnqueues a wait command to the stream, all operations enqueued on this stream after this, will not execute until the defined wait condition is true.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream identifier "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to memory object allocated using 'hipMallocSignalMemory' flag "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Value to be used in compare operation "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Defines the compare operation, supported values are hipStreamWaitValueGte hipStreamWaitValueEq, hipStreamWaitValueAnd and hipStreamWaitValueNor. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mask",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mask to be applied on value at memory before it is compared with value default value is set to enable every bit"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						"hipStreamWaitValueGte: waits until *ptr&mask >= value hipStreamWaitValueEq : waits until *ptr&mask == value hipStreamWaitValueAnd: waits until ((*ptr&mask) & value) != 0 hipStreamWaitValueNor: waits until ~((*ptr&mask) | (value&mask)) != 0",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"when using 'hipStreamWaitValueNor', mask is applied on both 'value' and '*ptr'."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "Support for hipStreamWaitValue64 can be queried using '' and 'hipDeviceAttributeCanUseStreamWaitValue' flag.",
											"ref": [
												{
													"_": "hipDeviceGetAttribute()",
													"$": {
														"refid": "group___device_1ga7080a145a4239a7276e0dc22062026c1",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , ,  ",
											"ref": [
												{
													"_": "hipExtMallocWithFlags",
													"$": {
														"refid": "group___memory_1ga3529b96082582c65b645085491e91309",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue32",
													"$": {
														"refid": "group___stream_m_1gafade0b118c7ed28e1dae21cd4df0a9d6",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue64",
													"$": {
														"refid": "group___stream_m_1ga11f3abc1fff46457df89bccd5cfa87ca",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue32",
													"$": {
														"refid": "group___stream_m_1ga2520d4e1e57697edff2a85a3c03d652b",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceGetAttribute",
													"$": {
														"refid": "group___device_1ga7080a145a4239a7276e0dc22062026c1",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2639",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2639",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamWriteValue32": {
			"$": {
				"kind": "function",
				"id": "group___stream_m_1ga2520d4e1e57697edff2a85a3c03d652b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamWriteValue32"
			],
			"argsstring": [
				"(hipStream_t stream, void *ptr, uint32_t value, unsigned int flags)"
			],
			"name": [
				"hipStreamWriteValue32"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"uint32_t"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enqueues a write command to the stream.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nEnqueues a write command to the stream, write operation is performed after all earlier commands on this stream have completed the execution.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream identifier "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to a GPU accessible memory object "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Value to be written "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reserved, ignored for now, will be used in future releases"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipExtMallocWithFlags",
													"$": {
														"refid": "group___memory_1ga3529b96082582c65b645085491e91309",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue32",
													"$": {
														"refid": "group___stream_m_1ga2520d4e1e57697edff2a85a3c03d652b",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue32",
													"$": {
														"refid": "group___stream_m_1gafade0b118c7ed28e1dae21cd4df0a9d6",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue64",
													"$": {
														"refid": "group___stream_m_1ga9ef06d564d19ef9afc11d60d20c9c541",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2660",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2660",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipStreamWriteValue64": {
			"$": {
				"kind": "function",
				"id": "group___stream_m_1ga11f3abc1fff46457df89bccd5cfa87ca",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipStreamWriteValue64"
			],
			"argsstring": [
				"(hipStream_t stream, void *ptr, uint64_t value, unsigned int flags)"
			],
			"name": [
				"hipStreamWriteValue64"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"uint64_t"
					],
					"declname": [
						"value"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Enqueues a write command to the stream.[BETA]. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "\n\nEnqueues a write command to the stream, write operation is performed after all earlier commands on this stream have completed the execution.",
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Stream identifier "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to a GPU accessible memory object "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Value to be written "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- reserved, ignored for now, will be used in future releases"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  ",
											"ref": [
												{
													"_": "hipExtMallocWithFlags",
													"$": {
														"refid": "group___memory_1ga3529b96082582c65b645085491e91309",
														"kindref": "member"
													}
												},
												{
													"_": "hipFree",
													"$": {
														"refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWriteValue32",
													"$": {
														"refid": "group___stream_m_1ga2520d4e1e57697edff2a85a3c03d652b",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue32",
													"$": {
														"refid": "group___stream_m_1gafade0b118c7ed28e1dae21cd4df0a9d6",
														"kindref": "member"
													}
												},
												{
													"_": "hipStreamWaitValue64",
													"$": {
														"refid": "group___stream_m_1ga9ef06d564d19ef9afc11d60d20c9c541",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2680",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "2680",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocAsync": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocAsync"
			],
			"argsstring": [
				"(void **dev_ptr, size_t size, hipStream_t stream)"
			],
			"name": [
				"hipMallocAsync"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocates memory with stream ordered semantics. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Inserts a memory allocation operation into . A pointer to the allocated memory is returned immediately in *dptr. The allocation must not be accessed until the the allocation operation completes. The allocation comes from the memory pool associated with the stream's device.",
							"computeroutput": [
								"stream"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"The default memory pool of a device contains device memory from that device. "
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"Basic stream ordering allows future work submitted into the same stream to use the allocation. Stream query, stream synchronize, and HIP events can be used to guarantee that the allocation operation completes before work submitted in a separate stream runs. "
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"During stream capture, this function results in the creation of an allocation node. In this case, the allocation is owned by the graph instead of the memory pool. The memory pool's properties are used to set the node's creation parameters."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned device pointer of memory allocation "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of bytes to allocate "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The stream establishing the stream ordering contract and the memory pool to allocate from"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3339",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3339",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFreeAsync": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFreeAsync"
			],
			"argsstring": [
				"(void *dev_ptr, hipStream_t stream)"
			],
			"name": [
				"hipFreeAsync"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Frees memory with stream ordered semantics. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Inserts a free operation into . The allocation must not be used after stream execution reaches the free. After this API returns, accessing the memory from any subsequent work launched on the GPU or querying its pointer attributes results in undefined behavior.",
							"computeroutput": [
								"stream"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"During stream capture, this function results in the creation of a free node and must therefore be passed the address of a graph allocation."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to device memory to free "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The stream, where the destruciton will occur according to the execution order"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3364",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3364",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolTrimTo": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolTrimTo"
			],
			"argsstring": [
				"(hipMemPool_t mem_pool, size_t min_bytes_to_hold)"
			],
			"name": [
				"hipMemPoolTrimTo"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"min_bytes_to_hold"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Releases freed memory back to the OS. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Releases memory back to the OS until the pool contains fewer than  reserved bytes, or there is no more memory that the allocator can safely release. The allocator cannot release OS allocations that back outstanding asynchronous allocations. The OS allocations may happen at different granularity from the user allocations.",
							"computeroutput": [
								"min_bytes_to_keep"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										": Allocations that have not been freed count as outstanding. "
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										": Allocations that have been asynchronously freed but whose completion has not been observed on the host (eg. by a synchronize) can count as outstanding."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The memory pool to trim allocations "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "min_bytes_to_hold",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"If the pool has less than min_bytes_to_hold reserved, then the TrimTo operation is a no-op. Otherwise the memory pool will contain at least min_bytes_to_hold bytes reserved after the operation."
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3392",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3392",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolSetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolSetAttribute"
			],
			"argsstring": [
				"(hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)"
			],
			"name": [
				"hipMemPoolSetAttribute"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPoolAttr",
									"$": {
										"refid": "group___global_defs_1ga987c8e7a7e8171832a6647150854ca2e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets attributes of a memory pool. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Supported attributes are:\n",
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												{
													"_": " (value type = cuuint64_t) Amount of reserved memory in bytes to hold onto before trying to release memory back to the OS. When more than the release threshold bytes of memory are held by the memory pool, the allocator will try to release memory back to the OS on the next call to stream, event or context synchronize. (default 0)",
													"computeroutput": [
														"hipMemPoolAttrReleaseThreshold:"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow  to use memory asynchronously freed in another stream as long as a stream ordering dependency of the allocating stream on the free action exists. HIP events and null stream interactions can create the required stream ordered dependencies. (default enabled)",
													"computeroutput": [
														"hipMemPoolReuseFollowEventDependencies:",
														"hipMallocAsync"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow reuse of already completed frees when there is no dependency between the free and allocation. (default enabled)",
													"computeroutput": [
														"hipMemPoolReuseAllowOpportunistic:"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow  to insert new stream dependencies in order to establish the stream ordering required to reuse a piece of memory released by  (default enabled).",
													"computeroutput": [
														"hipMemPoolReuseAllowInternalDependencies:",
														"hipMallocAsync",
														"hipFreeAsync"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The memory pool to modify "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The attribute to modify "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the value to assign"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3431",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3431",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolGetAttribute": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolGetAttribute"
			],
			"argsstring": [
				"(hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)"
			],
			"name": [
				"hipMemPoolGetAttribute"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPoolAttr",
									"$": {
										"refid": "group___global_defs_1ga987c8e7a7e8171832a6647150854ca2e",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"attr"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"value"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets attributes of a memory pool. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Supported attributes are:\n",
							"itemizedlist": [
								{
									"listitem": [
										{
											"para": [
												{
													"_": " (value type = cuuint64_t) Amount of reserved memory in bytes to hold onto before trying to release memory back to the OS. When more than the release threshold bytes of memory are held by the memory pool, the allocator will try to release memory back to the OS on the next call to stream, event or context synchronize. (default 0)",
													"computeroutput": [
														"hipMemPoolAttrReleaseThreshold:"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow  to use memory asynchronously freed in another stream as long as a stream ordering dependency of the allocating stream on the free action exists. HIP events and null stream interactions can create the required stream ordered dependencies. (default enabled)",
													"computeroutput": [
														"hipMemPoolReuseFollowEventDependencies:",
														"hipMallocAsync"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow reuse of already completed frees when there is no dependency between the free and allocation. (default enabled)",
													"computeroutput": [
														"hipMemPoolReuseAllowOpportunistic:"
													]
												}
											]
										},
										{
											"para": [
												{
													"_": " (value type = int) Allow  to insert new stream dependencies in order to establish the stream ordering required to reuse a piece of memory released by  (default enabled).",
													"computeroutput": [
														"hipMemPoolReuseAllowInternalDependencies:",
														"hipMallocAsync",
														"hipFreeAsync"
													]
												}
											]
										}
									]
								}
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The memory pool to get attributes of "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "attr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The attribute to get "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "value",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Retrieved value"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3470",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3470",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolSetAccess": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolSetAccess"
			],
			"argsstring": [
				"(hipMemPool_t mem_pool, const hipMemAccessDesc *desc_list, size_t count)"
			],
			"name": [
				"hipMemPoolSetAccess"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemAccessDesc",
									"$": {
										"refid": "structhip_mem_access_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc_list"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Controls visibility of the specified pool between devices. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool for acccess change "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc_list",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array of access descriptors. Each descriptor instructs the access to enable for a single gpu "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of descriptors in the map array."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3488",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3488",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolGetAccess": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolGetAccess"
			],
			"argsstring": [
				"(hipMemAccessFlags *flags, hipMemPool_t mem_pool, hipMemLocation *location)"
			],
			"name": [
				"hipMemPoolGetAccess"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemAccessFlags",
									"$": {
										"refid": "group___global_defs_1gac20e3511da42142b23285e557e43facd",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemLocation",
									"$": {
										"refid": "structhip_mem_location",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"location"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the accessibility of a pool from a device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						"Returns the accessibility of the pool's memory from the specified location.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Accessibility of the memory pool from the specified location/device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool being queried "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "location",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Location/device for memory pool access"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3508",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3508",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolCreate": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolCreate"
			],
			"argsstring": [
				"(hipMemPool_t *mem_pool, const hipMemPoolProps *pool_props)"
			],
			"name": [
				"hipMemPoolCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemPoolProps",
									"$": {
										"refid": "structhip_mem_pool_props",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pool_props"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memory pool. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Creates a HIP memory pool and returns the handle in . The  determines the properties of the pool such as the backing device and IPC capabilities.",
							"computeroutput": [
								"mem_pool",
								"pool_props"
							]
						},
						"By default, the memory pool will be accessible from the device it is allocated on.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Contains createed memory pool "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pool_props",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool properties"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"Specifying hipMemHandleTypeNone creates a memory pool that will not support IPC."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , , , , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolDestroy",
													"$": {
														"refid": "group___stream_o_1ga80b27ec04a2c1884bb8faf882cd9298e",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3532",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3532",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolDestroy": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga80b27ec04a2c1884bb8faf882cd9298e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolDestroy"
			],
			"argsstring": [
				"(hipMemPool_t mem_pool)"
			],
			"name": [
				"hipMemPoolDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys the specified memory pool. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "If any pointers obtained from this pool haven't been freed or the pool has free operations that haven't completed when  is invoked, the function will return immediately and the resources associated with the pool will be released automatically once there are no more outstanding allocations.",
							"computeroutput": [
								"hipMemPoolDestroy"
							]
						},
						"Destroying the current mempool of a device sets the default mempool of that device as the current mempool for that device.",
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool for destruction"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"A device's default memory pool cannot be destroyed."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , , ,  , , , , ",
											"ref": [
												{
													"_": "hipMallocFromPoolAsync",
													"$": {
														"refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
														"kindref": "member"
													}
												},
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolCreate",
													"$": {
														"refid": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3559",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3559",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocFromPoolAsync": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocFromPoolAsync"
			],
			"argsstring": [
				"(void **dev_ptr, size_t size, hipMemPool_t mem_pool, hipStream_t stream)"
			],
			"name": [
				"hipMallocFromPoolAsync"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocates memory from a specified pool with stream ordered semantics. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Inserts an allocation operation into . A pointer to the allocated memory is returned immediately in . The allocation must not be accessed until the the allocation operation completes. The allocation comes from the specified memory pool.",
							"computeroutput": [
								"stream",
								"dev_ptr"
							]
						},
						{
							"_": "\nBasic stream ordering allows future work submitted into the same stream to use the allocation. Stream query, stream synchronize, and HIP events can be used to guarantee that the allocation operation completes before work submitted in a separate stream runs.",
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "The specified memory pool may be from a device different than that of the specified .",
											"computeroutput": [
												"stream"
											]
										}
									]
								}
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"During stream capture, this function results in the creation of an allocation node. In this case, the allocation is owned by the graph instead of the memory pool. The memory pool's properties are used to set the node's creation parameters."
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"_": ", , ,  , , , , ,",
											"ref": [
												{
													"_": "hipMallocAsync",
													"$": {
														"refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
														"kindref": "member"
													}
												},
												{
													"_": "hipFreeAsync",
													"$": {
														"refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAttribute",
													"$": {
														"refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolCreate",
													"$": {
														"refid": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolTrimTo",
													"$": {
														"refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
														"kindref": "member"
													}
												},
												{
													"_": "hipDeviceSetMemPool",
													"$": {
														"refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAttribute",
													"$": {
														"refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolSetAccess",
													"$": {
														"refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
														"kindref": "member"
													}
												},
												{
													"_": "hipMemPoolGetAccess",
													"$": {
														"refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned device pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of bytes to allocate "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The pool to allocate from "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The stream establishing the stream ordering semantic"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3593",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3593",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolExportToShareableHandle": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga929b2b894b051dec2d5df7fbad157a1f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolExportToShareableHandle"
			],
			"argsstring": [
				"(void *shared_handle, hipMemPool_t mem_pool, hipMemAllocationHandleType handle_type, unsigned int flags)"
			],
			"name": [
				"hipMemPoolExportToShareableHandle"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"shared_handle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemAllocationHandleType",
									"$": {
										"refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle_type"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Exports a memory pool to the requested handle type. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Given an IPC capable mempool, create an OS handle to share the pool with another process. A recipient process can convert the shareable handle into a mempool with . Individual pointers can then be shared with the  and  APIs. The implementation of what the shareable handle is and how it can be transferred is defined by the requested handle type.",
							"computeroutput": [
								"hipMemPoolImportFromShareableHandle",
								"hipMemPoolExportPointer",
								"hipMemPoolImportPointer"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": ": To create an IPC capable mempool, create a mempool with a  other than .",
											"computeroutput": [
												"hipMemAllocationHandleType",
												"hipMemHandleTypeNone"
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipMemPoolImportFromShareableHandle",
													"$": {
														"refid": "group___stream_o_1ga2008b5a98ecec44ecebb3618692aa894",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "shared_handle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to the location in which to store the requested handle "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pool to export "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle_type",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The type of handle to create "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Must be 0"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3620",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3620",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolImportFromShareableHandle": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga2008b5a98ecec44ecebb3618692aa894",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolImportFromShareableHandle"
			],
			"argsstring": [
				"(hipMemPool_t *mem_pool, void *shared_handle, hipMemAllocationHandleType handle_type, unsigned int flags)"
			],
			"name": [
				"hipMemPoolImportFromShareableHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"shared_handle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemAllocationHandleType",
									"$": {
										"refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle_type"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Imports a memory pool from a shared handle. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Specific allocations can be imported from the imported pool with .",
							"computeroutput": [
								"hipMemPoolImportPointer"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "Imported memory pools do not support creating new allocations. As such imported memory pools may not be used in  or  calls.",
											"computeroutput": [
												"hipDeviceSetMemPool",
												"hipMallocFromPoolAsync"
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipMemPoolExportToShareableHandle",
													"$": {
														"refid": "group___stream_o_1ga929b2b894b051dec2d5df7fbad157a1f",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned memory pool "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "shared_handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"OS handle of the pool to open "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle_type",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"The type of handle being imported "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Must be 0"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3648",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3648",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolExportPointer": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1gaafb76a90d8609a1736e9b1944ef09090",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolExportPointer"
			],
			"argsstring": [
				"(hipMemPoolPtrExportData *export_data, void *dev_ptr)"
			],
			"name": [
				"hipMemPoolExportPointer"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPoolPtrExportData",
									"$": {
										"refid": "structhip_mem_pool_ptr_export_data",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"export_data"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"dev_ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Export data to share a memory pool allocation between processes. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Constructs  for sharing a specific allocation from an already shared memory pool. The recipient process can import the allocation with the  api. The data is not a handle and may be shared through any IPC mechanism.",
							"computeroutput": [
								"export_data",
								"hipMemPoolImportPointer"
							]
						},
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "export_data",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned export data "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to memory being exported"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipMemPoolImportPointer",
													"$": {
														"refid": "group___stream_o_1ga1fdd9ab4e5d5bac53d96d053697ddc33",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3672",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3672",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemPoolImportPointer": {
			"$": {
				"kind": "function",
				"id": "group___stream_o_1ga1fdd9ab4e5d5bac53d96d053697ddc33",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemPoolImportPointer"
			],
			"argsstring": [
				"(void **dev_ptr, hipMemPool_t mem_pool, hipMemPoolPtrExportData *export_data)"
			],
			"name": [
				"hipMemPoolImportPointer"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemPool_t",
									"$": {
										"refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mem_pool"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemPoolPtrExportData",
									"$": {
										"refid": "structhip_mem_pool_ptr_export_data",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"export_data"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Import a memory pool allocation from another process. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"_": "Returns in  a pointer to the imported memory. The imported memory must not be accessed before the allocation operation completes in the exporting process. The imported memory must be freed from all importing processes before being freed in the exporting process. The pointer may be freed with  or . If  is used, the free must be completed on the importing process before the free operation on the exporting process.",
							"computeroutput": [
								"dev_ptr",
								"hipFree",
								"hipFreeAsync",
								"hipFreeAsync"
							]
						},
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "The  api may be used in the exporting process before the  operation completes in its stream as long as the  in the exporting process specifies a stream with a stream dependency on the importing process's .",
											"computeroutput": [
												"hipFreeAsync",
												"hipFreeAsync",
												"hipFreeAsync",
												"hipFreeAsync"
											]
										}
									]
								},
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotInitialized",
													"$": {
														"refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "see"
									},
									"para": [
										{
											"ref": [
												{
													"_": "hipMemPoolExportPointer",
													"$": {
														"refid": "group___stream_o_1gaafb76a90d8609a1736e9b1944ef09090",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							],
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer to imported memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mem_pool",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Memory pool from which to import a pointer "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "export_data",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Data specifying the memory to import"
													]
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "3701",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "3701",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCreateSurfaceObject": {
			"$": {
				"kind": "function",
				"id": "group___surface_1gaa06a02200e471cedeed33b9d326e9dd6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCreateSurfaceObject"
			],
			"argsstring": [
				"(hipSurfaceObject_t *pSurfObject, const hipResourceDesc *pResDesc)"
			],
			"name": [
				"hipCreateSurfaceObject"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipSurfaceObject_t",
									"$": {
										"refid": "surface__types_8h_1ae5007dccf589cfddbd3c36b4dbf0d61b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pSurfObject"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipResourceDesc",
									"$": {
										"refid": "structhip_resource_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create a surface object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pSurfObject",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of surface object to be created. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of suface object descriptor."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8385",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8385",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDestroySurfaceObject": {
			"$": {
				"kind": "function",
				"id": "group___surface_1ga1cbf692fdb56b251d7b6d4e4d3bb2006",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDestroySurfaceObject"
			],
			"argsstring": [
				"(hipSurfaceObject_t surfaceObject)"
			],
			"name": [
				"hipDestroySurfaceObject"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipSurfaceObject_t",
									"$": {
										"refid": "surface__types_8h_1ae5007dccf589cfddbd3c36b4dbf0d61b",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"surfaceObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroy a surface object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "surfaceObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Surface object to be destroyed."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8393",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8393",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipCreateTextureObject": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga8118c199ca3f347b5b5fd919bb624801",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipCreateTextureObject"
			],
			"argsstring": [
				"(hipTextureObject_t *pTexObject, const hipResourceDesc *pResDesc, const hipTextureDesc *pTexDesc, const struct hipResourceViewDesc *pResViewDesc)"
			],
			"name": [
				"hipCreateTextureObject"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pTexObject"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipResourceDesc",
									"$": {
										"refid": "structhip_resource_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResDesc"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipTextureDesc",
									"$": {
										"refid": "structhip_texture_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pTexDesc"
					]
				},
				{
					"type": [
						{
							"_": "const struct  *",
							"ref": [
								{
									"_": "hipResourceViewDesc",
									"$": {
										"refid": "structhip_resource_view_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResViewDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexObject",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the texture object to create "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to texture descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResViewDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource view descriptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorOutOfMemory",
													"$": {
														"refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										{
											"_": "3D liner filter isn't supported on GFX90A boards, on which the API  will return hipErrorNotSupported. ",
											"computeroutput": [
												"hipCreateTextureObject"
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5790",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5790",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipDestroyTextureObject": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gad62c874fe1ae049c9e93a83623b3a82f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipDestroyTextureObject"
			],
			"argsstring": [
				"(hipTextureObject_t textureObject)"
			],
			"name": [
				"hipDestroyTextureObject"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"textureObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "textureObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object to destroy"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5804",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5804",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetChannelDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gab87485da6ded39aed13c062a4570f316",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetChannelDesc"
			],
			"argsstring": [
				"(hipChannelFormatDesc *desc, hipArray_const_t array)"
			],
			"name": [
				"hipGetChannelDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the channel descriptor in an array. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to channel format descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"memory array on the device"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5815",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5815",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetTextureObjectResourceDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga5eb7e8f8a486500243cb43b0a3d11d06",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetTextureObjectResourceDesc"
			],
			"argsstring": [
				"(hipResourceDesc *pResDesc, hipTextureObject_t textureObject)"
			],
			"name": [
				"hipGetTextureObjectResourceDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipResourceDesc",
									"$": {
										"refid": "structhip_resource_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"textureObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets resource descriptor for the texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "textureObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5828",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5828",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetTextureObjectResourceViewDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga748e53ac1b10eb11d41efab0de154966",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetTextureObjectResourceViewDesc"
			],
			"argsstring": [
				"(struct hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)"
			],
			"name": [
				"hipGetTextureObjectResourceViewDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": "struct  *",
							"ref": [
								{
									"_": "hipResourceViewDesc",
									"$": {
										"refid": "structhip_resource_view_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResViewDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"textureObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets resource view descriptor for the texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResViewDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource view descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "textureObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5841",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5841",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetTextureObjectTextureDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gaf14cf44212e7191a2553d4d09e4fd665",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetTextureObjectTextureDesc"
			],
			"argsstring": [
				"(hipTextureDesc *pTexDesc, hipTextureObject_t textureObject)"
			],
			"name": [
				"hipGetTextureObjectTextureDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipTextureDesc",
									"$": {
										"refid": "structhip_texture_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pTexDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"textureObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets texture descriptor for the texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to texture descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "textureObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5854",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5854",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexObjectCreate": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga59d6d76f9ea1e4f58eb3b86958ae1ee4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexObjectCreate"
			],
			"argsstring": [
				"(hipTextureObject_t *pTexObject, const HIP_RESOURCE_DESC *pResDesc, const HIP_TEXTURE_DESC *pTexDesc, const HIP_RESOURCE_VIEW_DESC *pResViewDesc)"
			],
			"name": [
				"hipTexObjectCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pTexObject"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_RESOURCE_DESC",
									"$": {
										"refid": "struct_h_i_p___r_e_s_o_u_r_c_e___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResDesc"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_TEXTURE_DESC",
									"$": {
										"refid": "struct_h_i_p___t_e_x_t_u_r_e___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pTexDesc"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_RESOURCE_VIEW_DESC",
									"$": {
										"refid": "struct_h_i_p___r_e_s_o_u_r_c_e___v_i_e_w___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResViewDesc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexObject",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to texture object to create "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to texture descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResViewDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource view descriptor"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5869",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5869",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexObjectDestroy": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga9df0487a59efcdb063feecb770fa56c2",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexObjectDestroy"
			],
			"argsstring": [
				"(hipTextureObject_t texObject)"
			],
			"name": [
				"hipTexObjectDestroy"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"texObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroys a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object to destroy"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5883",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5883",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexObjectGetResourceDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gac136126d65935da5ca274ac628aa67a4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexObjectGetResourceDesc"
			],
			"argsstring": [
				"(HIP_RESOURCE_DESC *pResDesc, hipTextureObject_t texObject)"
			],
			"name": [
				"hipTexObjectGetResourceDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_RESOURCE_DESC",
									"$": {
										"refid": "struct_h_i_p___r_e_s_o_u_r_c_e___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"texObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets resource descriptor of a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5895",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5895",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexObjectGetResourceViewDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gac7b4b7bc09c32e2f2e25dbba07876a32",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexObjectGetResourceViewDesc"
			],
			"argsstring": [
				"(HIP_RESOURCE_VIEW_DESC *pResViewDesc, hipTextureObject_t texObject)"
			],
			"name": [
				"hipTexObjectGetResourceViewDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_RESOURCE_VIEW_DESC",
									"$": {
										"refid": "struct_h_i_p___r_e_s_o_u_r_c_e___v_i_e_w___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pResViewDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"texObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets resource view descriptor of a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pResViewDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to resource view descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5908",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5908",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexObjectGetTextureDesc": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga7d65d4114af2b8ccc803a3bd7f40badd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexObjectGetTextureDesc"
			],
			"argsstring": [
				"(HIP_TEXTURE_DESC *pTexDesc, hipTextureObject_t texObject)"
			],
			"name": [
				"hipTexObjectGetTextureDesc"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_TEXTURE_DESC",
									"$": {
										"refid": "struct_h_i_p___t_e_x_t_u_r_e___d_e_s_c",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pTexDesc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipTextureObject_t",
									"$": {
										"refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"texObject"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets texture descriptor of a texture object. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pTexDesc",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to texture descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texObject",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture object"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5921",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5921",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMallocMipmappedArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gace6d42a4c294a5fe5cb9a383aca7eb36",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMallocMipmappedArray"
			],
			"argsstring": [
				"(hipMipmappedArray_t *mipmappedArray, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags)"
			],
			"name": [
				"hipMallocMipmappedArray"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t *"
					],
					"declname": [
						"mipmappedArray"
					]
				},
				{
					"type": [
						{
							"_": "const struct  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						{
							"_": "struct ",
							"ref": [
								{
									"_": "hipExtent",
									"$": {
										"refid": "structhip_extent",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"extent"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numLevels"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Allocate a mipmapped array on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmappedArray",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to allocated mipmapped array in device memory "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Requested channel format "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "extent",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Requested allocation size (width field in elements) "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numLevels",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Number of mipmap levels to allocate "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Flags for extensions"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorMemoryAllocation",
													"$": {
														"refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5939",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5939",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipFreeMipmappedArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga0255fc720bfe4164717b99dbd7c954c4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipFreeMipmappedArray"
			],
			"argsstring": [
				"(hipMipmappedArray_t mipmappedArray)"
			],
			"name": [
				"hipFreeMipmappedArray"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t"
					],
					"declname": [
						"mipmappedArray"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Frees a mipmapped array on the device. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmappedArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Pointer to mipmapped array to free"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5956",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5956",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetMipmappedArrayLevel": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga1ecc39df7764a7dcd5dad7149ffb2bc5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetMipmappedArrayLevel"
			],
			"argsstring": [
				"(hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)"
			],
			"name": [
				"hipGetMipmappedArrayLevel"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"levelArray"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMipmappedArray_const_t",
									"$": {
										"refid": "driver__types_8h_1ad3a2249d04845db4cddf271c474058f6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mipmappedArray"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"level"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets a mipmap level of a HIP mipmapped array. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "levelArray",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Returned mipmap level HIP array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmappedArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- HIP mipmapped array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "level",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- Mipmap level"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5970",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5970",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMipmappedArrayCreate": {
			"$": {
				"kind": "function",
				"id": "group___texture_1gaadd49ed1c8e2c4d90adb8211779d971f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMipmappedArrayCreate"
			],
			"argsstring": [
				"(hipMipmappedArray_t *pHandle, HIP_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels)"
			],
			"name": [
				"hipMipmappedArrayCreate"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t *"
					],
					"declname": [
						"pHandle"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "HIP_ARRAY3D_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y3_d___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"pMipmappedArrayDesc"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"numMipmapLevels"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Create a mipmapped array. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pHandle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to mipmapped array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pMipmappedArrayDesc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"mipmapped array descriptor "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "numMipmapLevels",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"mipmap level"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "5986",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "5986",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMipmappedArrayDestroy": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga4e5dd69cb90ff4d93aab4d6bff2cbcda",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMipmappedArrayDestroy"
			],
			"argsstring": [
				"(hipMipmappedArray_t hMipmappedArray)"
			],
			"name": [
				"hipMipmappedArrayDestroy"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t"
					],
					"declname": [
						"hMipmappedArray"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Destroy a mipmapped array. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hMipmappedArray",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to mipmapped array to destroy"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6001",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6001",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMipmappedArrayGetLevel": {
			"$": {
				"kind": "function",
				"id": "group___texture_1ga4c2ebc58183765e20a8216ee5660ff75",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMipmappedArrayGetLevel"
			],
			"argsstring": [
				"(hipArray_t *pLevelArray, hipMipmappedArray_t hMipMappedArray, unsigned int level)"
			],
			"name": [
				"hipMipmappedArrayGetLevel"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pLevelArray"
					]
				},
				{
					"type": [
						"hipMipmappedArray_t"
					],
					"declname": [
						"hMipMappedArray"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"level"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get a mipmapped array on a mipmapped level. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pLevelArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of array "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "hMipMappedArray",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of mipmapped array on the requested mipmap level "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "level",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Mipmap level"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Windows, under development on Linux. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6015",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6015",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipBindTextureToMipmappedArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga1c182e356b3796fc11a6064685a4f29c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipBindTextureToMipmappedArray"
			],
			"argsstring": [
				"(const textureReference *tex, hipMipmappedArray_const_t mipmappedArray, const hipChannelFormatDesc *desc)"
			],
			"name": [
				"hipBindTextureToMipmappedArray"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMipmappedArray_const_t",
									"$": {
										"refid": "driver__types_8h_1ad3a2249d04845db4cddf271c474058f6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"mipmappedArray"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds a mipmapped array to a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the texture reference to bind "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmappedArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"memory mipmapped array on the device "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"opointer to the channel format"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6039",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6039",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetTextureReference": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaec97b7e9649423af9198a13ac73dcdd4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetTextureReference"
			],
			"argsstring": [
				"(const textureReference **texref, const void *symbol)"
			],
			"name": [
				"hipGetTextureReference"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  **",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texref"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"symbol"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the texture reference related with the symbol. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texref",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture reference "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "symbol",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"pointer to the symbol related with the texture for the reference"
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6055",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6055",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetBorderColor": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga68ae56351534358e74ef7d9e24efeab9",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetBorderColor"
			],
			"argsstring": [
				"(float *pBorderColor, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetBorderColor"
			],
			"param": [
				{
					"type": [
						"float *"
					],
					"declname": [
						"pBorderColor"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the border color used by a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pBorderColor",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned Type and Value of RGBA color. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6070",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6070",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga9041baa58925270638c3035c65f5ce77",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetArray"
			],
			"argsstring": [
				"(hipArray_t *pArray, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_t",
									"$": {
										"refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pArray"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the array bound to a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Returned array. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6084",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6084",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetAddressMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga9c70e94c59c441a3903411256213a963",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetAddressMode"
			],
			"argsstring": [
				"(textureReference *texRef, int dim, enum hipTextureAddressMode am)"
			],
			"name": [
				"hipTexRefSetAddressMode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"dim"
					]
				},
				{
					"type": [
						{
							"_": "enum ",
							"ref": [
								{
									"_": "hipTextureAddressMode",
									"$": {
										"refid": "texture__types_8h_1a80ce4b7218b586b656e80d76817967ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"am"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets address mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dimension of the texture. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "am",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of the texture address mode."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ",  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6098",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6098",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gad3c3a2a7797c96b9f53b4eab7b27b0c6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetArray"
			],
			"argsstring": [
				"(textureReference *tex, hipArray_const_t array, unsigned int flags)"
			],
			"name": [
				"hipTexRefSetArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds an array as a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags should be set as HIP_TRSA_OVERRIDE_FORMAT, as a valid value."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6115",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6115",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetFilterMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga3f05947e0dc31a7861ee27002b9aa6a8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetFilterMode"
			],
			"argsstring": [
				"(textureReference *texRef, enum hipTextureFilterMode fm)"
			],
			"name": [
				"hipTexRefSetFilterMode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"_": "enum ",
							"ref": [
								{
									"_": "hipTextureFilterMode",
									"$": {
										"refid": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"fm"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set filter mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "fm",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of texture filter mode."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6131",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6131",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetFlags": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga939238805ce9e7dca127927147058ada",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetFlags"
			],
			"argsstring": [
				"(textureReference *texRef, unsigned int Flags)"
			],
			"name": [
				"hipTexRefSetFlags"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"Flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set flags for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "Flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of flags."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6146",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6146",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetFormat": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga6d207019c4165bcee452508d7451ca41",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetFormat"
			],
			"argsstring": [
				"(textureReference *texRef, hipArray_Format fmt, int NumPackedComponents)"
			],
			"name": [
				"hipTexRefSetFormat"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_Format",
									"$": {
										"refid": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"fmt"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"NumPackedComponents"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set format for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "fmt",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of format. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "NumPackedComponents",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Number of components per array."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6162",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6162",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipBindTexture": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga5e5e058031ab88c41cf662fd29f491ac",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipBindTexture"
			],
			"argsstring": [
				"(size_t *offset, const textureReference *tex, const void *devPtr, const hipChannelFormatDesc *desc, size_t size)"
			],
			"name": [
				"hipBindTexture"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds a memory area to a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Texture to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of memory on the device. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of channel format descriptor. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size of memory in bites."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6181",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6181",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipBindTexture2D": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga5a2db1f1c95fa9d31ba5240a3a88d4cd",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipBindTexture2D"
			],
			"argsstring": [
				"(size_t *offset, const textureReference *tex, const void *devPtr, const hipChannelFormatDesc *desc, size_t width, size_t height, size_t pitch)"
			],
			"name": [
				"hipBindTexture2D"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				},
				{
					"type": [
						"const void *"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"width"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"height"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"pitch"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds a 2D memory area to a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Texture to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of 2D memory area on the device. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of channel format descriptor. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "width",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Width in texel units. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "height",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Height in texel units. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch in bytes."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6204",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6204",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipBindTextureToArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaddd135091fa603870fd34d04b0a59c58",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipBindTextureToArray"
			],
			"argsstring": [
				"(const textureReference *tex, hipArray_const_t array, const hipChannelFormatDesc *desc)"
			],
			"name": [
				"hipBindTextureToArray"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipArray_const_t",
									"$": {
										"refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"array"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipChannelFormatDesc",
									"$": {
										"refid": "structhip_channel_format_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds a memory area to a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "array",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Array to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of channel format descriptor."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6225",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6225",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetTextureAlignmentOffset": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga53edad6565b3244b8713f6aee42d9c9f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetTextureAlignmentOffset"
			],
			"argsstring": [
				"(size_t *offset, const textureReference *texref)"
			],
			"name": [
				"hipGetTextureAlignmentOffset"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texref"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the offset of the alignment in a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Offset in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texref",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6241",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6241",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipUnbindTexture": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga6082a76377229793500a21caf249794f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipUnbindTexture"
			],
			"argsstring": [
				"(const textureReference *tex)"
			],
			"name": [
				"hipUnbindTexture"
			],
			"param": [
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"tex"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Unbinds a texture. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "tex",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Texture to unbind."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6255",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6255",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetAddress": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga8f58bdd1cbbeee60fba3ec4bfcd74515",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetAddress"
			],
			"argsstring": [
				"(hipDeviceptr_t *dev_ptr, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetAddress"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dev_ptr"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the the address for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dev_ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of device address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6268",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6268",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetAddressMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga28e2b18b9fa55bab5983e88ad62a4c9f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetAddressMode"
			],
			"argsstring": [
				"(enum hipTextureAddressMode *pam, const textureReference *texRef, int dim)"
			],
			"name": [
				"hipTexRefGetAddressMode"
			],
			"param": [
				{
					"type": [
						{
							"_": "enum  *",
							"ref": [
								{
									"_": "hipTextureAddressMode",
									"$": {
										"refid": "texture__types_8h_1a80ce4b7218b586b656e80d76817967ca",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pam"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"dim"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the address mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pam",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of address mode. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dim",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Dimension."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6284",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6284",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetFilterMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga07d91c8480153c3b38ca6d02a03980b8",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetFilterMode"
			],
			"argsstring": [
				"(enum hipTextureFilterMode *pfm, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetFilterMode"
			],
			"param": [
				{
					"type": [
						{
							"_": "enum  *",
							"ref": [
								{
									"_": "hipTextureFilterMode",
									"$": {
										"refid": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pfm"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets filter mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pfm",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of filter mode. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6300",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6300",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetFlags": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga29eca0fa3db8bc4cdcceac1aebf47c9a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetFlags"
			],
			"argsstring": [
				"(unsigned int *pFlags, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetFlags"
			],
			"param": [
				{
					"type": [
						"unsigned int *"
					],
					"declname": [
						"pFlags"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets flags for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pFlags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of flags. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6315",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6315",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetFormat": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaf7221d495964939f7dd1eea0b133efcc",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetFormat"
			],
			"argsstring": [
				"(hipArray_Format *pFormat, int *pNumChannels, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetFormat"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArray_Format",
									"$": {
										"refid": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pFormat"
					]
				},
				{
					"type": [
						"int *"
					],
					"declname": [
						"pNumChannels"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets texture format for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pFormat",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the format. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pNumChannels",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of number of channels. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6331",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6331",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetMaxAnisotropy": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga5b8f516d89303a5ade97dd885f373bf6",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetMaxAnisotropy"
			],
			"argsstring": [
				"(int *pmaxAnsio, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetMaxAnisotropy"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"pmaxAnsio"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the maximum anisotropy for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pmaxAnsio",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the maximum anisotropy. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6347",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6347",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetMipmapFilterMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga471218ad91920133054b83d6273bee14",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetMipmapFilterMode"
			],
			"argsstring": [
				"(enum hipTextureFilterMode *pfm, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetMipmapFilterMode"
			],
			"param": [
				{
					"type": [
						{
							"_": "enum  *",
							"ref": [
								{
									"_": "hipTextureFilterMode",
									"$": {
										"refid": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"pfm"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the mipmap filter mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pfm",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the mipmap filter mode. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6362",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6362",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetMipmapLevelBias": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gadd1c0a0ec8edc555f477642546e0bd3a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetMipmapLevelBias"
			],
			"argsstring": [
				"(float *pbias, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetMipmapLevelBias"
			],
			"param": [
				{
					"type": [
						"float *"
					],
					"declname": [
						"pbias"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the mipmap level bias for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pbias",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the mipmap level bias. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6377",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6377",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetMipmapLevelClamp": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga21cb9dcdc8829ab01f40ee0a3b59ddb0",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetMipmapLevelClamp"
			],
			"argsstring": [
				"(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetMipmapLevelClamp"
			],
			"param": [
				{
					"type": [
						"float *"
					],
					"declname": [
						"pminMipmapLevelClamp"
					]
				},
				{
					"type": [
						"float *"
					],
					"declname": [
						"pmaxMipmapLevelClamp"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the minimum and maximum mipmap level clamps for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pminMipmapLevelClamp",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the minimum mipmap level clamp. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pmaxMipmapLevelClamp",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the maximum mipmap level clamp. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6393",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6393",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefGetMipMappedArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaa0d2ebbb5c3b7e1e71a4b449936da801",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefGetMipMappedArray"
			],
			"argsstring": [
				"(hipMipmappedArray_t *pArray, const textureReference *texRef)"
			],
			"name": [
				"hipTexRefGetMipMappedArray"
			],
			"param": [
				{
					"type": [
						"hipMipmappedArray_t *"
					],
					"declname": [
						"pArray"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Gets the mipmapped array bound to a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pArray",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the mipmapped array. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6409",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6409",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetAddress": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga39e9dac1975f1007f173c00454ceaf87",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetAddress"
			],
			"argsstring": [
				"(size_t *ByteOffset, textureReference *texRef, hipDeviceptr_t dptr, size_t bytes)"
			],
			"name": [
				"hipTexRefSetAddress"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"ByteOffset"
					]
				},
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"bytes"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets an bound address for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ByteOffset",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of the offset in bytes. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of device address to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bytes",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Size in bytes."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6426",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6426",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetAddress2D": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaf24188ec011b0cb0cd4194f8ef60808c",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetAddress2D"
			],
			"argsstring": [
				"(textureReference *texRef, const HIP_ARRAY_DESCRIPTOR *desc, hipDeviceptr_t dptr, size_t Pitch)"
			],
			"name": [
				"hipTexRefSetAddress2D"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "HIP_ARRAY_DESCRIPTOR",
									"$": {
										"refid": "struct_h_i_p___a_r_r_a_y___d_e_s_c_r_i_p_t_o_r",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipDeviceptr_t",
									"$": {
										"refid": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"dptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"Pitch"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set a bind an address as a 2D texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of array descriptor. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "dptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of device address to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "Pitch",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pitch in bytes."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6445",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6445",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetMaxAnisotropy": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gabeb3f31407bb518ccda9b0183bc6c03f",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetMaxAnisotropy"
			],
			"argsstring": [
				"(textureReference *texRef, unsigned int maxAniso)"
			],
			"name": [
				"hipTexRefSetMaxAnisotropy"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"maxAniso"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets the maximum anisotropy for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "maxAniso",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of the maximum anisotropy."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6462",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6462",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetBorderColor": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gad021c81371c1596e16cf28390799e8f5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetBorderColor"
			],
			"argsstring": [
				"(textureReference *texRef, float *pBorderColor)"
			],
			"name": [
				"hipTexRefSetBorderColor"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"float *"
					],
					"declname": [
						"pBorderColor"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets border color for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "pBorderColor",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of border color."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6477",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6477",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetMipmapFilterMode": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gaf3b8771e6dac8d8c0284a546e550c24e",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetMipmapFilterMode"
			],
			"argsstring": [
				"(textureReference *texRef, enum hipTextureFilterMode fm)"
			],
			"name": [
				"hipTexRefSetMipmapFilterMode"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"_": "enum ",
							"ref": [
								{
									"_": "hipTextureFilterMode",
									"$": {
										"refid": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"fm"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets mipmap filter mode for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "fm",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of filter mode."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6492",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6492",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetMipmapLevelBias": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gad81d7049385e4031a4b2f1167e880950",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetMipmapLevelBias"
			],
			"argsstring": [
				"(textureReference *texRef, float bias)"
			],
			"name": [
				"hipTexRefSetMipmapLevelBias"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"float"
					],
					"declname": [
						"bias"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets mipmap level bias for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "bias",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of mipmap bias."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6507",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6507",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetMipmapLevelClamp": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1gac5b5f689eacd90c7a638c7e3c955d722",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetMipmapLevelClamp"
			],
			"argsstring": [
				"(textureReference *texRef, float minMipMapLevelClamp, float maxMipMapLevelClamp)"
			],
			"name": [
				"hipTexRefSetMipmapLevelClamp"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						"float"
					],
					"declname": [
						"minMipMapLevelClamp"
					]
				},
				{
					"type": [
						"float"
					],
					"declname": [
						"maxMipMapLevelClamp"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Sets mipmap level clamp for a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "minMipMapLevelClamp",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of minimum mipmap level clamp. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "maxMipMapLevelClamp",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Value of maximum mipmap level clamp."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", , ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6523",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6523",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipTexRefSetMipmappedArray": {
			"$": {
				"kind": "function",
				"id": "group___texture_d_1ga43f9441244f526a4552852040a28e0ef",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipTexRefSetMipmappedArray"
			],
			"argsstring": [
				"(textureReference *texRef, struct hipMipmappedArray *mipmappedArray, unsigned int Flags)"
			],
			"name": [
				"hipTexRefSetMipmappedArray"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "textureReference",
									"$": {
										"refid": "structtexture_reference",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"texRef"
					]
				},
				{
					"type": [
						{
							"_": "struct  *",
							"ref": [
								{
									"_": "hipMipmappedArray",
									"$": {
										"refid": "structhip_mipmapped_array",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"mipmappedArray"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"Flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Binds mipmapped array to a texture reference. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "texRef",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of texture reference to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mipmappedArray",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Pointer of mipmapped array to bind. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "Flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"Flags should be set as HIP_TRSA_OVERRIDE_FORMAT, as a valid value."
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"This API is deprecated. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "6540",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "6540",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemAddressFree": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga0e8ce3b43894e908fb88c0a74d71cb32",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemAddressFree"
			],
			"argsstring": [
				"(void *devPtr, size_t size)"
			],
			"name": [
				"hipMemAddressFree"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"devPtr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Frees an address range reservation made via hipMemAddressReserve. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "devPtr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- starting address of the range. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the range. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8100",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8100",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemAddressReserve": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1gaa9787c99a5a2db730bfc392a2ff3de18",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemAddressReserve"
			],
			"argsstring": [
				"(void **ptr, size_t size, size_t alignment, void *addr, unsigned long long flags)"
			],
			"name": [
				"hipMemAddressReserve"
			],
			"param": [
				{
					"type": [
						"void **"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"alignment"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"addr"
					]
				},
				{
					"type": [
						"unsigned long long"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Reserves an address range. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- starting address of the reserved range. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the reservation. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "alignment",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- alignment of the address. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "addr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- requested starting address of the range. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- currently unused, must be zero. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8116",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8116",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemCreate": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga906e9c4cc3f6e8bda1116cea1e12bdc5",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemCreate"
			],
			"argsstring": [
				"(hipMemGenericAllocationHandle_t *handle, size_t size, const hipMemAllocationProp *prop, unsigned long long flags)"
			],
			"name": [
				"hipMemCreate"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemAllocationProp",
									"$": {
										"refid": "structhip_mem_allocation_prop",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				},
				{
					"type": [
						"unsigned long long"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Creates a memory allocation described by the properties and size. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- value of the returned handle. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the allocation. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prop",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- properties of the allocation. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- currently unused, must be zero. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8131",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8131",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemExportToShareableHandle": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga248353e17dd95b4514d8ee979cc07175",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemExportToShareableHandle"
			],
			"argsstring": [
				"(void *shareableHandle, hipMemGenericAllocationHandle_t handle, hipMemAllocationHandleType handleType, unsigned long long flags)"
			],
			"name": [
				"hipMemExportToShareableHandle"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"shareableHandle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemAllocationHandleType",
									"$": {
										"refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handleType"
					]
				},
				{
					"type": [
						"unsigned long long"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Exports an allocation to a requested shareable handle type. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "shareableHandle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- value of the returned handle. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- handle to share. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handleType",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- type of the shareable handle. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- currently unused, must be zero. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8146",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8146",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemGetAccess": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga41b61f25f37df6b86084e09f7906c74b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemGetAccess"
			],
			"argsstring": [
				"(unsigned long long *flags, const hipMemLocation *location, void *ptr)"
			],
			"name": [
				"hipMemGetAccess"
			],
			"param": [
				{
					"type": [
						"unsigned long long *"
					],
					"declname": [
						"flags"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemLocation",
									"$": {
										"refid": "structhip_mem_location",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"location"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Get the access flags set for the given location and ptr. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- flags for this location. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "location",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- target location. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- address to check the access flags. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8160",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8160",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemGetAllocationGranularity": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga64aa4fd4fea31e1c0e291cca605c9821",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemGetAllocationGranularity"
			],
			"argsstring": [
				"(size_t *granularity, const hipMemAllocationProp *prop, hipMemAllocationGranularity_flags option)"
			],
			"name": [
				"hipMemGetAllocationGranularity"
			],
			"param": [
				{
					"type": [
						"size_t *"
					],
					"declname": [
						"granularity"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemAllocationProp",
									"$": {
										"refid": "structhip_mem_allocation_prop",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemAllocationGranularity_flags",
									"$": {
										"refid": "group___global_defs_1gac339d242785822f679962c10b45037c8",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"option"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Calculates either the minimal or recommended granularity. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "granularity",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returned granularity. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prop",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- location properties. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "option",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- determines which granularity to return. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8175",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8175",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemGetAllocationPropertiesFromHandle": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1gab4d484e2b8da613694a48738817f4b24",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemGetAllocationPropertiesFromHandle"
			],
			"argsstring": [
				"(hipMemAllocationProp *prop, hipMemGenericAllocationHandle_t handle)"
			],
			"name": [
				"hipMemGetAllocationPropertiesFromHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemAllocationProp",
									"$": {
										"refid": "structhip_mem_allocation_prop",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Retrieve the property structure of the given handle. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "prop",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- properties of the given handle. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- handle to perform the query on. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8188",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8188",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemImportFromShareableHandle": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1gacf32ac2b8aa367302c606a6eefadb4f1",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemImportFromShareableHandle"
			],
			"argsstring": [
				"(hipMemGenericAllocationHandle_t *handle, void *osHandle, hipMemAllocationHandleType shHandleType)"
			],
			"name": [
				"hipMemImportFromShareableHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"osHandle"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemAllocationHandleType",
									"$": {
										"refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"shHandleType"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Imports an allocation from a requested shareable handle type. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- returned value. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "osHandle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- shareable handle representing the memory allocation. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "shHandleType",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- handle type. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8202",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8202",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemMap": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1gaa921e5167a69151f8e89d3e61ae811b7",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemMap"
			],
			"argsstring": [
				"(void *ptr, size_t size, size_t offset, hipMemGenericAllocationHandle_t handle, unsigned long long flags)"
			],
			"name": [
				"hipMemMap"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"offset"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"unsigned long long"
					],
					"declname": [
						"flags"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Maps an allocation handle to a reserved virtual address range. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- address where the memory will be mapped. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the mapping. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "offset",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- offset into the memory, currently must be zero. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- memory allocation to be mapped. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "flags",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- currently unused, must be zero. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8218",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8218",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemMapArrayAsync": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1gaceac55fcd2ca672259ef929d4e0461c4",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemMapArrayAsync"
			],
			"argsstring": [
				"(hipArrayMapInfo *mapInfoList, unsigned int count, hipStream_t stream)"
			],
			"name": [
				"hipMemMapArrayAsync"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipArrayMapInfo",
									"$": {
										"refid": "structhip_array_map_info",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"mapInfoList"
					]
				},
				{
					"type": [
						"unsigned int"
					],
					"declname": [
						"count"
					]
				},
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipStream_t",
									"$": {
										"refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"stream"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Maps or unmaps subregions of sparse HIP arrays and sparse HIP mipmapped arrays. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "mapInfoList",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "- list of . ",
															"ref": [
																{
																	"_": "hipArrayMapInfo",
																	"$": {
																		"refid": "structhip_array_map_info",
																		"kindref": "compound"
																	}
																}
															]
														}
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "- number of  in mapInfoList. ",
															"ref": [
																{
																	"_": "hipArrayMapInfo",
																	"$": {
																		"refid": "structhip_array_map_info",
																		"kindref": "compound"
																	}
																}
															]
														}
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "stream",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- stream identifier for the stream to use for map or unmap operations. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8232",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8232",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemRelease": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga4fe4c9887e5ce1ffd0f3d967f76ae91a",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemRelease"
			],
			"argsstring": [
				"(hipMemGenericAllocationHandle_t handle)"
			],
			"name": [
				"hipMemRelease"
			],
			"param": [
				{
					"type": [
						{
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Release a memory handle representing a memory allocation which was previously allocated through hipMemCreate. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- handle of the memory allocation. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8244",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8244",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemRetainAllocationHandle": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga67a29a33c4e047c4c3663a0695676742",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemRetainAllocationHandle"
			],
			"argsstring": [
				"(hipMemGenericAllocationHandle_t *handle, void *addr)"
			],
			"name": [
				"hipMemRetainAllocationHandle"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipMemGenericAllocationHandle_t",
									"$": {
										"refid": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
										"kindref": "member"
									}
								}
							]
						}
					],
					"declname": [
						"handle"
					]
				},
				{
					"type": [
						"void *"
					],
					"declname": [
						"addr"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Returns the allocation handle of the backing memory allocation given the address. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "handle",
															"$": {
																"direction": "out"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- handle representing addr. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "addr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- address to look up. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8257",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8257",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemSetAccess": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga42ecac69e5ed389aaf287522d1a61305",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemSetAccess"
			],
			"argsstring": [
				"(void *ptr, size_t size, const hipMemAccessDesc *desc, size_t count)"
			],
			"name": [
				"hipMemSetAccess"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipMemAccessDesc",
									"$": {
										"refid": "structhip_mem_access_desc",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"desc"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"count"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Set the access flags for each location specified in desc for the given virtual address range. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- starting address of the virtual address range. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the range. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "desc",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "- array of . ",
															"ref": [
																{
																	"_": "hipMemAccessDesc",
																	"$": {
																		"refid": "structhip_mem_access_desc",
																		"kindref": "compound"
																	}
																}
															]
														}
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "count",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														{
															"_": "- number of  in desc. ",
															"ref": [
																{
																	"_": "hipMemAccessDesc",
																	"$": {
																		"refid": "structhip_mem_access_desc",
																		"kindref": "compound"
																	}
																}
															]
														}
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8272",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8272",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipMemUnmap": {
			"$": {
				"kind": "function",
				"id": "group___virtual_1ga614612815d3f36c73de75ad47b24f110",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipMemUnmap"
			],
			"argsstring": [
				"(void *ptr, size_t size)"
			],
			"name": [
				"hipMemUnmap"
			],
			"param": [
				{
					"type": [
						"void *"
					],
					"declname": [
						"ptr"
					]
				},
				{
					"type": [
						"size_t"
					],
					"declname": [
						"size"
					]
				}
			],
			"briefdescription": [
				{
					"para": [
						"Unmap memory allocation of a given address range. "
					]
				}
			],
			"detaileddescription": [
				{
					"para": [
						{
							"parameterlist": [
								{
									"$": {
										"kind": "param"
									},
									"parameteritem": [
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "ptr",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- starting address of the range to unmap. "
													]
												}
											]
										},
										{
											"parameternamelist": [
												{
													"parametername": [
														{
															"_": "size",
															"$": {
																"direction": "in"
															}
														}
													]
												}
											],
											"parameterdescription": [
												{
													"para": [
														"- size of the virtual address range. "
													]
												}
											]
										}
									]
								}
							],
							"simplesect": [
								{
									"$": {
										"kind": "return"
									},
									"para": [
										{
											"_": ", ,  ",
											"ref": [
												{
													"_": "hipSuccess",
													"$": {
														"refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorInvalidValue",
													"$": {
														"refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
														"kindref": "member"
													}
												},
												{
													"_": "hipErrorNotSupported",
													"$": {
														"refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
														"kindref": "member"
													}
												}
											]
										}
									]
								},
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
									]
								},
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This API is implemented on Linux, under development on Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "8285",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"declline": "8285",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipGetDevicePropertiesR0000": {
			"$": {
				"kind": "function",
				"id": "hip__deprecated_8h_1ac7f235e38807df316a5b6aaec6a5905b",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipGetDevicePropertiesR0000"
			],
			"argsstring": [
				"(hipDeviceProp_tR0000 *prop, int device)"
			],
			"name": [
				"hipGetDevicePropertiesR0000"
			],
			"param": [
				{
					"type": [
						{
							"_": " *",
							"ref": [
								{
									"_": "hipDeviceProp_tR0000",
									"$": {
										"refid": "structhip_device_prop__t_r0000",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				},
				{
					"type": [
						"int"
					],
					"declname": [
						"device"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_deprecated.h",
						"line": "90",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_deprecated.h",
						"declline": "90",
						"declcolumn": "12"
					}
				}
			]
		},
		"hipChooseDeviceR0000": {
			"$": {
				"kind": "function",
				"id": "hip__deprecated_8h_1a89dceaa197d6731fd9887690692eab24",
				"prot": "public",
				"static": "no",
				"const": "no",
				"explicit": "no",
				"inline": "no",
				"virt": "non-virtual"
			},
			"type": [
				{
					"ref": [
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"hipError_t hipChooseDeviceR0000"
			],
			"argsstring": [
				"(int *device, const hipDeviceProp_tR0000 *prop)"
			],
			"name": [
				"hipChooseDeviceR0000"
			],
			"param": [
				{
					"type": [
						"int *"
					],
					"declname": [
						"device"
					]
				},
				{
					"type": [
						{
							"_": "const  *",
							"ref": [
								{
									"_": "hipDeviceProp_tR0000",
									"$": {
										"refid": "structhip_device_prop__t_r0000",
										"kindref": "compound"
									}
								}
							]
						}
					],
					"declname": [
						"prop"
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_deprecated.h",
						"line": "91",
						"column": "12",
						"declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_deprecated.h",
						"declline": "91",
						"declcolumn": "12"
					}
				}
			]
		}
	},
	"enums": {
		"hipChannelFormatKind": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a098cc20d3d4d7491e6fd551b92ddfe13",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipChannelFormatKind"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a098cc20d3d4d7491e6fd551b92ddfe13ab02387829e0e6ba8ecfe50ff48bb01ed",
						"prot": "public"
					},
					"name": [
						"hipChannelFormatKindSigned"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a098cc20d3d4d7491e6fd551b92ddfe13aaaa9627a55441642dc6b979eea7a5aac",
						"prot": "public"
					},
					"name": [
						"hipChannelFormatKindUnsigned"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a098cc20d3d4d7491e6fd551b92ddfe13a3e7aa403938413ba94916c95c505e18f",
						"prot": "public"
					},
					"name": [
						"hipChannelFormatKindFloat"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a098cc20d3d4d7491e6fd551b92ddfe13a6c3c97c39f7019c1625cdc185cb3a1e0",
						"prot": "public"
					},
					"name": [
						"hipChannelFormatKindNone"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "40",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "40",
						"bodyend": "45"
					}
				}
			]
		},
		"hipArray_Format": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipArray_Format"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a52dbf377a1ffb064a876da381375774d",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_UNSIGNED_INT8"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a0f95f2b5739bb056295a56c2fea57643",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_UNSIGNED_INT16"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a372c9193990708f356a9db791bccadc7",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_UNSIGNED_INT32"
					],
					"initializer": [
						"= 0x03"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a5aa8e6092c8db4d9e4eb782126b2fb8c",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_SIGNED_INT8"
					],
					"initializer": [
						"= 0x08"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00aa1ca13303f4ecaf87f8d679de5dae027",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_SIGNED_INT16"
					],
					"initializer": [
						"= 0x09"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a5fc8dde617c05e4ceeaf14e26042e9fc",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_SIGNED_INT32"
					],
					"initializer": [
						"= 0x0a"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00a27a5bd952e593fbf4be3ad8e27a16a20",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_HALF"
					],
					"initializer": [
						"= 0x10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1abdf845d253f69e8e30230222c757ea00af99a0a987ff42a8909c484fdb183c2a7",
						"prot": "public"
					},
					"name": [
						"HIP_AD_FORMAT_FLOAT"
					],
					"initializer": [
						"= 0x20"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "60",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "60",
						"bodyend": "69"
					}
				}
			]
		},
		"hipResourceType": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1ac4a2d283d15bd706ec2fce745e5cf7ac",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipResourceType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1ac4a2d283d15bd706ec2fce745e5cf7aca0589eb56f5887c95e50c97bb3afd618c",
						"prot": "public"
					},
					"name": [
						"hipResourceTypeArray"
					],
					"initializer": [
						"= 0x00"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ac4a2d283d15bd706ec2fce745e5cf7aca67c0cdae37af35df9a56c09a2ec806a9",
						"prot": "public"
					},
					"name": [
						"hipResourceTypeMipmappedArray"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ac4a2d283d15bd706ec2fce745e5cf7acabfbb200e565b7d76cecf8f13e3c282e5",
						"prot": "public"
					},
					"name": [
						"hipResourceTypeLinear"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ac4a2d283d15bd706ec2fce745e5cf7acab79b496f361dd19e423382fc5aea7729",
						"prot": "public"
					},
					"name": [
						"hipResourceTypePitch2D"
					],
					"initializer": [
						"= 0x03"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip resource types "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "123",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "123",
						"bodyend": "128"
					}
				}
			]
		},
		"hipResourcetype": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a1d01da29fc699617c37f9bcdfbffa58e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipResourcetype"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a1d01da29fc699617c37f9bcdfbffa58ea05b57e567f221b411deb80223a5ef77a",
						"prot": "public"
					},
					"name": [
						"HIP_RESOURCE_TYPE_ARRAY"
					],
					"initializer": [
						"= 0x00"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Array resoure "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a1d01da29fc699617c37f9bcdfbffa58ea71a6755e1536d31217ca8401cc70e0f1",
						"prot": "public"
					},
					"name": [
						"HIP_RESOURCE_TYPE_MIPMAPPED_ARRAY"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Mipmapped array resource "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a1d01da29fc699617c37f9bcdfbffa58ea7f86a0f731402eb6a70342294dc2f216",
						"prot": "public"
					},
					"name": [
						"HIP_RESOURCE_TYPE_LINEAR"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Linear resource "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a1d01da29fc699617c37f9bcdfbffa58ea1eb726cd957c3e446a2425d58875e456",
						"prot": "public"
					},
					"name": [
						"HIP_RESOURCE_TYPE_PITCH2D"
					],
					"initializer": [
						"= 0x03"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Pitch 2D resource "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "129",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "129",
						"bodyend": "134"
					}
				}
			]
		},
		"HIPaddress_mode": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1ada6b505b00e83d66542c91a1b2307bf2",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"HIPaddress_mode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1ada6b505b00e83d66542c91a1b2307bf2a3eed307e0deb1f4520e93a94fbc1ee19",
						"prot": "public"
					},
					"name": [
						"HIP_TR_ADDRESS_MODE_WRAP"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ada6b505b00e83d66542c91a1b2307bf2afaabb2d8d3f102b22886c78255f02739",
						"prot": "public"
					},
					"name": [
						"HIP_TR_ADDRESS_MODE_CLAMP"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ada6b505b00e83d66542c91a1b2307bf2a8c3b7372c2ad54d6487a6c0ad42a3f8a",
						"prot": "public"
					},
					"name": [
						"HIP_TR_ADDRESS_MODE_MIRROR"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1ada6b505b00e83d66542c91a1b2307bf2a7ec57430ccc83aa203bb4f26ff9f319d",
						"prot": "public"
					},
					"name": [
						"HIP_TR_ADDRESS_MODE_BORDER"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip address modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "138",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "138",
						"bodyend": "143"
					}
				}
			]
		},
		"HIPfilter_mode": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a1f77a6108eb4b1424cbcc1dc09eaaa6e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"HIPfilter_mode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a1f77a6108eb4b1424cbcc1dc09eaaa6ea4089ec9391134b86fb5d2e81387eac86",
						"prot": "public"
					},
					"name": [
						"HIP_TR_FILTER_MODE_POINT"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a1f77a6108eb4b1424cbcc1dc09eaaa6eabe656f5e6d23d18d05cf8b20cd0589aa",
						"prot": "public"
					},
					"name": [
						"HIP_TR_FILTER_MODE_LINEAR"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip filter modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "147",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "147",
						"bodyend": "150"
					}
				}
			]
		},
		"hipResourceViewFormat": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ce",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipResourceViewFormat"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea2063974b7c63fe5cc30608eee63c7614",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatNone"
					],
					"initializer": [
						"= 0x00"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceae24b50913e9a821ec8f8c577d047bb75",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedChar1"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea2638d20534e10404e014f99b447603bd",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedChar2"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea77ca99a2f486070fe859d714d3b62a57",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedChar4"
					],
					"initializer": [
						"= 0x03"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceae3d8d4b36e2c4a25de5208513fbf751b",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedChar1"
					],
					"initializer": [
						"= 0x04"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceabce1650eb85d3ef6db11513caaaf08be",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedChar2"
					],
					"initializer": [
						"= 0x05"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea041b834a894dd458994afd3fb17f2dcf",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedChar4"
					],
					"initializer": [
						"= 0x06"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceab1ec6b2b7587f5a7505df1518bc4e2cf",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedShort1"
					],
					"initializer": [
						"= 0x07"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceaf1f818268859b5db38129200e9c1535a",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedShort2"
					],
					"initializer": [
						"= 0x08"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceafb6ec538c67bcd6944a682263b7a6b39",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedShort4"
					],
					"initializer": [
						"= 0x09"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceaeebafd1f78ec8590ff32a81a1268f0e5",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedShort1"
					],
					"initializer": [
						"= 0x0a"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea55ccc4ec1afb1a023aeed517cffaccc2",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedShort2"
					],
					"initializer": [
						"= 0x0b"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea37a0212e13a615f6a972834d661c5edb",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedShort4"
					],
					"initializer": [
						"= 0x0c"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea74327a9fbc40fad62352d54248a106fb",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedInt1"
					],
					"initializer": [
						"= 0x0d"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea4cd9e01ef72096fdd9c1f844b879ed95",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedInt2"
					],
					"initializer": [
						"= 0x0e"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea7c253bb1e7c25cd51a9bcbe8a88106ab",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedInt4"
					],
					"initializer": [
						"= 0x0f"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceafe8ce539aced89efc110cbd0f862bfa9",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedInt1"
					],
					"initializer": [
						"= 0x10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea03a89ff79e27e25450d2c02cbca60412",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedInt2"
					],
					"initializer": [
						"= 0x11"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea49b56a0bc812ada92ff2199f29d42698",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedInt4"
					],
					"initializer": [
						"= 0x12"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceab5d4e7c0bb19afd3e2c1b7006fa6bc43",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatHalf1"
					],
					"initializer": [
						"= 0x13"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceaad2ea80ee12541c78c8c14a020406233",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatHalf2"
					],
					"initializer": [
						"= 0x14"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea5e59ef9588077f8b7514582bf6b4bc76",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatHalf4"
					],
					"initializer": [
						"= 0x15"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea0b724b833c3350e7fa709b8d4c1b3908",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatFloat1"
					],
					"initializer": [
						"= 0x16"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceace7ed35d1f9e472b12434ef15d622f52",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatFloat2"
					],
					"initializer": [
						"= 0x17"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea63014d0f5b494259309ce97e2084828a",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatFloat4"
					],
					"initializer": [
						"= 0x18"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea72d644a4603a5f50e28219cca0dbc63a",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed1"
					],
					"initializer": [
						"= 0x19"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea8d3723df9d15fd0f7d948405074c4645",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed2"
					],
					"initializer": [
						"= 0x1a"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceadc93cc8950df637929fec0833091d843",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed3"
					],
					"initializer": [
						"= 0x1b"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea37b93313fdc9e6d4345c9f62e8ffacc3",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed4"
					],
					"initializer": [
						"= 0x1c"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceab2b2d0d8eeb42f5e0bd36742ddf5c32d",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedBlockCompressed4"
					],
					"initializer": [
						"= 0x1d"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea2022710f743fb58bfc48b22520e95386",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed5"
					],
					"initializer": [
						"= 0x1e"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceab216c662063865156e5c064ce5156991",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedBlockCompressed5"
					],
					"initializer": [
						"= 0x1f"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceae445c47c26608ab53a073b61b2495c84",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed6H"
					],
					"initializer": [
						"= 0x20"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96cea89fa2e14d9d41c48d01c34594728456f",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatSignedBlockCompressed6H"
					],
					"initializer": [
						"= 0x21"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1aa0ce0df88178c3157b1a56ae9adb96ceaecae7d40367785c319d4af27f11d1cf7",
						"prot": "public"
					},
					"name": [
						"hipResViewFormatUnsignedBlockCompressed7"
					],
					"initializer": [
						"= 0x22"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip texture resource view formats "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "169",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "169",
						"bodyend": "205"
					}
				}
			]
		},
		"HIPresourceViewFormat": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"HIPresourceViewFormat"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a5577990d7926d3534c6cded3558d9721",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_NONE"
					],
					"initializer": [
						"= 0x00"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"No resource view format (use underlying resource format) "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a130866b96a283c9ae7ed888e8b409bf2",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_1X8"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel unsigned 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a42934e6b68903f070cee9de0cefb1618",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_2X8"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel unsigned 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a4d00bad266d3b744bcfb9aca03ad5371",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_4X8"
					],
					"initializer": [
						"= 0x03"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel unsigned 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a971f037b327889d81aec1d4471e5747e",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_1X8"
					],
					"initializer": [
						"= 0x04"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel signed 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a335a6b14bb95049d62a22c636062dfe9",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_2X8"
					],
					"initializer": [
						"= 0x05"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel signed 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a6a07d1b58e83f112e51577a71db4064e",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_4X8"
					],
					"initializer": [
						"= 0x06"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel signed 8-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a1ff8d7bd5c9283225b5f1491422821f5",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_1X16"
					],
					"initializer": [
						"= 0x07"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel unsigned 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a2550a8c0d339d4340d59c75b568fbef6",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_2X16"
					],
					"initializer": [
						"= 0x08"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel unsigned 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a889f1abd7fbbecad885ffe99e09377a7",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_4X16"
					],
					"initializer": [
						"= 0x09"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel unsigned 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9aaf61ce87edb24595b7087aa5392676c2",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_1X16"
					],
					"initializer": [
						"= 0x0a"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel signed 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a292aee6051c9e3fb35d7e90df84bc5db",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_2X16"
					],
					"initializer": [
						"= 0x0b"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel signed 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a3b002e409a851bf3010339887b51ec4c",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_4X16"
					],
					"initializer": [
						"= 0x0c"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel signed 16-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a1c1c947c4444f9b5c064e2642a08d5ee",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_1X32"
					],
					"initializer": [
						"= 0x0d"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel unsigned 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ad9209dc87b0b30f348715ec8c3b6bc6e",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_2X32"
					],
					"initializer": [
						"= 0x0e"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel unsigned 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ac3cad7107de9afe19a83e1c92ec7d071",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UINT_4X32"
					],
					"initializer": [
						"= 0x0f"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel unsigned 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a52e0cc75079546b896608ed1fa0b2964",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_1X32"
					],
					"initializer": [
						"= 0x10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel signed 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a68f080c50ced45d092395ca51b0f4ff2",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_2X32"
					],
					"initializer": [
						"= 0x11"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel signed 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ac8f4750cfb1a60bba7e095c30246f6af",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SINT_4X32"
					],
					"initializer": [
						"= 0x12"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel signed 32-bit integers "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ac4e033ffcddac858422b7043f452926c",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_1X16"
					],
					"initializer": [
						"= 0x13"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel 16-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ab0b187f3471a77f1d722dde3ab9b73a7",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_2X16"
					],
					"initializer": [
						"= 0x14"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel 16-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a8a61a8e88f7f76830071987d19f21ae5",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_4X16"
					],
					"initializer": [
						"= 0x15"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel 16-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9af59a8dec7304f4d8261d4a3603595098",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_1X32"
					],
					"initializer": [
						"= 0x16"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"1 channel 32-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9aa0df1d7cf39a6b3d488b43565d6fa1ee",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_2X32"
					],
					"initializer": [
						"= 0x17"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"2 channel 32-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a180b648c21563572942b2448840a5c2e",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_FLOAT_4X32"
					],
					"initializer": [
						"= 0x18"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"4 channel 32-bit floating point "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a0e4452d2d91fb43fcdc3aa265478a171",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC1"
					],
					"initializer": [
						"= 0x19"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 1 "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9afb4fbc1ed1ef7c5965c9a5d80a50a0bb",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC2"
					],
					"initializer": [
						"= 0x1a"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 2 "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9ae01c8d3950c053eef6a0ada98901ad72",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC3"
					],
					"initializer": [
						"= 0x1b"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 3 "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a87572f3856c0b8efe1ec2472a3bae8e7",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC4"
					],
					"initializer": [
						"= 0x1c"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 4 unsigned "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a6bcabc7788897c6ec43942f5bdc951ef",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SIGNED_BC4"
					],
					"initializer": [
						"= 0x1d"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 4 signed "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9abe53bcc8a9b200c3e4ceb1f758f79a7d",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC5"
					],
					"initializer": [
						"= 0x1e"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 5 unsigned "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a972c526013a903d0bbf321231de69a06",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SIGNED_BC5"
					],
					"initializer": [
						"= 0x1f"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 5 signed "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a3a69f57d94eacd6d4dfe618b27e17ab7",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC6H"
					],
					"initializer": [
						"= 0x20"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 6 unsigned half-float "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a7a951a5566a5e075566f3f4ed4b1a491",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_SIGNED_BC6H"
					],
					"initializer": [
						"= 0x21"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 6 signed half-float "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a38e942dc4952156f08c4ba5232f20ec9a707b7c4445769c7a33929f284c92e088",
						"prot": "public"
					},
					"name": [
						"HIP_RES_VIEW_FORMAT_UNSIGNED_BC7"
					],
					"initializer": [
						"= 0x22"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Block compressed 7 "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "206",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "207",
						"bodyend": "243"
					}
				}
			]
		},
		"hipMemcpyKind": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemcpyKind"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18a9d66b705aa85a9c83f0f533cef70d0af",
						"prot": "public"
					},
					"name": [
						"hipMemcpyHostToHost"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Host-to-Host Copy. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18aff32175ecb0c7113200286eff8211008",
						"prot": "public"
					},
					"name": [
						"hipMemcpyHostToDevice"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Host-to-Device Copy. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18aba2505e9ce1e5382f17730bc670917d1",
						"prot": "public"
					},
					"name": [
						"hipMemcpyDeviceToHost"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						{
							"para": [
								"Device-to-Host Copy. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18abd05a09d3105e0ce25b34dd91cf83f88",
						"prot": "public"
					},
					"name": [
						"hipMemcpyDeviceToDevice"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						{
							"para": [
								"Device-to-Device Copy. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18a4e37107e416f79a2edf2b6534163c823",
						"prot": "public"
					},
					"name": [
						"hipMemcpyDefault"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Runtime will automatically determine copy-kind based on virtual addresses. "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18a43a2409dc0d09645418a5855ab0c0f1c",
						"prot": "public"
					},
					"name": [
						"hipMemcpyDeviceToDeviceNoCU"
					],
					"initializer": [
						"= 1024"
					],
					"briefdescription": [
						{
							"para": [
								"Device-to-Device Copy without using compute units. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Memory copy types "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "333",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "333",
						"bodyend": "341"
					}
				}
			]
		},
		"hipFunction_attribute": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272f",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipFunction_attribute"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa2b3276e86efaf46c92c4cb2c6cde047c",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fab82448e3b734ca5662b14793c60d4eab",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fadebb80a22231c94fe055e2d29ce2af18",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_CONST_SIZE_BYTES"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa3aeed307844d1aaa793e914365622a8c",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fad881275205999e13b6006589d3253e09",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_NUM_REGS"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272faefaa35608ff8b9049d7bad0c22b62a67",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_PTX_VERSION"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa16863fccec7c1453e7ad30f7484ba60a",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_BINARY_VERSION"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa2de0385b6d314acdacd178fabe5094e0",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_CACHE_MODE_CA"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272faf2c3f8f7994af78193b2692e497c777c",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_MAX_DYNAMIC_SHARED_SIZE_BYTES"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa2e7d7259e292793f35b0b71735debdce",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_PREFERRED_SHARED_MEMORY_CARVEOUT"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a8951f1475533fcd35b4a7a9aeb41272fa1369da7f0ad27875636a0525f67a5bd4",
						"prot": "public"
					},
					"name": [
						"HIP_FUNC_ATTRIBUTE_MAX"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "417",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "417",
						"bodyend": "429"
					}
				}
			]
		},
		"hipPointer_attribute": {
			"$": {
				"kind": "enum",
				"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipPointer_attribute"
			],
			"enumvalue": [
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a351f4be735a13e2788c0c74abf7cb0e0",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_CONTEXT"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "The context on which a pointer was allocated \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1adb8735d707be3d31dd64a46271069237",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_MEMORY_TYPE"
					],
					"briefdescription": [
						{
							"para": [
								"memory type describing location of a pointer "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a24c68927c9881c8ffbcbb0ecc04b0a31",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_DEVICE_POINTER"
					],
					"briefdescription": [
						{
							"para": [
								"address at which the pointer is allocated on device "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a639ebcef2880cd4cb020dfa7fecd5119",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_HOST_POINTER"
					],
					"briefdescription": [
						{
							"para": [
								"address at which the pointer is allocated on host "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1ab05bd233393c51d2db1dfbb7ae8d70c9",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_P2P_TOKENS"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "A pair of tokens for use with linux kernel interface \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a9a587bd4cc33f9a58961cb5801c5489d",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_SYNC_MEMOPS"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Synchronize every synchronous memory operation initiated on this region "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a264f5f3d40fe591e880eaf73c37d569a",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_BUFFER_ID"
					],
					"briefdescription": [
						{
							"para": [
								"Unique ID for an allocated memory region. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1ad3ca9bfc093449926c90734900334fac",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_IS_MANAGED"
					],
					"briefdescription": [
						{
							"para": [
								"Indicates if the pointer points to managed memory. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a0cab1da1255a8b4d62d87d7c83806296",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_DEVICE_ORDINAL"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"device ordinal of a device on which a pointer was allocated or registered "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a15544939ec22c928e579c514293d9412",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_IS_LEGACY_HIP_IPC_CAPABLE"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "if this pointer maps to an allocation that is suitable for hipIpcGetMemHandle \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1ae82b2f8de6a3238aa5d65cc40e1d0368",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_RANGE_START_ADDR"
					],
					"briefdescription": [
						{
							"para": [
								"Starting address for this requested pointer. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a160ddae557035db47837e507f595825e",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_RANGE_SIZE"
					],
					"briefdescription": [
						{
							"para": [
								"Size of the address range for this requested pointer. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a2d96a7dd4e9cf031b94fc3cd1309d723",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_MAPPED"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"tells if this pointer is in a valid address range that is mapped to a backing allocation "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1afc43c9bb83f3b15b20e3c85e42ab1acb",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_ALLOWED_HANDLE_TYPES"
					],
					"briefdescription": [
						{
							"para": [
								"for this allocation "
							]
						}
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Bitmask of allowed hipmemAllocationHandleType \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a64ff1f6b7144501cb01c153b1ccbb51e",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_IS_GPU_DIRECT_RDMA_CAPABLE"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "returns if the memory referenced by this pointer can be used with the GPUDirect RDMA API \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1ac81cd9e2ec4fed70a14a0576ff18cc05",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_ACCESS_FLAGS"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Returns the access flags the device associated with for the corresponding memory referenced by the ptr "
							]
						}
					]
				},
				{
					"$": {
						"id": "driver__types_8h_1a44f13516fbfca2d20cc2594b7f633cf1a337d6dd0cdfad646bb635cafcb78c44c",
						"prot": "public"
					},
					"name": [
						"HIP_POINTER_ATTRIBUTE_MEMPOOL_HANDLE"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Returns the mempool handle for the allocation if it was allocated from a mempool \n",
									"simplesect": [
										{
											"$": {
												"kind": "warning"
											},
											"para": [
												"- not supported in HIP "
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "431",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "431",
						"bodyend": "462"
					}
				}
			]
		},
		"hipMemoryType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gaea86e91d3cd65992d787b39b218435a3",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemoryType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3ab07106e9139657fd73adbbe5f0109bc1",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeUnregistered"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Unregistered memory. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3a5c5c99ed85b2599362089aa089cdad77",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeHost"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Memory is physically located on host. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3a0e5f84f5565ba2a011ef3a9df2584a7a",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeDevice"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Memory is physically located on device. (see deviceId for specific device) "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3ac567ef3faeb55edfc965fd8f1dbccf4c",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeManaged"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Managed memory, automaticallly managed by the unified memory system place holder for new values. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3abbd7b93a87068c9dbb8d841ff0f3a366",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeArray"
					],
					"initializer": [
						"= 10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Array memory, physically located on device. (see deviceId for specific device) "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaea86e91d3cd65992d787b39b218435a3aceb68d38418e0a54dd9f7c8e113a4ec4",
						"prot": "public"
					},
					"name": [
						"hipMemoryTypeUnified"
					],
					"initializer": [
						"= 11"
					],
					"briefdescription": [
						{
							"para": [
								"unified address space "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipMemoryType (for pointer attributes)",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"hipMemoryType enum values are combination of cudaMemoryType and cuMemoryType and AMD specific enum values. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "244",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "244",
						"bodyend": "256"
					}
				}
			]
		},
		"hipDeviceAttribute_t": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gacc0acd7b9bda126c6bb3dfd6e2796d7c",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipDeviceAttribute_t"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cad6f798685ee7e3c0c598b768deed019e",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCudaCompatibleBegin"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca52fa8868e3d06d6ceed35072946c4500",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeEccEnabled"
					],
					"initializer": [
						"= hipDeviceAttributeCudaCompatibleBegin"
					],
					"briefdescription": [
						{
							"para": [
								"Whether ECC support is enabled. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca3453c7d157ca16c6a94c312205c3ae86",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeAccessPolicyMaxWindowSize"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. The maximum size of the window policy in bytes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca773d2f74a90f647fcfec39ba19aa7b9e",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeAsyncEngineCount"
					],
					"briefdescription": [
						{
							"para": [
								"Asynchronous engines number. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca9753ae75a27d737cb02c3ef762275106",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCanMapHostMemory"
					],
					"briefdescription": [
						{
							"para": [
								"Whether host memory can be mapped into device address space. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca56a8b8ee9b1165461ea6c1ee7d56e90d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCanUseHostPointerForRegisteredMem"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Device can access host registered memory at the same virtual address as the CPU "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca2300e077e020e7967592065561373b00",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeClockRate"
					],
					"briefdescription": [
						{
							"para": [
								"Peak clock frequency in kilohertz. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca4d0369a6ef7bd7890fdcabc16ed3385d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeComputeMode"
					],
					"briefdescription": [
						{
							"para": [
								"Compute mode that device is currently in. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca8af4079129030527721246176198f75d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeComputePreemptionSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Device supports Compute Preemption. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cad9f45254d0d048677f560032532d5504",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeConcurrentKernels"
					],
					"briefdescription": [
						{
							"para": [
								"Device can possibly execute multiple kernels concurrently. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca9e5af4761458152e645d2e1312767514",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeConcurrentManagedAccess"
					],
					"briefdescription": [
						{
							"para": [
								"Device can coherently access managed memory concurrently with the CPU. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6ffb0a3933411c136ea1f9d154fab5cc",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeLaunch"
					],
					"briefdescription": [
						{
							"para": [
								"Support cooperative launch. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5169c438b4ba17f8588d744bf56d87e4",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeMultiDeviceLaunch"
					],
					"briefdescription": [
						{
							"para": [
								"Support cooperative launch on multiple devices. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca41202a4affefb5cf099beb8c8bf70bbf",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeDeviceOverlap"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Device can concurrently copy memory and execute a kernel. Deprecated. Use instead asyncEngineCount. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca0037b357264179e4093c551a80a2a21c",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeDirectManagedMemAccessFromHost"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Host can directly access managed memory on the device without migration "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca28029ba35569753cbdbd777b21eab37b",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeGlobalL1CacheSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Device supports caching globals in L1. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca1421bb450fe736fda9605a607be69836",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeHostNativeAtomicSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Link between the device and the host supports native atomic operations. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caa384485d5fe1ac26746d817af1aa669b",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeIntegrated"
					],
					"briefdescription": [
						{
							"para": [
								"Device is integrated GPU. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6129311200a17dcc5fa8d2256874ae3d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeIsMultiGpuBoard"
					],
					"briefdescription": [
						{
							"para": [
								"Multiple GPU devices. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca58434135137ef3af09567698829810f1",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeKernelExecTimeout"
					],
					"briefdescription": [
						{
							"para": [
								"Run time limit for kernels executed on the device. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca582ae5a26a7148504878890028e4b64c",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeL2CacheSize"
					],
					"briefdescription": [
						{
							"para": [
								"Size of L2 cache in bytes. 0 if the device doesn't have L2 cache. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca7d251fb7e063e4703489eddbc41a440d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeLocalL1CacheSupported"
					],
					"briefdescription": [
						{
							"para": [
								"caching locals in L1 is supported "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cada0ca948530460469095f6a63729219a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeLuid"
					],
					"briefdescription": [
						{
							"para": [
								"8-byte locally unique identifier in 8 bytes. Undefined on TCC and non-Windows platforms "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caea6c84c14d2539fc9abcdfb0f940acbe",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeLuidDeviceNodeMask"
					],
					"briefdescription": [
						{
							"para": [
								"Luid device node mask. Undefined on TCC and non-Windows platforms. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca2735739cf977b7d303266f6781131e8d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeComputeCapabilityMajor"
					],
					"briefdescription": [
						{
							"para": [
								"Major compute capability version number. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caa1a9b27307b3dda43201bfaead8458c5",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeManagedMemory"
					],
					"briefdescription": [
						{
							"para": [
								"Device supports allocating managed memory on this system. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caae53485511cc012addc523e602ef9b98",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxBlocksPerMultiProcessor"
					],
					"briefdescription": [
						{
							"para": [
								"Max block size per multiprocessor. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cac1e4ac589db0d8adbbc241e3d0fcd594",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxBlockDimX"
					],
					"briefdescription": [
						{
							"para": [
								"Max block size in width. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca187dbffe12db09a56c0f75c340d879c9",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxBlockDimY"
					],
					"briefdescription": [
						{
							"para": [
								"Max block size in height. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caf811f51e03d1ffb025d80ac1da088675",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxBlockDimZ"
					],
					"briefdescription": [
						{
							"para": [
								"Max block size in depth. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca03db8df0e7a9fbdaae683d97e8ac9c87",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxGridDimX"
					],
					"briefdescription": [
						{
							"para": [
								"Max grid size in width. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5b5cc49972679c5ccf62b79425ee99df",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxGridDimY"
					],
					"briefdescription": [
						{
							"para": [
								"Max grid size in height. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6c206ac083999caf4640e5d91dae24f7",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxGridDimZ"
					],
					"briefdescription": [
						{
							"para": [
								"Max grid size in depth. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca8d9538aecd5fa764b6b13dd9ae05a1cf",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurface1D"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum size of 1D surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca48c9f35454f5c329718bec08b54e8928",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurface1DLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Maximum dimensions of 1D layered surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca45e5f8d0e1b6b8ba58cf4b0f00b793b0",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurface2D"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension (width, height) of 2D surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca63f784bd3a09ed4b9c1feb3628410bbe",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurface2DLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Maximum dimensions of 2D layered surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca09c1178054d1e7eda20fd5bd5dd17175",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurface3D"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension (width, height, depth) of 3D surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca1a76a9768fb8e98c4f437e3f7962027f",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurfaceCubemap"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Maximum dimensions of Cubemap surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca08a044c95db3574e2c89ca856adcf4df",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSurfaceCubemapLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Maximum dimension of Cubemap layered surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca9ca92f0db9775c913bc681d87449bf1a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture1DWidth"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum size of 1D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cacc59d7cf69f95371c8e8d7fbccf13e73",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture1DLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of 1D layered texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca929925869c0fee0db630b4fd08f87b3a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture1DLinear"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Maximum number of elements allocatable in a 1D linear texture. Use cudaDeviceGetTexture1DLinearMaxWidth() instead on Cuda. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca2428066c6ecb425d5b61c7532042bedf",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture1DMipmap"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum size of 1D mipmapped texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caba995e4cf2e8e3cf99dbca7c5adf4342",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DWidth"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension width of 2D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca523ab7684ddf2fd7ad7e7b9123e49163",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DHeight"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension hight of 2D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca92b064e8b236f1d06b528056ce6fddae",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DGather"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of 2D texture if gather operations performed. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caa4d2c06274d024a40fc0e4b797a5a3a2",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of 2D layered texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca45b44857785bff4085506a56022fbf0f",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DLinear"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions (width, height, pitch) of 2D textures bound to pitched memory. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caf1b78e548e4cd729f0e0be4ab7736c62",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture2DMipmap"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of 2D mipmapped texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cac38a9aec2fba4d56ad90a0bd76c26380",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture3DWidth"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension width of 3D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca36a3b206969474f65c0d5ad4831c1ba8",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture3DHeight"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension height of 3D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caa7be0131e8f44109c377ca1b7d634ce7",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture3DDepth"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension depth of 3D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca90020ecaeb108308c5b13a335d5c9130",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTexture3DAlt"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of alternate 3D texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca3b576766317055e3bf321761fe5d84fd",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTextureCubemap"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of Cubemap texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caeab620ddac9e5520e0411fda9f6a5fb1",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxTextureCubemapLayered"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimensions of Cubemap layered texture. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5a4d13aaac8710b1d078306125f24e25",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxThreadsDim"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum dimension of a block. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca8327aa23782d9c994bdef33a6d62e02e",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxThreadsPerBlock"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum number of threads per block. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caddc08922b491eb1f6a583833cbf4e2f0",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxThreadsPerMultiProcessor"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum resident threads per multiprocessor. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca0b3f58899744df724961b664061afd54",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxPitch"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum pitch in bytes allowed by memory copies. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca848c1396fab6f20463c6aefb828b0870",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMemoryBusWidth"
					],
					"briefdescription": [
						{
							"para": [
								"Global memory bus width in bits. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6b68deafd65f036b30dc8051573eb000",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMemoryClockRate"
					],
					"briefdescription": [
						{
							"para": [
								"Peak memory clock frequency in kilohertz. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca38edc4fcae456e47160d349da3249b85",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeComputeCapabilityMinor"
					],
					"briefdescription": [
						{
							"para": [
								"Minor compute capability version number. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca7770672185967b47674798253cb7f47d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMultiGpuBoardGroupID"
					],
					"briefdescription": [
						{
							"para": [
								"Unique ID of device group on the same multi-GPU board. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5c1519870733ccf0b83f722678240e5f",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMultiprocessorCount"
					],
					"briefdescription": [
						{
							"para": [
								"Number of multiprocessors on the device. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca8dcc079d3099aadfd6d37c9614f91407",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnused1"
					],
					"briefdescription": [
						{
							"para": [
								"Previously hipDeviceAttributeName. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca21e422662a09d4894c8ebc60473384ff",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePageableMemoryAccess"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Device supports coherently accessing pageable memory without calling hipHostRegister on it "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca14dff2a1b8c0ba131b06a6685bb052f3",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
					],
					"briefdescription": [
						{
							"para": [
								"Device accesses pageable memory via the host's page tables. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca572b29c44f1322aa7657fdd784832f88",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePciBusId"
					],
					"briefdescription": [
						{
							"para": [
								"PCI Bus ID. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca955d90286e87be9e3528f0b817ab32ff",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePciDeviceId"
					],
					"briefdescription": [
						{
							"para": [
								"PCI Device ID. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cadb8cdb8c1f1e140ae5340cf9fbe8aa8e",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePciDomainID"
					],
					"briefdescription": [
						{
							"para": [
								"PCI Domain ID. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca52d3c74a3d94c02ebfda31b32a0cd75a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePersistingL2CacheMaxSize"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum l2 persisting lines capacity in bytes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca82289b170192b6ea742be0efc6f95107",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxRegistersPerBlock"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"32-bit registers available to a thread block. This number is shared by all thread blocks simultaneously resident on a multiprocessor. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5f366458f31c0dc0f3faa0a11446ada4",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxRegistersPerMultiprocessor"
					],
					"briefdescription": [
						{
							"para": [
								"32-bit registers available per block. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cad612849d153747b7be03b0e697a2aead",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeReservedSharedMemPerBlock"
					],
					"briefdescription": [
						{
							"para": [
								"Shared memory reserved by CUDA driver per block. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca7bca3aa18b26d40eba043ae93e15c7e5",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSharedMemoryPerBlock"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum shared memory available per block in bytes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6299fb9b996d154c456d1622d447fe47",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeSharedMemPerBlockOptin"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum shared memory per block usable by special opt in. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cae88a51d68a16de43c9036bd1c555e0c9",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeSharedMemPerMultiprocessor"
					],
					"briefdescription": [
						{
							"para": [
								"Shared memory available per multiprocessor. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5aa88c2c66ab8d71bb5b3177da16eecd",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Performance ratio of single precision to double precision. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca7ace06929e3bb30616db62f966ad50db",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeStreamPrioritiesSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Whether to support stream priorities. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca02af979ebb5db7921872c8eff4d667bd",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeSurfaceAlignment"
					],
					"briefdescription": [
						{
							"para": [
								"Alignment requirement for surfaces. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca0eb1b68cd4148e015736be9dc965caa4",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeTccDriver"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. Whether device is a Tesla device using TCC driver. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cac72b2427df2ba58dbbee2e1399b3e135",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeTextureAlignment"
					],
					"briefdescription": [
						{
							"para": [
								"Alignment requirement for textures. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cae044c1754ea66c8f9f7b420a2f14671e",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeTexturePitchAlignment"
					],
					"briefdescription": [
						{
							"para": [
								"Pitch alignment requirement for 2D texture references bound to pitched memory;. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cac6089ac3a0f9c77cc382fb0eaa73ae9c",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeTotalConstantMemory"
					],
					"briefdescription": [
						{
							"para": [
								"Constant memory size in bytes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caad0e1bd8d5bb28ae8e0c710fd70bea29",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeTotalGlobalMem"
					],
					"briefdescription": [
						{
							"para": [
								"Global memory available on devicice. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca72a250028cf4eac11a83410a86de83a4",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnifiedAddressing"
					],
					"briefdescription": [
						{
							"para": [
								"Cuda only. An unified address space shared with the host. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6d7bf28444bf5fe676c4260333e2da7c",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnused2"
					],
					"briefdescription": [
						{
							"para": [
								"Previously hipDeviceAttributeUuid. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caffd94133e823247a6f1215343232f6ec",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeWarpSize"
					],
					"briefdescription": [
						{
							"para": [
								"Warp size in threads. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caef1d9fb1d5d0c6129903d93ddae8c4ca",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMemoryPoolsSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Device supports HIP Stream Ordered Memory Allocator. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caecdccc51c9b30e22a154839d5827a615",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeVirtualMemoryManagementSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Device supports HIP virtual memory management. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cae7fc4b89d3474089f40e2206866f658a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeHostRegisterSupported"
					],
					"briefdescription": [
						{
							"para": [
								"Can device support host memory registration via hipHostRegister. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca85d831cf51005e06956c389c37d071bb",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMemoryPoolSupportedHandleTypes"
					],
					"briefdescription": [
						{
							"para": [
								"Supported handle mask for HIP Stream Ordered Memory Allocator. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca23a769372f05b3d4b1bf28a9fd46991a",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCudaCompatibleEnd"
					],
					"initializer": [
						"= 9999"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca5f195e2a51f8fb6fa40dbe443d2b0279",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeAmdSpecificBegin"
					],
					"initializer": [
						"= 10000"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caefd7213ecdc587ca7e74822d2ca97309",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeClockInstructionRate"
					],
					"initializer": [
						"= hipDeviceAttributeAmdSpecificBegin"
					],
					"briefdescription": [
						{
							"para": [
								"Frequency in khz of the timer used by the device-side \"clock*\". "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cac4750f9f64dfe4455e58c2ba7e073f87",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnused3"
					],
					"briefdescription": [
						{
							"para": [
								"Previously hipDeviceAttributeArch. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cad3e7f3d01533b32e12211172fcf410ba",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum Shared Memory PerMultiprocessor. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca4ff9d7bb9ee05b2ae28caa535a81dcf0",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnused4"
					],
					"briefdescription": [
						{
							"para": [
								"Previously hipDeviceAttributeGcnArch. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca1694fee46a4b2befda6ecb7e058f53fc",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeUnused5"
					],
					"briefdescription": [
						{
							"para": [
								"Previously hipDeviceAttributeGcnArchName. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6c9f83e4239d19aa000dd13cbcfc00dd",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeHdpMemFlushCntl"
					],
					"briefdescription": [
						{
							"para": [
								"Address of the HDP_MEM_COHERENCY_FLUSH_CNTL register. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca49f4f8395025ba1ebe1a0a7eff0f24ed",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeHdpRegFlushCntl"
					],
					"briefdescription": [
						{
							"para": [
								"Address of the HDP_REG_COHERENCY_FLUSH_CNTL register. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca4d791a8a67ad0c89d413a67ce184be5d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeMultiDeviceUnmatchedFunc"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Supports cooperative launch on multiple devices with unmatched functions "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caa5679987f35a74bfcbb1d3ac36db73cb",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeMultiDeviceUnmatchedGridDim"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Supports cooperative launch on multiple devices with unmatched grid dimensions "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caeb7c0c783e1f88a0675726bf2da6424b",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeMultiDeviceUnmatchedBlockDim"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Supports cooperative launch on multiple devices with unmatched block dimensions "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca3295f0728fc8152a98556d89ba81216f",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCooperativeMultiDeviceUnmatchedSharedMem"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Supports cooperative launch on multiple devices with unmatched shared memories "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cab980fc82595b70b6338b9dd2b913ec26",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeIsLargeBar"
					],
					"briefdescription": [
						{
							"para": [
								"Whether it is LargeBar. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca4e443d1d515e56a1f8cee4a9f3a7a546",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeAsicRevision"
					],
					"briefdescription": [
						{
							"para": [
								"Revision of the GPU in this device. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca8179e5c1507831eaeb4690513e618913",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeCanUseStreamWaitValue"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "'1' if Device supports  and , '0' otherwise. ",
									"ref": [
										{
											"_": "hipStreamWaitValue32()",
											"$": {
												"refid": "group___stream_m_1gafade0b118c7ed28e1dae21cd4df0a9d6",
												"kindref": "member"
											}
										},
										{
											"_": "hipStreamWaitValue64()",
											"$": {
												"refid": "group___stream_m_1ga9ef06d564d19ef9afc11d60d20c9c541",
												"kindref": "member"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7caaca61f2bab5521294fe5657fc7e6548c",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeImageSupport"
					],
					"briefdescription": [
						{
							"para": [
								"'1' if Device supports image, '0' otherwise. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7cae5ef640fe3203e10381d220b0c46be66",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributePhysicalMultiProcessorCount"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"All available physical compute units for the device "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca6f1528b1afa5f1a70cd47680b353f96d",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeFineGrainSupport"
					],
					"briefdescription": [
						{
							"para": [
								"'1' if Device supports fine grain, '0' otherwise "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca949a6be673b95e4af2c13f2003078e44",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeWallClockRate"
					],
					"briefdescription": [
						{
							"para": [
								"Constant frequency of wall clock in kilohertz. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca652aba6828121b90705663532992a059",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeAmdSpecificEnd"
					],
					"initializer": [
						"= 19999"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacc0acd7b9bda126c6bb3dfd6e2796d7ca9e5ce28ccb762bfb010dc35f4487d619",
						"prot": "public"
					},
					"name": [
						"hipDeviceAttributeVendorSpecificBegin"
					],
					"initializer": [
						"= 20000"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipDeviceAttribute_t hipDeviceAttributeUnused number: 5 "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "406",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "406",
						"bodyend": "539"
					}
				}
			]
		},
		"hipDriverProcAddressQueryResult": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga3e30b1faa389b4565cae7af03d5d3e76",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipDriverProcAddressQueryResult"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga3e30b1faa389b4565cae7af03d5d3e76a796004dd82889d925351ca710fd65d96",
						"prot": "public"
					},
					"name": [
						"HIP_GET_PROC_ADDRESS_SUCCESS"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga3e30b1faa389b4565cae7af03d5d3e76a2575b187974521a7ac3a6ec0c4b1aad8",
						"prot": "public"
					},
					"name": [
						"HIP_GET_PROC_ADDRESS_SYMBOL_NOT_FOUND"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga3e30b1faa389b4565cae7af03d5d3e76ab22f8a48ad16cbfa5c27e9ebba363723",
						"prot": "public"
					},
					"name": [
						"HIP_GET_PROC_ADDRESS_VERSION_NOT_SUFFICIENT"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "541",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "541",
						"bodyend": "545"
					}
				}
			]
		},
		"hipComputeMode": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga35133e080ad8aecd57ec2c5387e3a376",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipComputeMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga35133e080ad8aecd57ec2c5387e3a376a9565a36ccb87755b51f42e1cf150bba6",
						"prot": "public"
					},
					"name": [
						"hipComputeModeDefault"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga35133e080ad8aecd57ec2c5387e3a376a92d8c4babfb6cdce4c7db31d420f72ca",
						"prot": "public"
					},
					"name": [
						"hipComputeModeExclusive"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga35133e080ad8aecd57ec2c5387e3a376a41e725f5f69f23e23eff05c4c64cfe8d",
						"prot": "public"
					},
					"name": [
						"hipComputeModeProhibited"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga35133e080ad8aecd57ec2c5387e3a376a9d39a96ce69f00a1fd859a436ef6e060",
						"prot": "public"
					},
					"name": [
						"hipComputeModeExclusiveProcess"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "547",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "547",
						"bodyend": "552"
					}
				}
			]
		},
		"hipFlushGPUDirectRDMAWritesOptions": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga7f21ab1d42258d4f479a3bc4f420ac26",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipFlushGPUDirectRDMAWritesOptions"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga7f21ab1d42258d4f479a3bc4f420ac26a7ea9cfe68bb86afe0d797bb4ea9a7cd2",
						"prot": "public"
					},
					"name": [
						"hipFlushGPUDirectRDMAWritesOptionHost"
					],
					"initializer": [
						"= 1 << 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga7f21ab1d42258d4f479a3bc4f420ac26aa8e4e696581d4b8c3b2993ee5c4c472a",
						"prot": "public"
					},
					"name": [
						"hipFlushGPUDirectRDMAWritesOptionMemOps"
					],
					"initializer": [
						"= 1 << 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "554",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "554",
						"bodyend": "557"
					}
				}
			]
		},
		"hipGPUDirectRDMAWritesOrdering": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gaccd4ecfca4d2a5bfdad59e1f3953f665",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGPUDirectRDMAWritesOrdering"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggaccd4ecfca4d2a5bfdad59e1f3953f665a4c8affda770fec6151516a0a599958a5",
						"prot": "public"
					},
					"name": [
						"hipGPUDirectRDMAWritesOrderingNone"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaccd4ecfca4d2a5bfdad59e1f3953f665a02317af92580a65cb1ed5f4958af9268",
						"prot": "public"
					},
					"name": [
						"hipGPUDirectRDMAWritesOrderingOwner"
					],
					"initializer": [
						"= 100"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaccd4ecfca4d2a5bfdad59e1f3953f665a78519e9864647bcc6fdd4fbb0e4aeeb4",
						"prot": "public"
					},
					"name": [
						"hipGPUDirectRDMAWritesOrderingAllDevices"
					],
					"initializer": [
						"= 200"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "559",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "559",
						"bodyend": "563"
					}
				}
			]
		},
		"hipDeviceP2PAttr": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga5582537cfebefc286383a3abeb71f4d1",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipDeviceP2PAttr"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga5582537cfebefc286383a3abeb71f4d1acda359cb54b8cc6654ccd470d2ae85b3",
						"prot": "public"
					},
					"name": [
						"hipDevP2PAttrPerformanceRank"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5582537cfebefc286383a3abeb71f4d1a3ce64b7f78e8f5d2088a085182bdd703",
						"prot": "public"
					},
					"name": [
						"hipDevP2PAttrAccessSupported"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5582537cfebefc286383a3abeb71f4d1a74da118b7d5fada7d20bade38a684fe8",
						"prot": "public"
					},
					"name": [
						"hipDevP2PAttrNativeAtomicSupported"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5582537cfebefc286383a3abeb71f4d1a6e15f73f41e1c10fef0de092243d8a52",
						"prot": "public"
					},
					"name": [
						"hipDevP2PAttrHipArrayAccessSupported"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "608",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "608",
						"bodyend": "613"
					}
				}
			]
		},
		"hipLimit_t": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga02ceb1513c852c4dd1ecf3cc459fda70",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipLimit_t"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a30214f21a523ab016abc833abde96486",
						"prot": "public"
					},
					"name": [
						"hipLimitStackSize"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Limit of stack size in bytes on the current device, per thread. The size is in units of 256 dwords, up to the limit of (128K - 16) "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a76d41da5f9a43671718a72237e783273",
						"prot": "public"
					},
					"name": [
						"hipLimitPrintfFifoSize"
					],
					"initializer": [
						"= 0x01"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Size limit in bytes of fifo used by printf call on the device. Currently not supported "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210",
						"prot": "public"
					},
					"name": [
						"hipLimitMallocHeapSize"
					],
					"initializer": [
						"= 0x02"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Limit of heap size in bytes on the current device, should be less than the global memory size on the device "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a62987c6383927c7dbbbb02a770b71eb5",
						"prot": "public"
					},
					"name": [
						"hipLimitRange"
					],
					"briefdescription": [
						{
							"para": [
								"Supported limit range. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipLimit",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"In HIP device limit-related APIs, any input limit value other than those defined in the enum is treated as \"UnsupportedLimit\" by default. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "650",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "650",
						"bodyend": "659"
					}
				}
			]
		},
		"hipMemoryAdvise": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga2757323c1ac94b1d71f699fcbd5bdc2f",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemoryAdvise"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fafaeec0b64516ce7134b9ae80c2b7a3f5",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseSetReadMostly"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Data will mostly be read and only occassionally be written to "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fafd2ae0ca621c454f44551ec654a29cf6",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseUnsetReadMostly"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						{
							"para": [
								"Undo the effect of hipMemAdviseSetReadMostly. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2facd018663520b26a64c6201a3efae1f15",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseSetPreferredLocation"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Set the preferred location for the data as the specified device "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fa6801ff205e3837d679aced24eb71e370",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseUnsetPreferredLocation"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						{
							"para": [
								"Clear the preferred location for the data. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fab516731448e70a8a48ada9314a869549",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseSetAccessedBy"
					],
					"initializer": [
						"= 5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Data will be accessed by the specified device so prevent page faults as much as possible "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fa025ece7c72ff19784e1fe9fdb07e7e56",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseUnsetAccessedBy"
					],
					"initializer": [
						"= 6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Let HIP to decide on the page faulting policy for the specified device "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fa56145fb5a178f26cc758cbbaa17b8d86",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseSetCoarseGrain"
					],
					"initializer": [
						"= 100"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"The default memory model is fine-grain. That allows coherent operations between host and device, while executing kernels. The coarse-grain can be used for data that only needs to be coherent at dispatch boundaries for better performance "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2757323c1ac94b1d71f699fcbd5bdc2fa24256a97d088ab9a13e2ae2af21751c6",
						"prot": "public"
					},
					"name": [
						"hipMemAdviseUnsetCoarseGrain"
					],
					"initializer": [
						"= 101"
					],
					"briefdescription": [
						{
							"para": [
								"Restores cache coherency policy back to fine-grain. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP Memory Advise values",
						{
							"simplesect": [
								{
									"$": {
										"kind": "note"
									},
									"para": [
										"This memory advise enumeration is used on Linux, not Windows. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "814",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "814",
						"bodyend": "831"
					}
				}
			]
		},
		"hipMemRangeCoherencyMode": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gac1e4b99211365977c2a7a9d054b59765",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemRangeCoherencyMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggac1e4b99211365977c2a7a9d054b59765a300a479362ae193c4c51bc64fa411304",
						"prot": "public"
					},
					"name": [
						"hipMemRangeCoherencyModeFineGrain"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Updates to memory with this attribute can be done coherently from all devices "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac1e4b99211365977c2a7a9d054b59765af508599624e76d1a13bb23a9e6359834",
						"prot": "public"
					},
					"name": [
						"hipMemRangeCoherencyModeCoarseGrain"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Writes to memory with this attribute can be performed by a single device at a time "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac1e4b99211365977c2a7a9d054b59765ad7e3bd29e10dbbfca7b550c97a034687",
						"prot": "public"
					},
					"name": [
						"hipMemRangeCoherencyModeIndeterminate"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Memory region queried contains subregions with both hipMemRangeCoherencyModeFineGrain and hipMemRangeCoherencyModeCoarseGrain attributes "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP Coherency Mode "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "835",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "835",
						"bodyend": "843"
					}
				}
			]
		},
		"hipMemRangeAttribute": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga1e8d4a7cf5d1844fa34e4f9ac3bfcc63",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemRangeAttribute"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga1e8d4a7cf5d1844fa34e4f9ac3bfcc63a94a4c175d01932cf90eff033a302528c",
						"prot": "public"
					},
					"name": [
						"hipMemRangeAttributeReadMostly"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Whether the range will mostly be read and only occassionally be written to "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1e8d4a7cf5d1844fa34e4f9ac3bfcc63a135eda185c450dd8add5580c23bf37b8",
						"prot": "public"
					},
					"name": [
						"hipMemRangeAttributePreferredLocation"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						{
							"para": [
								"The preferred location of the range. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1e8d4a7cf5d1844fa34e4f9ac3bfcc63a666534e4e8298c8d694dc745d9afe6ae",
						"prot": "public"
					},
					"name": [
						"hipMemRangeAttributeAccessedBy"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Memory range has hipMemAdviseSetAccessedBy set for the specified device "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1e8d4a7cf5d1844fa34e4f9ac3bfcc63a12c0540067c44b9f126da23edc523484",
						"prot": "public"
					},
					"name": [
						"hipMemRangeAttributeLastPrefetchLocation"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						{
							"para": [
								"prefetched "
							]
						}
					],
					"detaileddescription": [
						{
							"para": [
								"The last location to where the range was "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1e8d4a7cf5d1844fa34e4f9ac3bfcc63ad00a2b439bae60733943da9b27de4f08",
						"prot": "public"
					},
					"name": [
						"hipMemRangeAttributeCoherencyMode"
					],
					"initializer": [
						"= 100"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Returns coherency mode  for the range ",
									"ref": [
										{
											"_": "hipMemRangeCoherencyMode",
											"$": {
												"refid": "group___global_defs_1gac1e4b99211365977c2a7a9d054b59765",
												"kindref": "member"
											}
										}
									]
								}
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP range attributes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "847",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "847",
						"bodyend": "857"
					}
				}
			]
		},
		"hipMemPoolAttr": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga987c8e7a7e8171832a6647150854ca2e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemPoolAttr"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2eac0b660a866fc6c3ee87a8230d384532f",
						"prot": "public"
					},
					"name": [
						"hipMemPoolReuseFollowEventDependencies"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "(value type = int) Allow  to use memory asynchronously freed in another streams as long as a stream ordering dependency of the allocating stream on the free action exists. hip events and null stream interactions can create the required stream ordered dependencies. (default enabled) ",
									"computeroutput": [
										"hipMemAllocAsync"
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ead1da20661bcf84605088d3e20120b653",
						"prot": "public"
					},
					"name": [
						"hipMemPoolReuseAllowOpportunistic"
					],
					"initializer": [
						"= 0x2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = int) Allow reuse of already completed frees when there is no dependency between the free and allocation. (default enabled) "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2eaa1fa58a079f0a1b31aef2baf543a8dd7",
						"prot": "public"
					},
					"name": [
						"hipMemPoolReuseAllowInternalDependencies"
					],
					"initializer": [
						"= 0x3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "(value type = int) Allow  to insert new stream dependencies in order to establish the stream ordering required to reuse a piece of memory released by cuFreeAsync (default enabled). ",
									"computeroutput": [
										"hipMemAllocAsync"
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ea601b937cbdd057d30d4e136360e11220",
						"prot": "public"
					},
					"name": [
						"hipMemPoolAttrReleaseThreshold"
					],
					"initializer": [
						"= 0x4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = uint64_t) Amount of reserved memory in bytes to hold onto before trying to release memory back to the OS. When more than the release threshold bytes of memory are held by the memory pool, the allocator will try to release memory back to the OS on the next call to stream, event or context synchronize. (default 0) "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ea4e4e69ffb29a939c6970467312bad712",
						"prot": "public"
					},
					"name": [
						"hipMemPoolAttrReservedMemCurrent"
					],
					"initializer": [
						"= 0x5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = uint64_t) Amount of backing memory currently allocated for the mempool. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ea30c968e449328135ef9610f12e740582",
						"prot": "public"
					},
					"name": [
						"hipMemPoolAttrReservedMemHigh"
					],
					"initializer": [
						"= 0x6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = uint64_t) High watermark of backing memory allocated for the mempool since the last time it was reset. High watermark can only be reset to zero. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ea0574c734ba2b79ba156a8e94739f07e5",
						"prot": "public"
					},
					"name": [
						"hipMemPoolAttrUsedMemCurrent"
					],
					"initializer": [
						"= 0x7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = uint64_t) Amount of memory from the pool that is currently in use by the application. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga987c8e7a7e8171832a6647150854ca2ea7d0d0e5e6ce19fdaaef2674a305930d0",
						"prot": "public"
					},
					"name": [
						"hipMemPoolAttrUsedMemHigh"
					],
					"initializer": [
						"= 0x8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"(value type = uint64_t) High watermark of the amount of memory from the pool that was in use by the application since the last time it was reset. High watermark can only be reset to zero. "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP memory pool attributes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "862",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "863",
						"bodyend": "917"
					}
				}
			]
		},
		"hipMemLocationType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gaee88a54f9376456dcabf3fdcf9b9810f",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemLocationType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggaee88a54f9376456dcabf3fdcf9b9810fa5403e1e0771ce147fc29edfb2c3e84a3",
						"prot": "public"
					},
					"name": [
						"hipMemLocationTypeInvalid"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaee88a54f9376456dcabf3fdcf9b9810fa7dd18d5d22a3ab95b64f2daa8e3b33de",
						"prot": "public"
					},
					"name": [
						"hipMemLocationTypeDevice"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Device location, thus it's HIP device ID. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Specifies the type of location "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "921",
						"column": "2",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "921",
						"bodyend": "924"
					}
				}
			]
		},
		"hipMemAccessFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gac20e3511da42142b23285e557e43facd",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemAccessFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggac20e3511da42142b23285e557e43facda3fed6a3f2f6435894c1a9b0cc707bbaa",
						"prot": "public"
					},
					"name": [
						"hipMemAccessFlagsProtNone"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Default, make the address range not accessible. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac20e3511da42142b23285e557e43facda1246e2630cabcfdf92292952395b3bca",
						"prot": "public"
					},
					"name": [
						"hipMemAccessFlagsProtRead"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Set the address range read accessible. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac20e3511da42142b23285e557e43facda6c92304d286d8c38614e2b6b76b36734",
						"prot": "public"
					},
					"name": [
						"hipMemAccessFlagsProtReadWrite"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						{
							"para": [
								"Set the address range read-write accessible. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Specifies the memory protection flags for mapping "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "938",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "938",
						"bodyend": "942"
					}
				}
			]
		},
		"hipMemAllocationType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gadefdae0569c5be4538c065396ed758f5",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemAllocationType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggadefdae0569c5be4538c065396ed758f5ab500eee492813b9c90ade2a8c852a3ae",
						"prot": "public"
					},
					"name": [
						"hipMemAllocationTypeInvalid"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggadefdae0569c5be4538c065396ed758f5a8b9b2a4595b9ff034a6a5d053c95c227",
						"prot": "public"
					},
					"name": [
						"hipMemAllocationTypePinned"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"This allocation type is 'pinned', i.e. cannot migrate from its current location while the application is actively using it "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggadefdae0569c5be4538c065396ed758f5a7827526b3897c596109b6024bf38502a",
						"prot": "public"
					},
					"name": [
						"hipMemAllocationTypeMax"
					],
					"initializer": [
						"= 0x7FFFFFFF"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Defines the allocation types "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "953",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "953",
						"bodyend": "960"
					}
				}
			]
		},
		"hipMemAllocationHandleType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemAllocationHandleType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga07b4aea600602a99d135dd2ca87faa92a72c5024a4f58cb4de197d6314e4c66a9",
						"prot": "public"
					},
					"name": [
						"hipMemHandleTypeNone"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						{
							"para": [
								"Does not allow any export mechanism. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga07b4aea600602a99d135dd2ca87faa92a9f261aad3214093c5b1aa2838b157d66",
						"prot": "public"
					},
					"name": [
						"hipMemHandleTypePosixFileDescriptor"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Allows a file descriptor for exporting. Permitted only on POSIX systems. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga07b4aea600602a99d135dd2ca87faa92a3b7ddb718292009167abee4779fe03c8",
						"prot": "public"
					},
					"name": [
						"hipMemHandleTypeWin32"
					],
					"initializer": [
						"= 0x2"
					],
					"briefdescription": [
						{
							"para": [
								"Allows a Win32 NT handle for exporting. (HANDLE) "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga07b4aea600602a99d135dd2ca87faa92a54d89168742fee74bb05e02d3b699f46",
						"prot": "public"
					},
					"name": [
						"hipMemHandleTypeWin32Kmt"
					],
					"initializer": [
						"= 0x4"
					],
					"briefdescription": [
						{
							"para": [
								"Allows a Win32 KMT handle for exporting. (D3DKMT_HANDLE) "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Flags for specifying handle types for memory pool allocations "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "965",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "965",
						"bodyend": "970"
					}
				}
			]
		},
		"hipJitOption": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga54cbbb7697c63cf9b13383b49819d500",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipJitOption"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500adb9370990a4403b1e5e03724031b4ecb",
						"prot": "public"
					},
					"name": [
						"hipJitOptionMaxRegisters"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a5c9a55072a6f4ed3ca61604ef66a4a86",
						"prot": "public"
					},
					"name": [
						"hipJitOptionThreadsPerBlock"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a8ee4752e49439cb2fbecdf1dcc69871e",
						"prot": "public"
					},
					"name": [
						"hipJitOptionWallTime"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a144aa71e24aa20fb4162e9978d6c66d1",
						"prot": "public"
					},
					"name": [
						"hipJitOptionInfoLogBuffer"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a9692ed236671843b99de1dbfc7aadb8f",
						"prot": "public"
					},
					"name": [
						"hipJitOptionInfoLogBufferSizeBytes"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a160e81f3788646e12f4526027c4c8e77",
						"prot": "public"
					},
					"name": [
						"hipJitOptionErrorLogBuffer"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a85c04bedf8aaf7a55628301a9672dd71",
						"prot": "public"
					},
					"name": [
						"hipJitOptionErrorLogBufferSizeBytes"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a853499616f10eaa99df134371f0ed075",
						"prot": "public"
					},
					"name": [
						"hipJitOptionOptimizationLevel"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500ab8e971a00aa557a668791e3403aafeca",
						"prot": "public"
					},
					"name": [
						"hipJitOptionTargetFromContext"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a4c83761657de80ef98f0a34d1d22f323",
						"prot": "public"
					},
					"name": [
						"hipJitOptionTarget"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500af0117529faba4b00c265add35d44c71c",
						"prot": "public"
					},
					"name": [
						"hipJitOptionFallbackStrategy"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500accc9993c7598bdcbfe2c7738fc2dc2a6",
						"prot": "public"
					},
					"name": [
						"hipJitOptionGenerateDebugInfo"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500ad42abb970a18154f23e359e097d5aa89",
						"prot": "public"
					},
					"name": [
						"hipJitOptionLogVerbose"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a75f073079cf61c48325633878532ab01",
						"prot": "public"
					},
					"name": [
						"hipJitOptionGenerateLineInfo"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a03909311a4e24160a3b04796cddb5772",
						"prot": "public"
					},
					"name": [
						"hipJitOptionCacheMode"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500ae942560c8927000dc8933aff96f4ed9e",
						"prot": "public"
					},
					"name": [
						"hipJitOptionSm3xOpt"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a10b1271048a9a8adc55aebcfad56b5b2",
						"prot": "public"
					},
					"name": [
						"hipJitOptionFastCompile"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga54cbbb7697c63cf9b13383b49819d500a639edb73879171ee5c22ce54d7d5b1d5",
						"prot": "public"
					},
					"name": [
						"hipJitOptionNumOptions"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipJitOption "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "994",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "994",
						"bodyend": "1013"
					}
				}
			]
		},
		"hipFuncAttribute": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga4a800faf1ce60529b4f052a30ef10b85",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipFuncAttribute"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga4a800faf1ce60529b4f052a30ef10b85a77db750682af411fb1aaef6b916e65ad",
						"prot": "public"
					},
					"name": [
						"hipFuncAttributeMaxDynamicSharedMemorySize"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4a800faf1ce60529b4f052a30ef10b85a492a0ab1879358bbb039545bd899d527",
						"prot": "public"
					},
					"name": [
						"hipFuncAttributePreferredSharedMemoryCarveout"
					],
					"initializer": [
						"= 9"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4a800faf1ce60529b4f052a30ef10b85a78119858f4a6a22782ce980b8ce4fb95",
						"prot": "public"
					},
					"name": [
						"hipFuncAttributeMax"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"On AMD devices and some Nvidia devices, these hints and controls are ignored. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1017",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1017",
						"bodyend": "1021"
					}
				}
			]
		},
		"hipFuncCache_t": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipFuncCache_t"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga86e5c5692645963a9a673e1aa88ba6caa0813fbaa008ce1231ff9fed3911eb3af",
						"prot": "public"
					},
					"name": [
						"hipFuncCachePreferNone"
					],
					"briefdescription": [
						{
							"para": [
								"no preference for shared memory or L1 (default) "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga86e5c5692645963a9a673e1aa88ba6caa9b34337dfbadba25ed2aa270bbcabc43",
						"prot": "public"
					},
					"name": [
						"hipFuncCachePreferShared"
					],
					"briefdescription": [
						{
							"para": [
								"prefer larger shared memory and smaller L1 cache "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga86e5c5692645963a9a673e1aa88ba6caa636a3c140db6b9d4a8bf7d5a61c398c5",
						"prot": "public"
					},
					"name": [
						"hipFuncCachePreferL1"
					],
					"briefdescription": [
						{
							"para": [
								"prefer larger L1 cache and smaller shared memory "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga86e5c5692645963a9a673e1aa88ba6caa0ddab0e840107634a152033103be44d7",
						"prot": "public"
					},
					"name": [
						"hipFuncCachePreferEqual"
					],
					"briefdescription": [
						{
							"para": [
								"prefer equal size L1 cache and shared memory "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"On AMD devices and some Nvidia devices, these hints and controls are ignored. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1025",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1025",
						"bodyend": "1030"
					}
				}
			]
		},
		"hipSharedMemConfig": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipSharedMemConfig"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga2e17b71d94ac350f2ccd914fd49d104eaf5b325c9b7bde878913f768eaba5014d",
						"prot": "public"
					},
					"name": [
						"hipSharedMemBankSizeDefault"
					],
					"briefdescription": [
						{
							"para": [
								"The compiler selects a device-specific value for the banking. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2e17b71d94ac350f2ccd914fd49d104ea0a95a6e0c33106c42d66ab9476ff954a",
						"prot": "public"
					},
					"name": [
						"hipSharedMemBankSizeFourByte"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Shared mem is banked at 4-bytes intervals and performs best when adjacent threads access data 4 bytes apart. "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga2e17b71d94ac350f2ccd914fd49d104ea64518b4f5a25f536c883330167e79258",
						"prot": "public"
					},
					"name": [
						"hipSharedMemBankSizeEightByte"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Shared mem is banked at 8-byte intervals and performs best when adjacent threads access data 4 bytes apart. "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						{
							"simplesect": [
								{
									"$": {
										"kind": "warning"
									},
									"para": [
										"On AMD devices and some Nvidia devices, these hints and controls are ignored. "
									]
								}
							]
						}
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1034",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1034",
						"bodyend": "1040"
					}
				}
			]
		},
		"hipExternalMemoryHandleType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga47a3a9058e535f2a43a20982c39031bb",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipExternalMemoryHandleType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bba754a120bc60fcfbf5f5290967c2bd299",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeOpaqueFd"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bbab289071d76ed3fa028b0b72d6fe57863",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeOpaqueWin32"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bbaa6231ff4442f793dc4472c406373909b",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeOpaqueWin32Kmt"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bba84a3c0206a80b99170a9d9196d28d6d4",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeD3D12Heap"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bba2e2c241fcec7b8fcf092e271df4d900f",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeD3D12Resource"
					],
					"initializer": [
						"= 5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bba07b9b9bd3833c3f66bae6d13f66c7f67",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeD3D11Resource"
					],
					"initializer": [
						"= 6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bbad703b9b79a0f0d36eb8530ec81c0c4a0",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeD3D11ResourceKmt"
					],
					"initializer": [
						"= 7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga47a3a9058e535f2a43a20982c39031bba45c9deab844e97f375ea28bec2877312",
						"prot": "public"
					},
					"name": [
						"hipExternalMemoryHandleTypeNvSciBuf"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1078",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1078",
						"bodyend": "1087"
					}
				}
			]
		},
		"hipExternalSemaphoreHandleType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga4ea2e2748bf8cefee1d1cc3c800c10d5",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipExternalSemaphoreHandleType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5acb2af352ae589486b706635b5f273911",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeOpaqueFd"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5aeb0d35bd0276f67e86091dc3969355ac",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeOpaqueWin32"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5a44c1a257f0e2605f6efd44741851e8d7",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5afff89d172e5aad8afea7021c55fa4fc1",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeD3D12Fence"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5aa8d81456306ed714fb2ff92026a27dbe",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeD3D11Fence"
					],
					"initializer": [
						"= 5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5a317541984f3cd4af445918d4ac63ea64",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeNvSciSync"
					],
					"initializer": [
						"= 6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5a4e869593fe59e351dd981d7a4de95ec5",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeKeyedMutex"
					],
					"initializer": [
						"= 7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5a3c536b1ed5fdfd7618738ee61633e7a0",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeKeyedMutexKmt"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5aef4e7167a49308a989588fcef88fbefe",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeTimelineSemaphoreFd"
					],
					"initializer": [
						"= 9"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4ea2e2748bf8cefee1d1cc3c800c10d5aca482a93b49594fcc837429db03d96f1",
						"prot": "public"
					},
					"name": [
						"hipExternalSemaphoreHandleTypeTimelineSemaphoreWin32"
					],
					"initializer": [
						"= 10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1116",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1116",
						"bodyend": "1127"
					}
				}
			]
		},
		"hipGraphicsRegisterFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gabb8a4ae6dc64f7315c302c5b3b6e1c59",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphicsRegisterFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggabb8a4ae6dc64f7315c302c5b3b6e1c59aadea95241fb75cc9ce058b8a42007734",
						"prot": "public"
					},
					"name": [
						"hipGraphicsRegisterFlagsNone"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggabb8a4ae6dc64f7315c302c5b3b6e1c59a16e70253402db71a1c1b073755494a03",
						"prot": "public"
					},
					"name": [
						"hipGraphicsRegisterFlagsReadOnly"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"HIP will not write to this registered resource. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggabb8a4ae6dc64f7315c302c5b3b6e1c59a5d3ee9600bd812fd1f1c26f66c77e881",
						"prot": "public"
					},
					"name": [
						"hipGraphicsRegisterFlagsWriteDiscard"
					],
					"initializer": [
						"=\n        2"
					],
					"briefdescription": [
						{
							"para": [
								"HIP will only write and will not read from this registered resource. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggabb8a4ae6dc64f7315c302c5b3b6e1c59af1e660943886c56aef11ed34c8ee86f0",
						"prot": "public"
					},
					"name": [
						"hipGraphicsRegisterFlagsSurfaceLoadStore"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						{
							"para": [
								"HIP will bind this resource to a surface. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggabb8a4ae6dc64f7315c302c5b3b6e1c59a4f30ff3c46b068f0e5d138c3d9bfff11",
						"prot": "public"
					},
					"name": [
						"hipGraphicsRegisterFlagsTextureGather"
					],
					"initializer": [
						"=\n        8"
					],
					"briefdescription": [
						{
							"para": [
								"HIP will perform texture gather operations on this registered resource. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP Access falgs for Interop resources. "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1192",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1192",
						"bodyend": "1200"
					}
				}
			]
		},
		"hipGraphNodeType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga4727d20b89566832c74b762f987b9728",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphNodeType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a9949391db00445f7a4a0b0465d093e36",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeKernel"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"GPU kernel node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a635989252eae22c3002a001d63e1cb27",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemcpy"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Memcpy node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a3cbfa0e34c1665922fab5abc77c213a1",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemset"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						{
							"para": [
								"Memset node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728aada6f6582063a8a1db454d4950d05f1f",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeHost"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						{
							"para": [
								"Host (executable) node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a3c0d48ee17536fa328c7f688cea29341",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeGraph"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						{
							"para": [
								"Node which executes an embedded graph. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728ad4f074d6484c61be503b22addd170f5d",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeEmpty"
					],
					"initializer": [
						"= 5"
					],
					"briefdescription": [
						{
							"para": [
								"Empty (no-op) node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a6ecc1f3e6df39acdb8fd75ee6c7596f4",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeWaitEvent"
					],
					"initializer": [
						"= 6"
					],
					"briefdescription": [
						{
							"para": [
								"External event wait node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a40f8dc14f77efa8409c763d9014f2f79",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeEventRecord"
					],
					"initializer": [
						"= 7"
					],
					"briefdescription": [
						{
							"para": [
								"External event record node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a5cfa4c3858247a14c618e2c648ed1c3d",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeExtSemaphoreSignal"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						{
							"para": [
								"External Semaphore signal node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728adde9842fa2d0f9eccc94058f6d40c69f",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeExtSemaphoreWait"
					],
					"initializer": [
						"= 9"
					],
					"briefdescription": [
						{
							"para": [
								"External Semaphore wait node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728ab2f8761e77c317de516ee923db962229",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemAlloc"
					],
					"initializer": [
						"= 10"
					],
					"briefdescription": [
						{
							"para": [
								"Memory alloc node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728ac8264d54af4199cd9194611932db6883",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemFree"
					],
					"initializer": [
						"= 11"
					],
					"briefdescription": [
						{
							"para": [
								"Memory free node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728ad1dfcaa91d4817fae0940b911ea74460",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemcpyFromSymbol"
					],
					"initializer": [
						"= 12"
					],
					"briefdescription": [
						{
							"para": [
								"MemcpyFromSymbol node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728ad1e85c6612c6e59fb9188c9ca87fb64f",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeMemcpyToSymbol"
					],
					"initializer": [
						"= 13"
					],
					"briefdescription": [
						{
							"para": [
								"MemcpyToSymbol node. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4727d20b89566832c74b762f987b9728a8669923fef17da304f3f5189615b054f",
						"prot": "public"
					},
					"name": [
						"hipGraphNodeTypeCount"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipGraphNodeType "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1228",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1228",
						"bodyend": "1244"
					}
				}
			]
		},
		"hipAccessProperty": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga193abcc67d55b127bc5c0bc3625de907",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipAccessProperty"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga193abcc67d55b127bc5c0bc3625de907a5e691c3d2417d1fabbd2eb753829db97",
						"prot": "public"
					},
					"name": [
						"hipAccessPropertyNormal"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga193abcc67d55b127bc5c0bc3625de907ac4b5d4099632e30e4c21c77490290319",
						"prot": "public"
					},
					"name": [
						"hipAccessPropertyStreaming"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga193abcc67d55b127bc5c0bc3625de907aa1a91b8045c860f890f8741de827f92f",
						"prot": "public"
					},
					"name": [
						"hipAccessPropertyPersisting"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1279",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1279",
						"bodyend": "1283"
					}
				}
			]
		},
		"hipLaunchAttributeID": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga4026e9ccca8bb88888ad739e0f7586b4",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipLaunchAttributeID"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga4026e9ccca8bb88888ad739e0f7586b4ae9c06559f2a188eb87818348cefc4171",
						"prot": "public"
					},
					"name": [
						"hipLaunchAttributeAccessPolicyWindow"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Valid for Streams, graph nodes, launches "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4026e9ccca8bb88888ad739e0f7586b4af2e2bdbec3458fd4810e9d18b9e527af",
						"prot": "public"
					},
					"name": [
						"hipLaunchAttributeCooperative"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Valid for graph nodes, launches "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga4026e9ccca8bb88888ad739e0f7586b4a358f69dfec66d2cfe93b25f44845bcc1",
						"prot": "public"
					},
					"name": [
						"hipLaunchAttributePriority"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Valid for graph node, streams, launches "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Launch Attribute ID "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1295",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1295",
						"bodyend": "1299"
					}
				}
			]
		},
		"hipGraphExecUpdateResult": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gac79a2b2c0f83ae81c9325978c044892e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphExecUpdateResult"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892eac1f2b2a324b22bbca94f6c4f21039d8f",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateSuccess"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						{
							"para": [
								"The update succeeded. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892ea67878e33ef3ec61463a920f149e082fe",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateError"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"The update failed for an unexpected reason which is described in the return value of the function "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892ea25d787d82ab0b453c931b676272ba75b",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorTopologyChanged"
					],
					"initializer": [
						"= 0x2"
					],
					"briefdescription": [
						{
							"para": [
								"The update failed because the topology changed. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892ea1f13abf8d4c8b14e7db99a224cc1620b",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorNodeTypeChanged"
					],
					"initializer": [
						"= 0x3"
					],
					"briefdescription": [
						{
							"para": [
								"The update failed because a node type changed. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892eaa1c53ed0892dc10db16e4e229ff784e9",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorFunctionChanged"
					],
					"initializer": [
						"=\n      0x4"
					],
					"briefdescription": [
						{
							"para": [
								"The update failed because the function of a kernel node changed. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892eaddd407406093becb360f4f971e672d47",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorParametersChanged"
					],
					"initializer": [
						"=\n      0x5"
					],
					"briefdescription": [
						{
							"para": [
								"The update failed because the parameters changed in a way that is not supported. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892ea0445beac1f3c3235e7f4ed315e17fba0",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorNotSupported"
					],
					"initializer": [
						"=\n      0x6"
					],
					"briefdescription": [
						{
							"para": [
								"The update failed because something about the node is not supported. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac79a2b2c0f83ae81c9325978c044892ea2cdf6a53a1434e4773cdc54a4d312a17",
						"prot": "public"
					},
					"name": [
						"hipGraphExecUpdateErrorUnsupportedFunctionChange"
					],
					"initializer": [
						"= 0x7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Graph execution update result "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1340",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1340",
						"bodyend": "1353"
					}
				}
			]
		},
		"hipStreamCaptureMode": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipStreamCaptureMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga3ae2cd03e623963eba9e0064d270ce4ca8e07e28586b1178e96e310f983c4a5d2",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureModeGlobal"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga3ae2cd03e623963eba9e0064d270ce4ca42813de2ec53c9ada7ff8b6f3961bf6e",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureModeThreadLocal"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga3ae2cd03e623963eba9e0064d270ce4ca0b1aab61f226d1c7e40ba090f7fca255",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureModeRelaxed"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1355",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1355",
						"bodyend": "1359"
					}
				}
			]
		},
		"hipStreamCaptureStatus": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipStreamCaptureStatus"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggacb066bac5e39dd1b82926e02db1756a7a8c4ef8104913161030ff321b1454d4c3",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureStatusNone"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Stream is not capturing. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacb066bac5e39dd1b82926e02db1756a7abf89793c47e573fd8da9afad98d442d9",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureStatusActive"
					],
					"briefdescription": [
						{
							"para": [
								"Stream is actively capturing. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggacb066bac5e39dd1b82926e02db1756a7a0d6ad4c0e0e50ddab3cf3b87ac7f38ce",
						"prot": "public"
					},
					"name": [
						"hipStreamCaptureStatusInvalidated"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Stream is part of a capture sequence that has been invalidated, but not terminated "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1360",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1360",
						"bodyend": "1365"
					}
				}
			]
		},
		"hipStreamUpdateCaptureDependenciesFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga76c22e13ab588b0a551814adca12e91a",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipStreamUpdateCaptureDependenciesFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga76c22e13ab588b0a551814adca12e91aa46f516525ec015f5075adae5b9796187",
						"prot": "public"
					},
					"name": [
						"hipStreamAddCaptureDependencies"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Add new nodes to the dependency set. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga76c22e13ab588b0a551814adca12e91aab0016a2fc2ce71f217ddc2717e9433aa",
						"prot": "public"
					},
					"name": [
						"hipStreamSetCaptureDependencies"
					],
					"briefdescription": [
						{
							"para": [
								"Replace the dependency set with the new nodes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1367",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1367",
						"bodyend": "1370"
					}
				}
			]
		},
		"hipGraphMemAttributeType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga920ab2073b2ff77f37ae672d376ffe7e",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphMemAttributeType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga920ab2073b2ff77f37ae672d376ffe7ea4a7f157d4ca32bf67d3cb8760692e44b",
						"prot": "public"
					},
					"name": [
						"hipGraphMemAttrUsedMemCurrent"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Amount of memory, in bytes, currently associated with graphs. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga920ab2073b2ff77f37ae672d376ffe7ea9bed75ed79b9d7f7baa9432c162be774",
						"prot": "public"
					},
					"name": [
						"hipGraphMemAttrUsedMemHigh"
					],
					"briefdescription": [
						{
							"para": [
								"High watermark of memory, in bytes, associated with graphs since the last time. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga920ab2073b2ff77f37ae672d376ffe7ead23bfe68f6bda084c491303c36fdd278",
						"prot": "public"
					},
					"name": [
						"hipGraphMemAttrReservedMemCurrent"
					],
					"briefdescription": [
						{
							"para": [
								"Amount of memory, in bytes, currently allocated for graphs. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga920ab2073b2ff77f37ae672d376ffe7ea333e093c34ad2272c53f96efe3cb9717",
						"prot": "public"
					},
					"name": [
						"hipGraphMemAttrReservedMemHigh"
					],
					"briefdescription": [
						{
							"para": [
								"High watermark of memory, in bytes, currently allocated for graphs. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1372",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1372",
						"bodyend": "1377"
					}
				}
			]
		},
		"hipUserObjectFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga87db9f321bad9b03ff2859f4509791f2",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipUserObjectFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga87db9f321bad9b03ff2859f4509791f2a027010c7f334c1d21b77da618b20928b",
						"prot": "public"
					},
					"name": [
						"hipUserObjectNoDestructorSync"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Destructor execution is not synchronized. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1378",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1378",
						"bodyend": "1380"
					}
				}
			]
		},
		"hipUserObjectRetainFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga614792f2c22f324d4125f616ceb5afda",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipUserObjectRetainFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga614792f2c22f324d4125f616ceb5afdaaf3e94cc868dccc75612acfafc23b86de",
						"prot": "public"
					},
					"name": [
						"hipGraphUserObjectMove"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Add new reference or retain. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1382",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1382",
						"bodyend": "1384"
					}
				}
			]
		},
		"hipGraphInstantiateFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gaedc0107efcf1bd34d95e42cc04fa28f4",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphInstantiateFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggaedc0107efcf1bd34d95e42cc04fa28f4a5db4094d6829b599d4c47c25cd4dfb87",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateFlagAutoFreeOnLaunch"
					],
					"initializer": [
						"=\n      1"
					],
					"briefdescription": [
						{
							"para": [
								"Automatically free memory allocated in a graph before relaunching. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaedc0107efcf1bd34d95e42cc04fa28f4a9df2be596a2520102068529ab4477c8a",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateFlagUpload"
					],
					"initializer": [
						"=\n      2"
					],
					"briefdescription": [
						{
							"para": [
								"Automatically upload the graph after instantiaton. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaedc0107efcf1bd34d95e42cc04fa28f4ab1bf70c734aea099510b9157914a6515",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateFlagDeviceLaunch"
					],
					"initializer": [
						"=\n      4"
					],
					"briefdescription": [
						{
							"para": [
								"Instantiate the graph to be launchable from the device. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaedc0107efcf1bd34d95e42cc04fa28f4a8f535452f119e17823fb674d9b9f693f",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateFlagUseNodePriority"
					],
					"initializer": [
						"=\n      8"
					],
					"briefdescription": [
						{
							"para": [
								"Run the graph using the per-node priority attributes rather than the priority of the stream it is launched into. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1386",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1386",
						"bodyend": "1395"
					}
				}
			]
		},
		"hipGraphDebugDotFlags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga5f0b6b05428bbd208a4adba36bbf3036",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphDebugDotFlags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036af0c573ee94c6758b5eabf5f4f13d408f",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsVerbose"
					],
					"initializer": [
						"= 1\n      << 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Output all debug data as if every debug flag is enabled "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036a5180492c462e92a98fabcb0454f69aef",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsKernelNodeParams"
					],
					"initializer": [
						"= 1 << 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  to output ",
									"ref": [
										{
											"_": "hipKernelNodeParams",
											"$": {
												"refid": "structhip_kernel_node_params",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036af643dcafad92388a9532e94dd671ecf9",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsMemcpyNodeParams"
					],
					"initializer": [
						"= 1 << 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  to output ",
									"ref": [
										{
											"_": "hipMemcpy3DParms",
											"$": {
												"refid": "structhip_memcpy3_d_parms",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036a162e1cc37582c814278a8a257f65255e",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsMemsetNodeParams"
					],
					"initializer": [
						"= 1 << 4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  to output ",
									"ref": [
										{
											"_": "hipMemsetParams",
											"$": {
												"refid": "structhip_memset_params",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036ac3530926183d0cef94a74b6bd94ea07f",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsHostNodeParams"
					],
					"initializer": [
						"= 1 << 5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  to output ",
									"ref": [
										{
											"_": "hipHostNodeParams",
											"$": {
												"refid": "structhip_host_node_params",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036ad9104a8ce1454c6d536e363724e18dad",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsEventNodeParams"
					],
					"initializer": [
						"= 1\n      << 6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Adds hipEvent_t handle from record and wait nodes to output "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036ab3497ea43f2e47877d8e96a0e97b7225",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsExtSemasSignalNodeParams"
					],
					"initializer": [
						"= 1\n      << 7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  values to output ",
									"ref": [
										{
											"_": "hipExternalSemaphoreSignalNodeParams",
											"$": {
												"refid": "structhip_external_semaphore_signal_node_params",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036a7669e2948dd9b9ce1b18144b2dacce66",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsExtSemasWaitNodeParams"
					],
					"initializer": [
						"= 1\n      << 8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Adds  to output ",
									"ref": [
										{
											"_": "hipExternalSemaphoreWaitNodeParams",
											"$": {
												"refid": "structhip_external_semaphore_wait_node_params",
												"kindref": "compound"
											}
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036a0acef45295f4817dce9f90e70aacfe9e",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsKernelNodeAttributes"
					],
					"initializer": [
						"= 1\n      << 9"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Adds hipKernelNodeAttrID values to output "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga5f0b6b05428bbd208a4adba36bbf3036a9f0cd5093721d6ee605d48074f110c65",
						"prot": "public"
					},
					"name": [
						"hipGraphDebugDotFlagsHandles"
					],
					"initializer": [
						"= 1\n      << 10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Adds node handles and every kernel function handle to output "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1397",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1397",
						"bodyend": "1414"
					}
				}
			]
		},
		"hipGraphInstantiateResult": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga1275741e4687f414904caae01fecfd2f",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipGraphInstantiateResult"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga1275741e4687f414904caae01fecfd2fabcf7aafc228a6c17c7405160d0e32e70",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateSuccess"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Instantiation Success "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1275741e4687f414904caae01fecfd2fa93eaf8955b0c17e270bc2231c7dfeaa2",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateError"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Instantiation failed for an unexpected reason which is described in the return value of the function "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1275741e4687f414904caae01fecfd2fa961222f2a70390abbf60f71ed878cf65",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateInvalidStructure"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Instantiation failed due to invalid structure, such as cycles "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1275741e4687f414904caae01fecfd2fa3c30667e32eb738974b1455d3f23b7c6",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateNodeOperationNotSupported"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Instantiation for device launch failed because the graph contained an unsupported operation "
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga1275741e4687f414904caae01fecfd2fa4ec62027dbfb29cbd365e9c94f5f325e",
						"prot": "public"
					},
					"name": [
						"hipGraphInstantiateMultipleDevicesNotSupported"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								"Instantiation for device launch failed due to the nodes belonging to different contexts "
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hipGraphInstantiateWithParams results "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1419",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1419",
						"bodyend": "1429"
					}
				}
			]
		},
		"hipMemAllocationGranularity_flags": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gac339d242785822f679962c10b45037c8",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemAllocationGranularity_flags"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggac339d242785822f679962c10b45037c8abdb60c08374a9bdf35b86ae3d6650597",
						"prot": "public"
					},
					"name": [
						"hipMemAllocationGranularityMinimum"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						{
							"para": [
								"Minimum granularity. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggac339d242785822f679962c10b45037c8ae21e3d97d84b2c61d2aee2b2a9293c34",
						"prot": "public"
					},
					"name": [
						"hipMemAllocationGranularityRecommended"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Recommended granularity for performance. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Flags for granularity "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1490",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1490",
						"bodyend": "1493"
					}
				}
			]
		},
		"hipMemHandleType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga7a1387fab190ef8404d955871eeaa7fa",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemHandleType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga7a1387fab190ef8404d955871eeaa7faad503b171c92fc9e224ed41f49ab5fef7",
						"prot": "public"
					},
					"name": [
						"hipMemHandleTypeGeneric"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						{
							"para": [
								"Generic handle type. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Memory handle type "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1498",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1498",
						"bodyend": "1500"
					}
				}
			]
		},
		"hipMemOperationType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gab6a581b72da85bebd9a6e02a27e22d49",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipMemOperationType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggab6a581b72da85bebd9a6e02a27e22d49a003c437dbe8ae98e1cb7ad0837b1d489",
						"prot": "public"
					},
					"name": [
						"hipMemOperationTypeMap"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Map operation. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggab6a581b72da85bebd9a6e02a27e22d49a341e660cc0facbb2576d70817eed0fc5",
						"prot": "public"
					},
					"name": [
						"hipMemOperationTypeUnmap"
					],
					"initializer": [
						"= 0x2"
					],
					"briefdescription": [
						{
							"para": [
								"Unmap operation. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Memory operation types "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1505",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1505",
						"bodyend": "1508"
					}
				}
			]
		},
		"hipArraySparseSubresourceType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gafd065a07554c87b025803c4b0bb98c0c",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipArraySparseSubresourceType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggafd065a07554c87b025803c4b0bb98c0ca4950320e5bdbe31969dbf76b1112023c",
						"prot": "public"
					},
					"name": [
						"hipArraySparseSubresourceTypeSparseLevel"
					],
					"initializer": [
						"= 0x0"
					],
					"briefdescription": [
						{
							"para": [
								"Sparse level. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafd065a07554c87b025803c4b0bb98c0ca662c94e0dc0635529c2c003cf64d3bdf",
						"prot": "public"
					},
					"name": [
						"hipArraySparseSubresourceTypeMiptail"
					],
					"initializer": [
						"= 0x1"
					],
					"briefdescription": [
						{
							"para": [
								"Miptail. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Subresource types for sparse arrays "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1513",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1513",
						"bodyend": "1516"
					}
				}
			]
		},
		"hiprtcResult": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gaaab4f1f28ef296fc6218b1ca8d21a6e9",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hiprtcResult"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab81164860f4404a742c0972867e178e2",
						"prot": "public"
					},
					"name": [
						"HIPRTC_SUCCESS"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Success. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ad9863c0cdec84a87cb37fbe071ff8f0a",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_OUT_OF_MEMORY"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						{
							"para": [
								"Out of memory. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a0d31deb90b120cbf8a94c30e6be27718",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_PROGRAM_CREATION_FAILURE"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						{
							"para": [
								"Failed to create program. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8af2964e85221c54309e50ea4a0dd79e",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_INVALID_INPUT"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						{
							"para": [
								"Invalid input. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a37d841d4dd1bae0e5e2cd1df2c24e795",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_INVALID_PROGRAM"
					],
					"initializer": [
						"= 4"
					],
					"briefdescription": [
						{
							"para": [
								"Invalid program. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a83af982bfeefbef92066ecf652131256",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_INVALID_OPTION"
					],
					"initializer": [
						"= 5"
					],
					"briefdescription": [
						{
							"para": [
								"Invalid option. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ad2b17befbe962616ab95250d40c8e62b",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_COMPILATION"
					],
					"initializer": [
						"= 6"
					],
					"briefdescription": [
						{
							"para": [
								"Compilation error. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9abe35c9e3a6ced42320085125bf400480",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_BUILTIN_OPERATION_FAILURE"
					],
					"initializer": [
						"= 7"
					],
					"briefdescription": [
						{
							"para": [
								"Failed in builtin operation. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a40cdc896c8f49fe4d13f2df51f09aaa3",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_NO_NAME_EXPRESSIONS_AFTER_COMPILATION"
					],
					"initializer": [
						"= 8"
					],
					"briefdescription": [
						{
							"para": [
								"No name expression after compilation. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ab5b7de5fc47672db6541f3973f3bf7b2",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_NO_LOWERED_NAMES_BEFORE_COMPILATION"
					],
					"initializer": [
						"= 9"
					],
					"briefdescription": [
						{
							"para": [
								"No lowered names before compilation. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9a8fcdce6a190a32526947d5285f16faf9",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_NAME_EXPRESSION_NOT_VALID"
					],
					"initializer": [
						"= 10"
					],
					"briefdescription": [
						{
							"para": [
								"Invalid name expression. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ac8e5161c2d09c3757b1e4609e2b99313",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_INTERNAL_ERROR"
					],
					"initializer": [
						"= 11"
					],
					"briefdescription": [
						{
							"para": [
								"Internal error. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggaaab4f1f28ef296fc6218b1ca8d21a6e9ade69dfa707075ad89d45c79d31825cba",
						"prot": "public"
					},
					"name": [
						"HIPRTC_ERROR_LINKING"
					],
					"initializer": [
						"= 100"
					],
					"briefdescription": [
						{
							"para": [
								"Error in linking. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hiprtc error code "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "49",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"bodystart": "49",
						"bodyend": "63"
					}
				}
			]
		},
		"hiprtcJIT_option": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1gafcd5a7fcd242d0772494b7949dc2fc96",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hiprtcJIT_option"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a8d23a8b51d26f5ecf67bad288c8597dd",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_MAX_REGISTERS"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Maximum registers may be used in a thread, passed to compiler. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a8ccf1b34e20bb3f501e13d31437eb13d",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_THREADS_PER_BLOCK"
					],
					"briefdescription": [
						{
							"para": [
								"Number of thread per block. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a45ef27cc3c2da815bcb90532382b7fa0",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_WALL_TIME"
					],
					"briefdescription": [
						{
							"para": [
								"Value for total wall clock time. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a1ebc9de297c25551735bf4d52d44258a",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INFO_LOG_BUFFER"
					],
					"briefdescription": [
						{
							"para": [
								"Pointer to the buffer with logged information. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a792fdb49074e5d77f1a5278beb742daa",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INFO_LOG_BUFFER_SIZE_BYTES"
					],
					"briefdescription": [
						{
							"para": [
								"Size of the buffer in bytes for logged info. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a4b801a873871eedf27b7fa9321b7622b",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_ERROR_LOG_BUFFER"
					],
					"briefdescription": [
						{
							"para": [
								"Pointer to the buffer with logged error(s) "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a863fcce371296c07c6b89447cb57c0cf",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_ERROR_LOG_BUFFER_SIZE_BYTES"
					],
					"briefdescription": [
						{
							"para": [
								"Size of the buffer in bytes for logged error(s) "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a958df8c3503be6927b7b688242b529c7",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_OPTIMIZATION_LEVEL"
					],
					"briefdescription": [
						{
							"para": [
								"Value of optimization level for generated codes. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a9040b35e875f2dad44a744a1847a50d6",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_TARGET_FROM_HIPCONTEXT"
					],
					"briefdescription": [
						{
							"para": [
								"The target context, which is the default. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a640b90eaa3fd7c947eec234443cfd301",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_TARGET"
					],
					"briefdescription": [
						{
							"para": [
								"JIT target. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96adb2a050a38ecc7d66c2069448ac6f054",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_FALLBACK_STRATEGY"
					],
					"briefdescription": [
						{
							"para": [
								"Fallback strategy. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a8896f570eef15b26d475484fff973474",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_GENERATE_DEBUG_INFO"
					],
					"briefdescription": [
						{
							"para": [
								"Generate debug information. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a6f18f968b6d054bfee22760974443e62",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_LOG_VERBOSE"
					],
					"briefdescription": [
						{
							"para": [
								"Generate log verbose. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a55599c2bccfd2a13919232ec6f6b6101",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_GENERATE_LINE_INFO"
					],
					"briefdescription": [
						{
							"para": [
								"Generate line number information. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96adb0a5f48b4b72d2227983e63b9963dd2",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_CACHE_MODE"
					],
					"briefdescription": [
						{
							"para": [
								"Set cache mode. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a8f1c69fcb47e884f6906dae61eb8f452",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_NEW_SM3X_OPT"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000001"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"New SM3X option. "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a0d9942c4eac505049fad898fdf98bfd3",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_FAST_COMPILE"
					],
					"briefdescription": [
						{
							"para": [
								"Set fast compile. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a9bb54aa554123939c14a6e00af74f051",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_GLOBAL_SYMBOL_NAMES"
					],
					"briefdescription": [
						{
							"para": [
								"Array of device symbol names to be relocated to the host. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96aed590d764cd91e4a2afd4cb116b64de0",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_GLOBAL_SYMBOL_ADDRESS"
					],
					"briefdescription": [
						{
							"para": [
								"Array of host addresses to be relocated to the device. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96ad943de49244f2822aa5f87fb625bd582",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_GLOBAL_SYMBOL_COUNT"
					],
					"briefdescription": [
						{
							"para": [
								"Number of symbol count. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96aedd72e0a8eee6a04e519563eba87e362",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_LTO"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000002"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"Enable link-time optimization for device code "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96aa0bdfec906832e8743ff96e2325e3e67",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_FTZ"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000003"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"Set single-precision denormals. "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a7b17d7bd5029b57524f8800082cf6c4e",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_PREC_DIV"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000004"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"Set single-precision floating-point division and reciprocals "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96ae05db8865745f6d3ff69e015c80d3e8d",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_PREC_SQRT"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000005"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"Set single-precision floating-point square root "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96af51bf4cc3d86da88bda30f57c72cf489",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_FMA"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"xrefsect": [
										{
											"$": {
												"id": "deprecated_1_deprecated000006"
											},
											"xreftitle": [
												"Deprecated"
											],
											"xrefdescription": [
												{
													"para": [
														"Enable floating-point multiplies and adds/subtracts operations "
													]
												}
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a8e8a4e2303c40fc25aa934bccac4537f",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_NUM_OPTIONS"
					],
					"briefdescription": [
						{
							"para": [
								"Number of options. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96a628d9863279118c66005a73137eda30f",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_IR_TO_ISA_OPT_EXT"
					],
					"initializer": [
						"= 10000"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Linker options to be passed on to compiler \n",
									"simplesect": [
										{
											"$": {
												"kind": "note"
											},
											"para": [
												"Only supported for the AMD platform. "
											]
										}
									]
								}
							]
						}
					]
				},
				{
					"$": {
						"id": "group___global_defs_1ggafcd5a7fcd242d0772494b7949dc2fc96ad58e8f4b31e135b18febf11c4ad26fca",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_IR_TO_ISA_OPT_COUNT_EXT"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						{
							"para": [
								{
									"_": "Count of linker options to be passed on to compiler \n",
									"simplesect": [
										{
											"$": {
												"kind": "note"
											},
											"para": [
												"Only supported for the AMD platform "
											]
										}
									]
								}
							]
						}
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hiprtc JIT option "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "69",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"bodystart": "69",
						"bodyend": "101"
					}
				}
			]
		},
		"hiprtcJITInputType": {
			"$": {
				"kind": "enum",
				"id": "group___global_defs_1ga8efcc39ccfeccddb37bc20a43f4516c2",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hiprtcJITInputType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a06f156db82f37f4c4024d284a4fad166",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_CUBIN"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						{
							"para": [
								"Input cubin. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a0e551b2a2c0d51a8e8c62fa5ae18c8c6",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_PTX"
					],
					"briefdescription": [
						{
							"para": [
								"Input PTX. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a388e4d71a2e4b7badfaf6ae176f7ff35",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_FATBINARY"
					],
					"briefdescription": [
						{
							"para": [
								"Input fat binary. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2ac23c8758ac02548a5e4a150537fa76d8",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_OBJECT"
					],
					"briefdescription": [
						{
							"para": [
								"Input object. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a42039862da5f1d6d07c9adbc24903f21",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_LIBRARY"
					],
					"briefdescription": [
						{
							"para": [
								"Input library. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a80ad0adb0daddf38cbed8ba173f0508d",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_NVVM"
					],
					"briefdescription": [
						{
							"para": [
								"Input NVVM. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a033ad11c49177ff43efe56a303bcf901",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_NUM_LEGACY_INPUT_TYPES"
					],
					"briefdescription": [
						{
							"para": [
								"Number of legacy input type. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a8545e4bdf49f8d6e985793f7a989ec96",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_LLVM_BITCODE"
					],
					"initializer": [
						"= 100"
					],
					"briefdescription": [
						{
							"para": [
								"LLVM bitcode or IR assembly. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2a4362d3c2cc8bc64ac7385cbe19a8e5c6",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_LLVM_BUNDLED_BITCODE"
					],
					"initializer": [
						"= 101"
					],
					"briefdescription": [
						{
							"para": [
								"LLVM bundled bitcode. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2ac5a64d49412dcb42d2819bdde3069b53",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_INPUT_LLVM_ARCHIVES_OF_BUNDLED_BITCODE"
					],
					"initializer": [
						"= 102"
					],
					"briefdescription": [
						{
							"para": [
								"LLVM archives of boundled bitcode. "
							]
						}
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "group___global_defs_1gga8efcc39ccfeccddb37bc20a43f4516c2afaad7699cda89eeb95371fa82d95a531",
						"prot": "public"
					},
					"name": [
						"HIPRTC_JIT_NUM_INPUT_TYPES"
					],
					"initializer": [
						"= (HIPRTC_JIT_NUM_LEGACY_INPUT_TYPES + 3)"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hiprtc JIT input type "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"line": "106",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hiprtc.h",
						"bodystart": "106",
						"bodyend": "118"
					}
				}
			]
		},
		"": {
			"$": {
				"kind": "enum",
				"id": "hip__runtime__api_8h_1abc5c98fcc1211af2b80116dd6e0a035d",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				""
			],
			"enumvalue": [
				{
					"$": {
						"id": "hip__runtime__api_8h_1abc5c98fcc1211af2b80116dd6e0a035da7983efb5b7e20777e472a31e612493e1",
						"prot": "public"
					},
					"name": [
						"HIP_SUCCESS"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "hip__runtime__api_8h_1abc5c98fcc1211af2b80116dd6e0a035da55cd2646e390532dd78713b3c1d45434",
						"prot": "public"
					},
					"name": [
						"HIP_ERROR_INVALID_VALUE"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "hip__runtime__api_8h_1abc5c98fcc1211af2b80116dd6e0a035da8a423b0ba9ec5d22ca1bb8df863731b3",
						"prot": "public"
					},
					"name": [
						"HIP_ERROR_NOT_INITIALIZED"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "hip__runtime__api_8h_1abc5c98fcc1211af2b80116dd6e0a035da360814a272c7dcd079558035e05b5da4",
						"prot": "public"
					},
					"name": [
						"HIP_ERROR_LAUNCH_OUT_OF_RESOURCES"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "37",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "37",
						"bodyend": "42"
					}
				}
			]
		},
		"hipDataType": {
			"$": {
				"kind": "enum",
				"id": "library__types_8h_1ae585642939954658aebf02e2db78115a",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipDataType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa377524e2d808cef87b192133ea11b32c",
						"prot": "public"
					},
					"name": [
						"HIP_R_32F"
					],
					"initializer": [
						"=  0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa2f0f3f4889c7184b70a81c9497d69393",
						"prot": "public"
					},
					"name": [
						"HIP_R_64F"
					],
					"initializer": [
						"=  1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa5e04ca333654eda6d0dd730e2f52179d",
						"prot": "public"
					},
					"name": [
						"HIP_R_16F"
					],
					"initializer": [
						"=  2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa742de5c6258b52db196fe3c3ec4c6014",
						"prot": "public"
					},
					"name": [
						"HIP_R_8I"
					],
					"initializer": [
						"=  3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaf067d4b20cf0a77dd95cbf522bd002ae",
						"prot": "public"
					},
					"name": [
						"HIP_C_32F"
					],
					"initializer": [
						"=  4"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa2d849f80c9af6803cca15ad2d33109a0",
						"prot": "public"
					},
					"name": [
						"HIP_C_64F"
					],
					"initializer": [
						"=  5"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa7bd4aa7ab4cac0d2cc9c11a409c62ab2",
						"prot": "public"
					},
					"name": [
						"HIP_C_16F"
					],
					"initializer": [
						"=  6"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aabf80a71653270e9ebda74248761cac80",
						"prot": "public"
					},
					"name": [
						"HIP_C_8I"
					],
					"initializer": [
						"=  7"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa504367dc13bca51748d1ce61b28b80b9",
						"prot": "public"
					},
					"name": [
						"HIP_R_8U"
					],
					"initializer": [
						"=  8"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aae7e3b4294e80ef86f02e5628340fdf88",
						"prot": "public"
					},
					"name": [
						"HIP_C_8U"
					],
					"initializer": [
						"=  9"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaf5f7ca42baf35c0e958a155d1c55a67b",
						"prot": "public"
					},
					"name": [
						"HIP_R_32I"
					],
					"initializer": [
						"= 10"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aad1e9a49d1af95633299f7051026d9788",
						"prot": "public"
					},
					"name": [
						"HIP_C_32I"
					],
					"initializer": [
						"= 11"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaf80ccbe7ecc800dcd4a7acc2ed7c2a71",
						"prot": "public"
					},
					"name": [
						"HIP_R_32U"
					],
					"initializer": [
						"= 12"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa22fba7c45a96159f2f06af561d2517f9",
						"prot": "public"
					},
					"name": [
						"HIP_C_32U"
					],
					"initializer": [
						"= 13"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaeaa5a53c066528d933c13ab035b6868b",
						"prot": "public"
					},
					"name": [
						"HIP_R_16BF"
					],
					"initializer": [
						"= 14"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa79c141427d78182c30b65901db87d248",
						"prot": "public"
					},
					"name": [
						"HIP_C_16BF"
					],
					"initializer": [
						"= 15"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aac0cb8ae4020b505ab313546e11c5b8cc",
						"prot": "public"
					},
					"name": [
						"HIP_R_4I"
					],
					"initializer": [
						"= 16"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa190a885190184c11bd50e148c093ad1f",
						"prot": "public"
					},
					"name": [
						"HIP_C_4I"
					],
					"initializer": [
						"= 17"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa2de7287342540231fbe1e3cd4a364d8e",
						"prot": "public"
					},
					"name": [
						"HIP_R_4U"
					],
					"initializer": [
						"= 18"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aad9baec50eeef44a83003040aceda84c6",
						"prot": "public"
					},
					"name": [
						"HIP_C_4U"
					],
					"initializer": [
						"= 19"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaca0fb321e12f13f95fd9eee64eeb291a",
						"prot": "public"
					},
					"name": [
						"HIP_R_16I"
					],
					"initializer": [
						"= 20"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaffedf6b2fb0a90edd87222229a42fa88",
						"prot": "public"
					},
					"name": [
						"HIP_C_16I"
					],
					"initializer": [
						"= 21"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa443e39c5332adfafe194ed38a94085eb",
						"prot": "public"
					},
					"name": [
						"HIP_R_16U"
					],
					"initializer": [
						"= 22"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa20b258c758e70e6d87d9272e0ba37f07",
						"prot": "public"
					},
					"name": [
						"HIP_C_16U"
					],
					"initializer": [
						"= 23"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aafba5e3217a64c25c96738502867f47f9",
						"prot": "public"
					},
					"name": [
						"HIP_R_64I"
					],
					"initializer": [
						"= 24"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa1c4ac67af45600e5f5a35f1f6bd516a2",
						"prot": "public"
					},
					"name": [
						"HIP_C_64I"
					],
					"initializer": [
						"= 25"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa94f344bcf57f1232502411901015a76a",
						"prot": "public"
					},
					"name": [
						"HIP_R_64U"
					],
					"initializer": [
						"= 26"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa46984ad342b55ad2586d1c94670f58c1",
						"prot": "public"
					},
					"name": [
						"HIP_C_64U"
					],
					"initializer": [
						"= 27"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aaea5031c9e0754512e0b18b2ef4b3056f",
						"prot": "public"
					},
					"name": [
						"HIP_R_8F_E4M3_FNUZ"
					],
					"initializer": [
						"= 1000"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1ae585642939954658aebf02e2db78115aa924760d5097274affb2cc99a95609bca",
						"prot": "public"
					},
					"name": [
						"HIP_R_8F_E5M2_FNUZ"
					],
					"initializer": [
						"= 1001"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/library_types.h",
						"line": "32",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/library_types.h",
						"bodystart": "32",
						"bodyend": "64"
					}
				}
			]
		},
		"hipLibraryPropertyType": {
			"$": {
				"kind": "enum",
				"id": "library__types_8h_1a7281fe76b5a37ebc165e9a0f66dfeb01",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipLibraryPropertyType"
			],
			"enumvalue": [
				{
					"$": {
						"id": "library__types_8h_1a7281fe76b5a37ebc165e9a0f66dfeb01ab14483c817140f14019154ddd703cc17",
						"prot": "public"
					},
					"name": [
						"HIP_LIBRARY_MAJOR_VERSION"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1a7281fe76b5a37ebc165e9a0f66dfeb01ab6291aa82cbbe11d74e36b2d0c49a1b3",
						"prot": "public"
					},
					"name": [
						"HIP_LIBRARY_MINOR_VERSION"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "library__types_8h_1a7281fe76b5a37ebc165e9a0f66dfeb01ae8dd6f133d747008a5ed1576db54415f",
						"prot": "public"
					},
					"name": [
						"HIP_LIBRARY_PATCH_LEVEL"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/library_types.h",
						"line": "66",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/library_types.h",
						"bodystart": "66",
						"bodyend": "70"
					}
				}
			]
		},
		"hipSurfaceBoundaryMode": {
			"$": {
				"kind": "enum",
				"id": "surface__types_8h_1a6e676f7f09bbe6a616a3547ed641dbc5",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipSurfaceBoundaryMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "surface__types_8h_1a6e676f7f09bbe6a616a3547ed641dbc5a7c27e64206f6ac80a8dafc9f42d7467b",
						"prot": "public"
					},
					"name": [
						"hipBoundaryModeZero"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "surface__types_8h_1a6e676f7f09bbe6a616a3547ed641dbc5a65239d9a2ca4e017fda413843a47cced",
						"prot": "public"
					},
					"name": [
						"hipBoundaryModeTrap"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "surface__types_8h_1a6e676f7f09bbe6a616a3547ed641dbc5a32712ed2fc5a62a576ac9c675d079dca",
						"prot": "public"
					},
					"name": [
						"hipBoundaryModeClamp"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip surface boundary modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/surface_types.h",
						"line": "53",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/surface_types.h",
						"bodystart": "53",
						"bodyend": "57"
					}
				}
			]
		},
		"hipTextureAddressMode": {
			"$": {
				"kind": "enum",
				"id": "texture__types_8h_1a80ce4b7218b586b656e80d76817967ca",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipTextureAddressMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "texture__types_8h_1a80ce4b7218b586b656e80d76817967caa813cb1d0b18fc1f7313dd30b4eb6b3a6",
						"prot": "public"
					},
					"name": [
						"hipAddressModeWrap"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "texture__types_8h_1a80ce4b7218b586b656e80d76817967caabfc49151676f6657f24f742c52fd7f0c",
						"prot": "public"
					},
					"name": [
						"hipAddressModeClamp"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "texture__types_8h_1a80ce4b7218b586b656e80d76817967caa2ea813be3f5b60c34ce678dd2448a69a",
						"prot": "public"
					},
					"name": [
						"hipAddressModeMirror"
					],
					"initializer": [
						"= 2"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "texture__types_8h_1a80ce4b7218b586b656e80d76817967caa42f37e27292e58140cfefde3a89080f4",
						"prot": "public"
					},
					"name": [
						"hipAddressModeBorder"
					],
					"initializer": [
						"= 3"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip texture address modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"line": "76",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"bodystart": "76",
						"bodyend": "81"
					}
				}
			]
		},
		"hipTextureFilterMode": {
			"$": {
				"kind": "enum",
				"id": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipTextureFilterMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6a56ede038ab7c805ec4b5b61d2b678dfc",
						"prot": "public"
					},
					"name": [
						"hipFilterModePoint"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "texture__types_8h_1aa2f0b6002b81d0a43a808cb880bb21e6a8863d8fc70e8397717641fffc9f5cb80",
						"prot": "public"
					},
					"name": [
						"hipFilterModeLinear"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip texture filter modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"line": "86",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"bodystart": "86",
						"bodyend": "86"
					}
				}
			]
		},
		"hipTextureReadMode": {
			"$": {
				"kind": "enum",
				"id": "texture__types_8h_1a442e950774f7306dc33692e358c92c94",
				"prot": "public",
				"static": "no",
				"strong": "no"
			},
			"type": [
				""
			],
			"name": [
				"hipTextureReadMode"
			],
			"enumvalue": [
				{
					"$": {
						"id": "texture__types_8h_1a442e950774f7306dc33692e358c92c94a829645801202174d052d667ffa4e1b8d",
						"prot": "public"
					},
					"name": [
						"hipReadModeElementType"
					],
					"initializer": [
						"= 0"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				},
				{
					"$": {
						"id": "texture__types_8h_1a442e950774f7306dc33692e358c92c94ae6a16ba3dbb9a7f2184efd235dd819c8",
						"prot": "public"
					},
					"name": [
						"hipReadModeNormalizedFloat"
					],
					"initializer": [
						"= 1"
					],
					"briefdescription": [
						"\n          "
					],
					"detaileddescription": [
						"\n          "
					]
				}
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"hip texture read modes "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"line": "91",
						"column": "1",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"bodystart": "91",
						"bodyend": "91"
					}
				}
			]
		}
	},
	"typedef": {
		"hipDeviceptr_t": {
			"$": {
				"kind": "typedef",
				"id": "driver__types_8h_1a618e4f089dc1e59056b0cb992f7aaae9",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"void *"
			],
			"definition": [
				"typedef void* hipDeviceptr_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipDeviceptr_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "39",
						"column": "14",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "39",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipArray_t": {
			"$": {
				"kind": "typedef",
				"id": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct hipArray *"
			],
			"definition": [
				"typedef struct hipArray* hipArray_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipArray_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "58",
						"column": "24",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "58",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipArray_const_t": {
			"$": {
				"kind": "typedef",
				"id": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"const struct hipArray *"
			],
			"definition": [
				"typedef const struct hipArray* hipArray_const_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipArray_const_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "59",
						"column": "30",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "59",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipmipmappedArray": {
			"$": {
				"kind": "typedef",
				"id": "driver__types_8h_1a490778e2da44ddb3f1a127f0d17c8e5b",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"hipMipmappedArray_t"
			],
			"definition": [
				"typedef hipMipmappedArray_t hipmipmappedArray"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipmipmappedArray"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "118",
						"column": "29",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "118",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipMipmappedArray_const_t": {
			"$": {
				"kind": "typedef",
				"id": "driver__types_8h_1ad3a2249d04845db4cddf271c474058f6",
				"prot": "public",
				"static": "no"
			},
			"type": [
				{
					"_": "const struct  *",
					"ref": [
						{
							"_": "hipMipmappedArray",
							"$": {
								"refid": "structhip_mipmapped_array",
								"kindref": "compound"
							}
						}
					]
				}
			],
			"definition": [
				"typedef const struct hipMipmappedArray* hipMipmappedArray_const_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipMipmappedArray_const_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"line": "119",
						"column": "39",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/driver_types.h",
						"bodystart": "119",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipError_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
				"prot": "public",
				"static": "no"
			},
			"type": [
				{
					"_": "enum  ",
					"ref": [
						{
							"_": "__HIP_NODISCARD",
							"$": {
								"refid": "group___global_defs_1ga89716f0e21b750a51ceb081208a84b33",
								"kindref": "member"
							}
						},
						{
							"_": "hipError_t",
							"$": {
								"refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"enum __HIP_NODISCARD hipError_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipError_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP error type "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "398",
						"column": "12",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "286",
						"bodyend": "398"
					}
				}
			]
		},
		"hipCtx_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga0ebbb61a275c1adb950de995aadd22bf",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipCtx_t *"
			],
			"definition": [
				"typedef struct ihipCtx_t* hipCtx_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipCtx_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "605",
						"column": "25",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "605",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipDevice_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga181a06ca0d50ffdd6e019c87ffe02fb4",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"int"
			],
			"definition": [
				"typedef int hipDevice_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipDevice_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "607",
						"column": "13",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "607",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipStream_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipStream_t *"
			],
			"definition": [
				"typedef struct ihipStream_t* hipStream_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipStream_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "614",
						"column": "28",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "614",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipModule_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gab0b1dd6ce7ee1720c2970552c20173e8",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipModule_t *"
			],
			"definition": [
				"typedef struct ihipModule_t* hipModule_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipModule_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "623",
						"column": "28",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "623",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipFunction_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gac7ab0ad556b5e1b3461e450fd2c7da3b",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipModuleSymbol_t *"
			],
			"definition": [
				"typedef struct ihipModuleSymbol_t* hipFunction_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipFunction_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "624",
						"column": "34",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "624",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipMemPool_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipMemPoolHandle_t *"
			],
			"definition": [
				"typedef struct ihipMemPoolHandle_t* hipMemPool_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipMemPool_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"HIP memory pool "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "628",
						"column": "35",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "628",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipEvent_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipEvent_t *"
			],
			"definition": [
				"typedef struct ihipEvent_t* hipEvent_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipEvent_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "642",
						"column": "27",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "642",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipExternalMemory_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"void *"
			],
			"definition": [
				"typedef void* hipExternalMemory_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipExternalMemory_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1115",
						"column": "14",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1115",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipExternalSemaphore_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"void *"
			],
			"definition": [
				"typedef void* hipExternalSemaphore_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipExternalSemaphore_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1141",
						"column": "14",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1141",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipGraphicsResource": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gad96ccb9b8a16edff6513bdc22745a832",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct _hipGraphicsResource"
			],
			"definition": [
				"typedef struct _hipGraphicsResource hipGraphicsResource"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipGraphicsResource"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1202",
						"column": "35",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1202",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipGraphicsResource_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
				"prot": "public",
				"static": "no"
			},
			"type": [
				{
					"_": " *",
					"ref": [
						{
							"_": "hipGraphicsResource",
							"$": {
								"refid": "group___global_defs_1gad96ccb9b8a16edff6513bdc22745a832",
								"kindref": "member"
							}
						}
					]
				}
			],
			"definition": [
				"typedef hipGraphicsResource* hipGraphicsResource_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipGraphicsResource_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1204",
						"column": "29",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1204",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipGraph_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipGraph *"
			],
			"definition": [
				"typedef struct ihipGraph* hipGraph_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipGraph_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"An opaque value that represents a hip graph "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1209",
						"column": "25",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1209",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipGraphNode_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct hipGraphNode *"
			],
			"definition": [
				"typedef struct hipGraphNode* hipGraphNode_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipGraphNode_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"An opaque value that represents a hip graph node "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1213",
						"column": "28",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1213",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipGraphExec_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct hipGraphExec *"
			],
			"definition": [
				"typedef struct hipGraphExec* hipGraphExec_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipGraphExec_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"An opaque value that represents a hip graph Exec "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1217",
						"column": "28",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1217",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipUserObject_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct hipUserObject *"
			],
			"definition": [
				"typedef struct hipUserObject* hipUserObject_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipUserObject_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"An opaque value that represents a user obj "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1222",
						"column": "29",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1222",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipHostFn_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1ga6b1ea90b2fea2d4c62eb351e1ed44f93",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"void(*"
			],
			"definition": [
				"typedef void(* hipHostFn_t) (void *userData)"
			],
			"argsstring": [
				")(void *userData)"
			],
			"name": [
				"hipHostFn_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1246",
						"column": "9",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1246",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipMemGenericAllocationHandle_t": {
			"$": {
				"kind": "typedef",
				"id": "group___global_defs_1gae466e78534ea3eef06973cd06aea9840",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct ihipMemGenericAllocationHandle *"
			],
			"definition": [
				"typedef struct ihipMemGenericAllocationHandle* hipMemGenericAllocationHandle_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipMemGenericAllocationHandle_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Generic handle for memory allocation "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "1485",
						"column": "46",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "1485",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipStreamCallback_t": {
			"$": {
				"kind": "typedef",
				"id": "group___stream_1ga6d4e90ec5736f9728102be22d0559dfd",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"void(*"
			],
			"definition": [
				"typedef void(* hipStreamCallback_t) (hipStream_t stream, hipError_t status, void *userData)"
			],
			"argsstring": [
				")(hipStream_t stream, hipError_t status, void *userData)"
			],
			"name": [
				"hipStreamCallback_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				{
					"para": [
						"Stream CallBack struct "
					]
				}
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"line": "2544",
						"column": "9",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
						"bodystart": "2544",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipSurfaceObject_t": {
			"$": {
				"kind": "typedef",
				"id": "surface__types_8h_1ae5007dccf589cfddbd3c36b4dbf0d61b",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct __hip_surface *"
			],
			"definition": [
				"typedef struct __hip_surface* hipSurfaceObject_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipSurfaceObject_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/surface_types.h",
						"line": "41",
						"column": "29",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/surface_types.h",
						"bodystart": "41",
						"bodyend": "-1"
					}
				}
			]
		},
		"hipTextureObject_t": {
			"$": {
				"kind": "typedef",
				"id": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
				"prot": "public",
				"static": "no"
			},
			"type": [
				"struct __hip_texture *"
			],
			"definition": [
				"typedef struct __hip_texture* hipTextureObject_t"
			],
			"argsstring": [
				""
			],
			"name": [
				"hipTextureObject_t"
			],
			"briefdescription": [
				"\n        "
			],
			"detaileddescription": [
				"\n        "
			],
			"inbodydescription": [
				"\n        "
			],
			"location": [
				{
					"$": {
						"file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"line": "71",
						"column": "29",
						"bodyfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/texture_types.h",
						"bodystart": "71",
						"bodyend": "-1"
					}
				}
			]
		}
	}
}
