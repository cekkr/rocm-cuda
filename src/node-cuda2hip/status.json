{"functions":{"cudaChooseDevice":{"cuda":"cudaChooseDevice","hip":"hipChooseDevice","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaChooseDevice","args":" (  int* device, const cudaDeviceProp* prop ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gaf1e365e1d17cf40644d1470de4817c8e","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipChooseDevice"],"argsstring":["(int *device, const hipDeviceProp_t *prop)"],"name":["hipChooseDevice"],"param":[{"type":["int *"],"declname":["device"]},{"type":[{"_":"const  *","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}],"declname":["prop"]}],"briefdescription":[{"para":[{"_":"Device which matches  is returned. ","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the device "]}]},{"parameternamelist":[{"parametername":[{"_":"prop","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Pointer of the properties"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2046","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2046","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop ) ","hipLine":"hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  using hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)\nextern \"C\" cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaChooseDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipChooseDevice(device, (const hipDeviceProp_t *)prop);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties((hipDeviceProp_t *)prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice  (  int* device )  using hipError_t hipGetDevice (int *device)\nextern \"C\" cudaError_t cudaGetDevice  (  int*"},"cudaDeviceGetByPCIBusId":{"cuda":"cudaDeviceGetByPCIBusId","hip":"hipDeviceGetByPCIBusId","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetByPCIBusId","args":" (  int* device, const char* pciBusId ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetByPCIBusId"],"argsstring":["(int *device, const char *pciBusId)"],"name":["hipDeviceGetByPCIBusId"],"param":[{"type":["int *"],"declname":["device"]},{"type":["const char *"],"declname":["pciBusId"]}],"briefdescription":[{"para":["Returns a handle to a compute device. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["The handle of the device "]}]},{"parameternamelist":[{"parametername":[{"_":"pciBusId","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The string of PCI Bus Id for the device"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ,  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1743","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1743","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId ) ","hipLine":"hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId )  using hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)\nextern \"C\" cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetByPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetByPCIBusId (device, pciBusId);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetName  (  char* name, int  len, int "},"cudaDeviceGetDefaultMemPool":{"cuda":"cudaDeviceGetDefaultMemPool","hip":"hipDeviceGetDefaultMemPool","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetDefaultMemPool","args":" (  cudaMemPool_t* memPool, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga16d31ff3398a0c76ea5148563406412a","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetDefaultMemPool"],"argsstring":["(hipMemPool_t *mem_pool, int device)"],"name":["hipDeviceGetDefaultMemPool"],"param":[{"type":[{"_":" *","ref":[{"_":"hipMemPool_t","$":{"refid":"group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0","kindref":"member"}}]}],"declname":["mem_pool"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Returns the default memory pool of the specified device. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"mem_pool","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Default memory pool to return "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Device index for query the default memory pool"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , , , ","ref":[{"_":"hipDeviceGetDefaultMemPool","$":{"refid":"group___device_1ga16d31ff3398a0c76ea5148563406412a","kindref":"member"}},{"_":"hipMallocAsync","$":{"refid":"group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f","kindref":"member"}},{"_":"hipMemPoolTrimTo","$":{"refid":"group___stream_o_1ga4cd76526312084a115c6007d41ba9b96","kindref":"member"}},{"_":"hipMemPoolGetAttribute","$":{"refid":"group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136","kindref":"member"}},{"_":"hipDeviceSetMemPool","$":{"refid":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","kindref":"member"}},{"_":"hipMemPoolSetAttribute","$":{"refid":"group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf","kindref":"member"}},{"_":"hipMemPoolSetAccess","$":{"refid":"group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c","kindref":"member"}},{"_":"hipMemPoolGetAccess","$":{"refid":"group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1867","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1867","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device ) ","hipLine":"hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetDefaultMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool )  using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem"},"cudaDeviceGetMemPool":{"cuda":"cudaDeviceGetMemPool","hip":"hipDeviceGetMemPool","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetMemPool","args":" (  cudaMemPool_t* memPool, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga881dfd032ba869936bca97edb1a12ca9","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetMemPool"],"argsstring":["(hipMemPool_t *mem_pool, int device)"],"name":["hipDeviceGetMemPool"],"param":[{"type":[{"_":" *","ref":[{"_":"hipMemPool_t","$":{"refid":"group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0","kindref":"member"}}]}],"declname":["mem_pool"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Gets the current memory pool for the specified device. "]}],"detaileddescription":[{"para":[{"_":"Returns the last pool provided to  for this device or the device's default memory pool if  has never been called. By default the current mempool is the default mempool for a device, otherwise the returned pool must have been set with .","computeroutput":["hipDeviceSetMemPool","hipDeviceSetMemPool","hipDeviceSetMemPool"]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"mem_pool","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Current memory pool on the specified device "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Device index to query the current memory pool"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , , , ","ref":[{"_":"hipDeviceGetDefaultMemPool","$":{"refid":"group___device_1ga16d31ff3398a0c76ea5148563406412a","kindref":"member"}},{"_":"hipMallocAsync","$":{"refid":"group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f","kindref":"member"}},{"_":"hipMemPoolTrimTo","$":{"refid":"group___stream_o_1ga4cd76526312084a115c6007d41ba9b96","kindref":"member"}},{"_":"hipMemPoolGetAttribute","$":{"refid":"group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136","kindref":"member"}},{"_":"hipDeviceSetMemPool","$":{"refid":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","kindref":"member"}},{"_":"hipMemPoolSetAttribute","$":{"refid":"group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf","kindref":"member"}},{"_":"hipMemPoolSetAccess","$":{"refid":"group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c","kindref":"member"}},{"_":"hipMemPoolGetAccess","$":{"refid":"group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1909","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1909","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device ) ","hipLine":"hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetDefaultMemPool ( cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetDefaultMemPool ( cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetDefaultMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool ( int  device, cudaMemPool_t memPool )  using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem"},"cudaDeviceGetP2PAttribute":{"cuda":"cudaDeviceGetP2PAttribute","hip":"hipDeviceGetP2PAttribute","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetP2PAttribute","args":" (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1gaed3b34e394dd0bbdf6a02eafd38b8f15","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetP2PAttribute"],"argsstring":["(int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)"],"name":["hipDeviceGetP2PAttribute"],"param":[{"type":["int *"],"declname":["value"]},{"type":[{"ref":[{"_":"hipDeviceP2PAttr","$":{"refid":"group___global_defs_1ga5582537cfebefc286383a3abeb71f4d1","kindref":"member"}}]}],"declname":["attr"]},{"type":["int"],"declname":["srcDevice"]},{"type":["int"],"declname":["dstDevice"]}],"briefdescription":[{"para":["Returns a value for attribute of link between two devices. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"value","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the value for the attrubute "]}]},{"parameternamelist":[{"parametername":[{"_":"attr","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["enum of hipDeviceP2PAttr to query "]}]},{"parameternamelist":[{"parametername":[{"_":"srcDevice","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The source device of the link "]}]},{"parameternamelist":[{"parametername":[{"_":"dstDevice","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The destination device of the link"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1725","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1725","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) ","hipLine":"hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )  using hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)\nextern \"C\" cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetP2PAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetP2PAttribute (value, (hipDeviceP2PAttr)attr, srcDevice, dstDevice);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int peerDevice, unsigned int flags )  using hipError_t hipDeviceEnablePeerAccess (int peerDevice, unsigned int flags)\nextern \"C\" cudaError_t cudaDeviceEnablePeerAccess (  int peerDevice, unsigned int flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceDisablePeerAccess (  int peerDevice )  using hipError_t hipDeviceDisablePeerAccess (int peerDevice)\n"},"cudaDeviceGetPCIBusId":{"cuda":"cudaDeviceGetPCIBusId","hip":"hipDeviceGetPCIBusId","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetPCIBusId","args":" (  char* pciBusId, int  len, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1gaaa961c8ec8047903617f4245fa50256a","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetPCIBusId"],"argsstring":["(char *pciBusId, int len, int device)"],"name":["hipDeviceGetPCIBusId"],"param":[{"type":["char *"],"declname":["pciBusId"]},{"type":["int"],"declname":["len"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Returns a PCI Bus Id string for the device, overloaded to take int device ID. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"pciBusId","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["The string of PCI Bus Id format for the device "]}]},{"parameternamelist":[{"parametername":[{"_":"len","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Maximum length of string "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The device ordinal"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1735","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1735","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device ) ","hipLine":"hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetName ( char* name, int len, int device ) using hipError_t hipDeviceGetName (char *name, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetName ( char* name, int len, int device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetName call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetName (name, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGet ( int* device, int ordinal ) using hipError_t hipDeviceGet (int* device, int ordinal)\nextern \"C\" cudaError_t cudaDeviceGet ( int* device, int ordinal ) {\n    if"},"cudaDeviceGetStreamPriorityRange":{"cuda":"cudaDeviceGetStreamPriorityRange","hip":"hipDeviceGetStreamPriorityRange","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetStreamPriorityRange","args":" (  int* leastPriority, int* greatestPriority ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1ga2b0709fb23b273abec8ea223ebb362bc","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetStreamPriorityRange"],"argsstring":["(int *leastPriority, int *greatestPriority)"],"name":["hipDeviceGetStreamPriorityRange"],"param":[{"type":["int *"],"declname":["leastPriority"]},{"type":["int *"],"declname":["greatestPriority"]}],"briefdescription":[{"para":["Returns numerical values that correspond to the least and greatest stream priority. "]}],"detaileddescription":[{"para":[{"_":"\n\nReturns in *leastPriority and *greatestPriority the numerical values that correspond to the least and greatest stream priority respectively. Stream priorities follow a convention where lower numbers imply greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority]. If the user attempts to create a stream with a priority value that is outside the the meaningful range as specified by this API, the priority is automatically clamped to within the valid range. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"leastPriority","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["pointer in which value corresponding to least priority is returned. "]}]},{"parameternamelist":[{"parametername":[{"_":"greatestPriority","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["pointer in which value corresponding to greatest priority is returned. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2393","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2393","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority ) ","hipLine":"hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority )  using hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)\nextern \"C\" cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetStreamPriorityRange call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetStreamPriorityRange (leastPriority, greatestPriority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attribute, int device )  using hipError_t hipDeviceGetAttribute (int *value, hipDeviceAttribute_t attribute, int device)\nextern \"C\" cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attribute, int device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetAttribute (value, (hipDeviceAttribute_t) attribute, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute ( int* value, cudaDeviceP2PAttr attribute, int srcDevice, int dstDevice )  using"},"cudaDeviceReset":{"cuda":"cudaDeviceReset","hip":"hipDeviceReset","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceReset","args":" (  void ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga8d57161ae56a8edc46eeda447417bf6c","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceReset"],"argsstring":["(void)"],"name":["hipDeviceReset"],"param":[{"type":["void"]}],"briefdescription":[{"para":["The state of current device is discarded and updated to a fresh state. "]}],"detaileddescription":[{"para":["Calling this function deletes all streams created, memory allocated, kernels running, events created. Make sure that no other thread is using the device or streams, memory, kernels, events associated with the current device.",{"simplesect":[{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"ref":[{"_":"hipDeviceSynchronize","$":{"refid":"group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1783","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1783","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceReset  (  void ) ","hipLine":"hipError_t hipDeviceReset (void)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceReset  (  void )  using hipError_t hipDeviceReset (void)\nextern \"C\" cudaError_t cudaDeviceReset  (  void )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceReset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceReset();\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSynchronize ( void ) using hipError_t hipDeviceSynchronize (void)\nextern \"C\" cudaError_t cudaDeviceSynchronize ( void ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSynchronize();\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp *prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp *prop, int  device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Trans"}}}