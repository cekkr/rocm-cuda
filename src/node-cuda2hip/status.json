{"functions":{"cudaChooseDevice":{"cuda":"cudaChooseDevice","hip":"hipChooseDevice","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaChooseDevice","args":" (  int* device, const cudaDeviceProp* prop ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gaf1e365e1d17cf40644d1470de4817c8e","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipChooseDevice"],"argsstring":["(int *device, const hipDeviceProp_t *prop)"],"name":["hipChooseDevice"],"param":[{"type":["int *"],"declname":["device"]},{"type":[{"_":"const  *","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}],"declname":["prop"]}],"briefdescription":[{"para":[{"_":"Device which matches  is returned. ","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the device "]}]},{"parameternamelist":[{"parametername":[{"_":"prop","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Pointer of the properties"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2046","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2046","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop ) ","hipLine":"hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  using hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)\nextern \"C\" cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaChooseDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipChooseDevice(device, (const hipDeviceProp_t *)prop);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties((hipDeviceProp_t *)prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice  (  int* device )  using hipError_t hipGetDevice (int *device)\nextern \"C\" cudaError_t cudaGetDevice  (  int*"}}}