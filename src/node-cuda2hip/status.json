{"functions":{"cudaChooseDevice":{"cuda":"cudaChooseDevice","hip":"hipChooseDevice","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaChooseDevice","args":" (  int* device, const cudaDeviceProp* prop ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gaf1e365e1d17cf40644d1470de4817c8e","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipChooseDevice"],"argsstring":["(int *device, const hipDeviceProp_t *prop)"],"name":["hipChooseDevice"],"param":[{"type":["int *"],"declname":["device"]},{"type":[{"_":"const  *","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}],"declname":["prop"]}],"briefdescription":[{"para":[{"_":"Device which matches  is returned. ","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the device "]}]},{"parameternamelist":[{"parametername":[{"_":"prop","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Pointer of the properties"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2046","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2046","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop ) ","hipLine":"hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  using hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)\nextern \"C\" cudaError_t cudaChooseDevice  (  int* device, const cudaDeviceProp* prop )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaChooseDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipChooseDevice(device, (const hipDeviceProp_t *)prop);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties((hipDeviceProp_t *)prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice  (  int* device )  using hipError_t hipGetDevice (int *device)\nextern \"C\" cudaError_t cudaGetDevice  (  int*"},"cudaDeviceGetByPCIBusId":{"cuda":"cudaDeviceGetByPCIBusId","hip":"hipDeviceGetByPCIBusId","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetByPCIBusId","args":" (  int* device, const char* pciBusId ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetByPCIBusId"],"argsstring":["(int *device, const char *pciBusId)"],"name":["hipDeviceGetByPCIBusId"],"param":[{"type":["int *"],"declname":["device"]},{"type":["const char *"],"declname":["pciBusId"]}],"briefdescription":[{"para":["Returns a handle to a compute device. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["The handle of the device "]}]},{"parameternamelist":[{"parametername":[{"_":"pciBusId","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The string of PCI Bus Id for the device"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ,  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1743","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1743","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId ) ","hipLine":"hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId )  using hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)\nextern \"C\" cudaError_t cudaDeviceGetByPCIBusId  (  int* device, const char* pciBusId )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetByPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetByPCIBusId (device, pciBusId);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetName  (  char* name, int  len, int "},"cudaDeviceGetDefaultMemPool":{"cuda":"cudaDeviceGetDefaultMemPool","hip":"hipDeviceGetDefaultMemPool","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetDefaultMemPool","args":" (  cudaMemPool_t* memPool, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga16d31ff3398a0c76ea5148563406412a","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetDefaultMemPool"],"argsstring":["(hipMemPool_t *mem_pool, int device)"],"name":["hipDeviceGetDefaultMemPool"],"param":[{"type":[{"_":" *","ref":[{"_":"hipMemPool_t","$":{"refid":"group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0","kindref":"member"}}]}],"declname":["mem_pool"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Returns the default memory pool of the specified device. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"mem_pool","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Default memory pool to return "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Device index for query the default memory pool"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , , , ","ref":[{"_":"hipDeviceGetDefaultMemPool","$":{"refid":"group___device_1ga16d31ff3398a0c76ea5148563406412a","kindref":"member"}},{"_":"hipMallocAsync","$":{"refid":"group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f","kindref":"member"}},{"_":"hipMemPoolTrimTo","$":{"refid":"group___stream_o_1ga4cd76526312084a115c6007d41ba9b96","kindref":"member"}},{"_":"hipMemPoolGetAttribute","$":{"refid":"group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136","kindref":"member"}},{"_":"hipDeviceSetMemPool","$":{"refid":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","kindref":"member"}},{"_":"hipMemPoolSetAttribute","$":{"refid":"group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf","kindref":"member"}},{"_":"hipMemPoolSetAccess","$":{"refid":"group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c","kindref":"member"}},{"_":"hipMemPoolGetAccess","$":{"refid":"group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1867","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1867","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device ) ","hipLine":"hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetDefaultMemPool  (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetDefaultMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool )  using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem"},"cudaDeviceGetMemPool":{"cuda":"cudaDeviceGetMemPool","hip":"hipDeviceGetMemPool","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetMemPool","args":" (  cudaMemPool_t* memPool, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga881dfd032ba869936bca97edb1a12ca9","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetMemPool"],"argsstring":["(hipMemPool_t *mem_pool, int device)"],"name":["hipDeviceGetMemPool"],"param":[{"type":[{"_":" *","ref":[{"_":"hipMemPool_t","$":{"refid":"group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0","kindref":"member"}}]}],"declname":["mem_pool"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Gets the current memory pool for the specified device. "]}],"detaileddescription":[{"para":[{"_":"Returns the last pool provided to  for this device or the device's default memory pool if  has never been called. By default the current mempool is the default mempool for a device, otherwise the returned pool must have been set with .","computeroutput":["hipDeviceSetMemPool","hipDeviceSetMemPool","hipDeviceSetMemPool"]},{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"mem_pool","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Current memory pool on the specified device "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Device index to query the current memory pool"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , , , ","ref":[{"_":"hipDeviceGetDefaultMemPool","$":{"refid":"group___device_1ga16d31ff3398a0c76ea5148563406412a","kindref":"member"}},{"_":"hipMallocAsync","$":{"refid":"group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f","kindref":"member"}},{"_":"hipMemPoolTrimTo","$":{"refid":"group___stream_o_1ga4cd76526312084a115c6007d41ba9b96","kindref":"member"}},{"_":"hipMemPoolGetAttribute","$":{"refid":"group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136","kindref":"member"}},{"_":"hipDeviceSetMemPool","$":{"refid":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","kindref":"member"}},{"_":"hipMemPoolSetAttribute","$":{"refid":"group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf","kindref":"member"}},{"_":"hipMemPoolSetAccess","$":{"refid":"group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c","kindref":"member"}},{"_":"hipMemPoolGetAccess","$":{"refid":"group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1909","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1909","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device ) ","hipLine":"hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetMemPool  (  cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetDefaultMemPool ( cudaMemPool_t* memPool, int  device )  using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" cudaError_t cudaDeviceGetDefaultMemPool ( cudaMemPool_t* memPool, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetDefaultMemPool (memPool, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool ( int  device, cudaMemPool_t memPool )  using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem"},"cudaDeviceGetP2PAttribute":{"cuda":"cudaDeviceGetP2PAttribute","hip":"hipDeviceGetP2PAttribute","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetP2PAttribute","args":" (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1gaed3b34e394dd0bbdf6a02eafd38b8f15","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetP2PAttribute"],"argsstring":["(int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)"],"name":["hipDeviceGetP2PAttribute"],"param":[{"type":["int *"],"declname":["value"]},{"type":[{"ref":[{"_":"hipDeviceP2PAttr","$":{"refid":"group___global_defs_1ga5582537cfebefc286383a3abeb71f4d1","kindref":"member"}}]}],"declname":["attr"]},{"type":["int"],"declname":["srcDevice"]},{"type":["int"],"declname":["dstDevice"]}],"briefdescription":[{"para":["Returns a value for attribute of link between two devices. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"value","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the value for the attrubute "]}]},{"parameternamelist":[{"parametername":[{"_":"attr","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["enum of hipDeviceP2PAttr to query "]}]},{"parameternamelist":[{"parametername":[{"_":"srcDevice","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The source device of the link "]}]},{"parameternamelist":[{"parametername":[{"_":"dstDevice","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The destination device of the link"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1725","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1725","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) ","hipLine":"hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )  using hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)\nextern \"C\" cudaError_t cudaDeviceGetP2PAttribute  (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetP2PAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetP2PAttribute (value, (hipDeviceP2PAttr)attr, srcDevice, dstDevice);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int peerDevice, unsigned int flags )  using hipError_t hipDeviceEnablePeerAccess (int peerDevice, unsigned int flags)\nextern \"C\" cudaError_t cudaDeviceEnablePeerAccess (  int peerDevice, unsigned int flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceDisablePeerAccess (  int peerDevice )  using hipError_t hipDeviceDisablePeerAccess (int peerDevice)\n"},"cudaDeviceGetPCIBusId":{"cuda":"cudaDeviceGetPCIBusId","hip":"hipDeviceGetPCIBusId","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetPCIBusId","args":" (  char* pciBusId, int  len, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___driver_1gaaa961c8ec8047903617f4245fa50256a","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetPCIBusId"],"argsstring":["(char *pciBusId, int len, int device)"],"name":["hipDeviceGetPCIBusId"],"param":[{"type":["char *"],"declname":["pciBusId"]},{"type":["int"],"declname":["len"]},{"type":["int"],"declname":["device"]}],"briefdescription":[{"para":["Returns a PCI Bus Id string for the device, overloaded to take int device ID. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"pciBusId","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["The string of PCI Bus Id format for the device "]}]},{"parameternamelist":[{"parametername":[{"_":"len","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Maximum length of string "]}]},{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The device ordinal"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1735","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1735","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device ) ","hipLine":"hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetPCIBusId  (  char* pciBusId, int  len, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetName ( char* name, int len, int device ) using hipError_t hipDeviceGetName (char *name, int len, int device)\nextern \"C\" cudaError_t cudaDeviceGetName ( char* name, int len, int device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetName call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetName (name, len, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGet ( int* device, int ordinal ) using hipError_t hipDeviceGet (int* device, int ordinal)\nextern \"C\" cudaError_t cudaDeviceGet ( int* device, int ordinal ) {\n    if"},"cudaDeviceGetStreamPriorityRange":{"cuda":"cudaDeviceGetStreamPriorityRange","hip":"hipDeviceGetStreamPriorityRange","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceGetStreamPriorityRange","args":" (  int* leastPriority, int* greatestPriority ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1ga2b0709fb23b273abec8ea223ebb362bc","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceGetStreamPriorityRange"],"argsstring":["(int *leastPriority, int *greatestPriority)"],"name":["hipDeviceGetStreamPriorityRange"],"param":[{"type":["int *"],"declname":["leastPriority"]},{"type":["int *"],"declname":["greatestPriority"]}],"briefdescription":[{"para":["Returns numerical values that correspond to the least and greatest stream priority. "]}],"detaileddescription":[{"para":[{"_":"\n\nReturns in *leastPriority and *greatestPriority the numerical values that correspond to the least and greatest stream priority respectively. Stream priorities follow a convention where lower numbers imply greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority]. If the user attempts to create a stream with a priority value that is outside the the meaningful range as specified by this API, the priority is automatically clamped to within the valid range. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"leastPriority","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["pointer in which value corresponding to least priority is returned. "]}]},{"parameternamelist":[{"parametername":[{"_":"greatestPriority","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["pointer in which value corresponding to greatest priority is returned. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2393","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2393","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority ) ","hipLine":"hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority )  using hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)\nextern \"C\" cudaError_t cudaDeviceGetStreamPriorityRange  (  int* leastPriority, int* greatestPriority )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetStreamPriorityRange call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetStreamPriorityRange (leastPriority, greatestPriority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attribute, int device )  using hipError_t hipDeviceGetAttribute (int *value, hipDeviceAttribute_t attribute, int device)\nextern \"C\" cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attribute, int device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetAttribute (value, (hipDeviceAttribute_t) attribute, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute ( int* value, cudaDeviceP2PAttr attribute, int srcDevice, int dstDevice )  using"},"cudaDeviceReset":{"cuda":"cudaDeviceReset","hip":"hipDeviceReset","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceReset","args":" (  void ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga8d57161ae56a8edc46eeda447417bf6c","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceReset"],"argsstring":["(void)"],"name":["hipDeviceReset"],"param":[{"type":["void"]}],"briefdescription":[{"para":["The state of current device is discarded and updated to a fresh state. "]}],"detaileddescription":[{"para":["Calling this function deletes all streams created, memory allocated, kernels running, events created. Make sure that no other thread is using the device or streams, memory, kernels, events associated with the current device.",{"simplesect":[{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"ref":[{"_":"hipDeviceSynchronize","$":{"refid":"group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1783","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1783","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceReset  (  void ) ","hipLine":"hipError_t hipDeviceReset (void)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceReset  (  void )  using hipError_t hipDeviceReset (void)\nextern \"C\" cudaError_t cudaDeviceReset  (  void )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceReset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceReset();\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSynchronize ( void ) using hipError_t hipDeviceSynchronize (void)\nextern \"C\" cudaError_t cudaDeviceSynchronize ( void ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSynchronize();\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp *prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp *prop, int  device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Trans"},"cudaDeviceSetCacheConfig":{"cuda":"cudaDeviceSetCacheConfig","hip":"hipDeviceSetCacheConfig","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceSetCacheConfig","args":" (  cudaFuncCache cacheConfig ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gaada3d30a46ae06f68cf1574f496b86ee","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceSetCacheConfig"],"argsstring":["(hipFuncCache_t cacheConfig)"],"name":["hipDeviceSetCacheConfig"],"param":[{"type":[{"ref":[{"_":"hipFuncCache_t","$":{"refid":"group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca","kindref":"member"}}]}],"declname":["cacheConfig"]}],"briefdescription":[{"para":["Set L1/Shared cache partition. "]}],"detaileddescription":[{"para":[{"_":"\n\nNote: AMD devices do not support reconfigurable cache. This API is not implemented on AMD platform. If the function is called, it will return hipErrorNotSupported. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"cacheConfig","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Cache configuration"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorNotInitialized","$":{"refid":"hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1935","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1935","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceSetCacheConfig  (  cudaFuncCache cacheConfig ) ","hipLine":"hipError_t hipDeviceSetCacheConfig (hipFuncCache_t cacheConfig)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetCacheConfig  (  cudaFuncCache cacheConfig )  using hipError_t hipDeviceSetCacheConfig (hipFuncCache_t cacheConfig)\nextern \"C\" cudaError_t cudaDeviceSetCacheConfig  (  cudaFuncCache cacheConfig )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetCacheConfig ( (hipFuncCache_t) cacheConfig);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetCacheConfig  (  cudaFuncCache* cacheConfig )  using hipError_t hipDeviceGetCacheConfig (hipFuncCache_t* cacheConfig)\nextern \"C\" cudaError_t cudaDeviceGetCacheConfig  (  cudaFuncCache* cacheConfig )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetCacheConfig ( (hipFuncCache_t*) cacheConfig);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetLimit  (  size_t* pValue,  cudaLimit limit )  using hipError_t hipDeviceGetLimit (size_t* pValue, hipLimit_t limit)\nex"},"cudaDeviceSetLimit":{"cuda":"cudaDeviceSetLimit","hip":"hipDeviceSetLimit","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceSetLimit","args":" (  cudaLimit limit, size_t value ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gaaa264755a3c1750a12c60aa7807b7fe8","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceSetLimit"],"argsstring":["(enum hipLimit_t limit, size_t value)"],"name":["hipDeviceSetLimit"],"param":[{"type":[{"_":"enum ","ref":[{"_":"hipLimit_t","$":{"refid":"group___global_defs_1ga02ceb1513c852c4dd1ecf3cc459fda70","kindref":"member"}}]}],"declname":["limit"]},{"type":["size_t"],"declname":["value"]}],"briefdescription":[{"para":["Sets resource limits of current device. "]}],"detaileddescription":[{"para":[{"_":"As the input enum limit,  sets the limit value of the stack size on the current GPU device, per thread. The limit size can get via hipDeviceGetLimit. The size is in units of 256 dwords, up to the limit (128K - 16).","ref":[{"_":"hipLimitStackSize","$":{"refid":"group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a30214f21a523ab016abc833abde96486","kindref":"member"}}]},{"_":" sets the limit value of the heap used by the malloc()/free() calls. For limit size, use the  API.","ref":[{"_":"hipLimitMallocHeapSize","$":{"refid":"group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210","kindref":"member"}},{"_":"hipDeviceGetLimit","$":{"refid":"group___device_1ga8edc85bb9637d6b1eda0d064d141a255","kindref":"member"}}]},"Any other input as default, the funtion will return hipErrorUnsupportedLimit.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"limit","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Enum of hipLimit_t to set "]}]},{"parameternamelist":[{"parametername":[{"_":"value","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The size of limit value in bytes"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ,  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorUnsupportedLimit","$":{"refid":"hip__runtime__api_8h_1a700ce451a4df4dca02b539df3cd8c03d","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1980","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1980","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceSetLimit  (  cudaLimit limit, size_t value ) ","hipLine":"hipError_t hipDeviceSetLimit (enum hipLimit_t limit, size_t value)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetLimit  (  cudaLimit limit, size_t value )  using hipError_t hipDeviceSetLimit (enum hipLimit_t limit, size_t value)\nextern \"C\" cudaError_t cudaDeviceSetLimit  (  cudaLimit limit, size_t value )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetLimit call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetLimit (limit, value);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetLimit  (  size_t * pValue, cudaLimit limit )  using hipError_t hipDeviceGetLimit (size_t * pValue, enum hipLimit_t limit)\nextern \"C\" cudaError_t cudaDeviceGetLimit  (  size_t * pValue, cudaLimit limit )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetLimit call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetLimit (pValue, limit);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute  (  int * value, cudaDeviceP2PAttr attr, int srcDevice, int dstDevice )  using hipError_t hipDeviceGetP2PAttribute (int *"},"cudaDeviceSetMemPool":{"cuda":"cudaDeviceSetMemPool","hip":"hipDeviceSetMemPool","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceSetMemPool","args":" (  int  device, cudaMemPool_t memPool ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceSetMemPool"],"argsstring":["(int device, hipMemPool_t mem_pool)"],"name":["hipDeviceSetMemPool"],"param":[{"type":["int"],"declname":["device"]},{"type":[{"ref":[{"_":"hipMemPool_t","$":{"refid":"group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0","kindref":"member"}}]}],"declname":["mem_pool"]}],"briefdescription":[{"para":["Sets the current memory pool of a device. "]}],"detaileddescription":[{"para":[{"_":"The memory pool must be local to the specified device.  allocates from the current mempool of the provided stream's device. By default, a device's current memory pool is its default memory pool.","computeroutput":["hipMallocAsync"]},{"simplesect":[{"$":{"kind":"note"},"para":[{"_":"Use  for asynchronous memory allocations from a device different than the one the stream runs on.","computeroutput":["hipMallocFromPoolAsync"]}]},{"$":{"kind":"return"},"para":[{"_":", , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , , , ","ref":[{"_":"hipDeviceGetDefaultMemPool","$":{"refid":"group___device_1ga16d31ff3398a0c76ea5148563406412a","kindref":"member"}},{"_":"hipMallocAsync","$":{"refid":"group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f","kindref":"member"}},{"_":"hipMemPoolTrimTo","$":{"refid":"group___stream_o_1ga4cd76526312084a115c6007d41ba9b96","kindref":"member"}},{"_":"hipMemPoolGetAttribute","$":{"refid":"group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136","kindref":"member"}},{"_":"hipDeviceSetMemPool","$":{"refid":"group___device_1ga29fd231db3cb31fde8f776d5b073e407","kindref":"member"}},{"_":"hipMemPoolSetAttribute","$":{"refid":"group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf","kindref":"member"}},{"_":"hipMemPoolSetAccess","$":{"refid":"group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c","kindref":"member"}},{"_":"hipMemPoolGetAccess","$":{"refid":"group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}],"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"device","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Device index for the update "]}]},{"parameternamelist":[{"parametername":[{"_":"mem_pool","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Memory pool for update as the current on the specified device"]}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1889","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1889","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceSetMemPool  (  int  device, cudaMemPool_t memPool ) ","hipLine":"hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool  (  int  device, cudaMemPool_t memPool )  using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)\nextern \"C\" cudaError_t cudaDeviceSetMemPool  (  int  device, cudaMemPool_t memPool )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetMemPool (device, memPool);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool  (  int  device, cudaMemPool_t* memPool )  using hipError_t hipDeviceGetMemPool (int device, hipMemPool_t* mem_pool)\nextern \"C\" cudaError_t cudaDeviceGetMemPool  (  int  device, cudaMemPool_t* memPool )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (device, memPool);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPoolInfo (  int  device, cudaMemPool_t memPool, cudaMemPoolProps* prop )  using hipError_t hipDeviceGetMemPool"},"cudaDeviceSetSharedMemConfig":{"cuda":"cudaDeviceSetSharedMemConfig","hip":"hipDeviceSetSharedMemConfig","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaDeviceSetSharedMemConfig","args":" (  cudaSharedMemConfig config ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga9b1f279084e76691cedfbfadf9c717ee","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipDeviceSetSharedMemConfig"],"argsstring":["(hipSharedMemConfig config)"],"name":["hipDeviceSetSharedMemConfig"],"param":[{"type":[{"ref":[{"_":"hipSharedMemConfig","$":{"refid":"group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e","kindref":"member"}}]}],"declname":["config"]}],"briefdescription":[{"para":["The bank width of shared memory on current device is set. "]}],"detaileddescription":[{"para":[{"_":"\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"config","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Configuration for the bank width of shared memory"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorNotInitialized","$":{"refid":"hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2012","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2012","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaDeviceSetSharedMemConfig  (  cudaSharedMemConfig config ) ","hipLine":"hipError_t hipDeviceSetSharedMemConfig (hipSharedMemConfig config)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceSetSharedMemConfig  (  cudaSharedMemConfig config )  using hipError_t hipDeviceSetSharedMemConfig (hipSharedMemConfig config)\nextern \"C\" cudaError_t cudaDeviceSetSharedMemConfig  (  cudaSharedMemConfig config )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetSharedMemConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetSharedMemConfig (config);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetSharedMemConfig  (  cudaSharedMemConfig* pConfig )  using hipError_t hipDeviceGetSharedMemConfig (hipSharedMemConfig* pConfig)\nextern \"C\" cudaError_t cudaDeviceGetSharedMemConfig  (  cudaSharedMemConfig* pConfig )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetSharedMemConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetSharedMemConfig (pConfig);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetByPCIBusId  (  int* device,  const char* pciBusId )  using hipError_t hipDeviceGetByPCIBusId (int* device, const char* pciBusId)\nex"},"cudaGetDeviceFlags":{"cuda":"cudaGetDeviceFlags","hip":"hipGetDeviceFlags","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaGetDeviceFlags","args":" (  unsigned int* flags ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga1270f7281bb46cf3e077944e6f233d53","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipGetDeviceFlags"],"argsstring":["(unsigned int *flags)"],"name":["hipGetDeviceFlags"],"param":[{"type":["unsigned int *"],"declname":["flags"]}],"briefdescription":[{"para":["Gets the flags set for current device. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer of the flags"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ,  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2000","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2000","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaGetDeviceFlags  (  unsigned int* flags ) ","hipLine":"hipError_t hipGetDeviceFlags (unsigned int *flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceFlags  (  unsigned int* flags )  using hipError_t hipGetDeviceFlags (unsigned int *flags)\nextern \"C\" cudaError_t cudaGetDeviceFlags  (  unsigned int* flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceFlags (flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device) using hipError_t hipGetDeviceProperties(struct hipDeviceProp_t *prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties(prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device) using hipError_t hipGetDeviceProperties(struct hipDeviceProp_t *prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device)\n"},"cudaGetDeviceProperties":{"cuda":"cudaGetDeviceProperties","hip":"hipGetDeviceProperties","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaGetDeviceProperties","args":" (  cudaDeviceProp* prop, int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga32208513b7cd491f0cb5fc884053f790","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipGetDeviceProperties"],"argsstring":["(hipDeviceProp_t *prop, int deviceId)"],"name":["hipGetDeviceProperties"],"param":[{"type":[{"_":" *","ref":[{"_":"hipDeviceProp_t","$":{"refid":"structhip_device_prop__t","kindref":"compound"}}]}],"declname":["prop"]},{"type":["int"],"declname":["deviceId"]}],"briefdescription":[{"para":["Returns device properties. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"prop","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["written with device properties "]}]},{"parameternamelist":[{"parametername":[{"_":"deviceId","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["which device to query for information"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":",  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}}]}]}],"xrefsect":[{"$":{"id":"bug_1_bug000001"},"xreftitle":["Bug"],"xrefdescription":[{"para":["HCC always returns 0 for maxThreadsPerMultiProcessor ","HCC always returns 0 for regsPerBlock ","HCC always returns 0 for l2CacheSize"]}]}]},"Populates hipGetDeviceProperties with information for the specified device. "]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1923","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1923","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int  device ) ","hipLine":"hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int deviceId)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int  device )  using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int deviceId)\nextern \"C\" cudaError_t cudaGetDeviceProperties  (  cudaDeviceProp* prop, int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties (prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int *device ) using hipError_t hipGetDevice (int *device)\nextern \"C\" cudaError_t cudaGetDevice ( int *device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDevice (device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaSetDevice ( int device ) using hipError_t hipSetDevice (int device)\nextern \"C\" cudaError_t cudaSetDevice ( int device ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice (device);\n"},"cudaIpcCloseMemHandle":{"cuda":"cudaIpcCloseMemHandle","hip":"hipIpcCloseMemHandle","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaIpcCloseMemHandle","args":" (  void* devPtr ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gac2db0688a6a471e17ca631977e199da7","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipIpcCloseMemHandle"],"argsstring":["(void *devPtr)"],"name":["hipIpcCloseMemHandle"],"param":[{"type":["void *"],"declname":["devPtr"]}],"briefdescription":[{"para":["Close memory mapped with hipIpcOpenMemHandle. "]}],"detaileddescription":[{"para":["Unmaps memory returnd by hipIpcOpenMemHandle. The original allocation in the exporting process as well as imported mappings in other processes will be unaffected.","Any resources used to enable peer access will be freed if this is the last mapping using them.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["devPtr"]}],"parameterdescription":[{"para":["- Device pointer returned by hipIpcOpenMemHandle"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorMapFailed","$":{"refid":"hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":["This IPC memory related feature API on Windows may behave differently from Linux. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2138","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2138","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaIpcCloseMemHandle  (  void* devPtr ) ","hipLine":"hipError_t hipIpcCloseMemHandle (void *devPtr)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcCloseMemHandle  (  void* devPtr )  using hipError_t hipIpcCloseMemHandle (void *devPtr)\nextern \"C\" cudaError_t cudaIpcCloseMemHandle  (  void* devPtr )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcCloseMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcCloseMemHandle (devPtr);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle,  cudaEvent_t event )  using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t* handle, hipEvent_t event)\nextern \"C\" cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle,  cudaEvent_t event )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetEventHandle (handle, event);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcGetMemHandle (  cudaIpcMemHandle_t* handle,  void* dev"},"cudaIpcGetEventHandle":{"cuda":"cudaIpcGetEventHandle","hip":"hipIpcGetEventHandle","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaIpcGetEventHandle","args":" (  cudaIpcEventHandle_t* handle, cudaEvent_t event ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga16b63a461a72d22dbcbbdbdff548adba","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipIpcGetEventHandle"],"argsstring":["(hipIpcEventHandle_t *handle, hipEvent_t event)"],"name":["hipIpcGetEventHandle"],"param":[{"type":[{"_":" *","ref":[{"_":"hipIpcEventHandle_t","$":{"refid":"structhip_ipc_event_handle__t","kindref":"compound"}}]}],"declname":["handle"]},{"type":[{"ref":[{"_":"hipEvent_t","$":{"refid":"group___global_defs_1ga3640952e23c028a87a7db564443948ea","kindref":"member"}}]}],"declname":["event"]}],"briefdescription":[{"para":["Gets an opaque interprocess handle for an event. "]}],"detaileddescription":[{"para":["This opaque handle may be copied into other processes and opened with hipIpcOpenEventHandle. Then hipEventRecord, hipEventSynchronize, hipStreamWaitEvent and hipEventQuery may be used in either process. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"handle","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer to hipIpcEventHandle to return the opaque event handle "]}]},{"parameternamelist":[{"parametername":[{"_":"event","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Event allocated with hipEventInterprocess and hipEventDisableTiming flags"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidConfiguration","$":{"refid":"hip__runtime__api_8h_1ad2e6cccb1d5fb3027a24cd2f4235fe5b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":["This IPC event related feature API is currently applicable on Linux. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2156","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2156","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaIpcGetEventHandle  (  cudaIpcEventHandle_t* handle, cudaEvent_t event ) ","hipLine":"hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t *handle, hipEvent_t event)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcGetEventHandle  (  cudaIpcEventHandle_t* handle, cudaEvent_t event )  using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t *handle, hipEvent_t event)\nextern \"C\" cudaError_t cudaIpcGetEventHandle  (  cudaIpcEventHandle_t* handle, cudaEvent_t event )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetEventHandle (handle, event);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenEventHandle ( cudaEvent_t *event, cudaIpcEventHandle_t handle ) using hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)\nextern \"C\" cudaError_t cudaIpcOpenEventHandle ( cudaEvent_t *event, cudaIpcEventHandle_t handle ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenEventHandle (event, handle);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle ( void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags ) using hipError_t hipIpc"},"cudaIpcGetMemHandle":{"cuda":"cudaIpcGetMemHandle","hip":"hipIpcGetMemHandle","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaIpcGetMemHandle","args":" (  cudaIpcMemHandle_t* handle, void* devPtr ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gafd8c80f7e3b6426a630fff768409be70","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipIpcGetMemHandle"],"argsstring":["(hipIpcMemHandle_t *handle, void *devPtr)"],"name":["hipIpcGetMemHandle"],"param":[{"type":[{"_":" *","ref":[{"_":"hipIpcMemHandle_t","$":{"refid":"structhip_ipc_mem_handle__t","kindref":"compound"}}]}],"declname":["handle"]},{"type":["void *"],"declname":["devPtr"]}],"briefdescription":[{"para":["Gets an interprocess memory handle for an existing device memory allocation. "]}],"detaileddescription":[{"para":["Takes a pointer to the base of an existing device memory allocation created with hipMalloc and exports it for use in another process. This is a lightweight operation and may be called multiple times on an allocation without adverse effects.","If a region of memory is freed with hipFree and a subsequent call to hipMalloc returns memory with the same device address, hipIpcGetMemHandle will return a unique handle for the new memory.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["handle"]}],"parameterdescription":[{"para":["- Pointer to user allocated hipIpcMemHandle to return the handle in. "]}]},{"parameternamelist":[{"parametername":["devPtr"]}],"parameterdescription":[{"para":["- Base pointer to previously allocated device memory"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}},{"_":"hipErrorOutOfMemory","$":{"refid":"hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d","kindref":"member"}},{"_":"hipErrorMapFailed","$":{"refid":"hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":["This IPC memory related feature API on Windows may behave differently from Linux. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2084","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2084","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaIpcGetMemHandle  (  cudaIpcMemHandle_t* handle, void* devPtr ) ","hipLine":"hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t *handle, void *devPtr)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcGetMemHandle  (  cudaIpcMemHandle_t* handle, void* devPtr )  using hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t *handle, void *devPtr)\nextern \"C\" cudaError_t cudaIpcGetMemHandle  (  cudaIpcMemHandle_t* handle, void* devPtr )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetMemHandle (handle, devPtr);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )  using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\" cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenMemHandle (devPtr, handle, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcCloseMemHandle (  void* devPtr )  using"},"cudaIpcOpenEventHandle":{"cuda":"cudaIpcOpenEventHandle","hip":"hipIpcOpenEventHandle","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaIpcOpenEventHandle","args":" (  cudaEvent_t* event, cudaIpcEventHandle_t handle ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1gae73ef28488c43e5343fdf02178c25a5d","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipIpcOpenEventHandle"],"argsstring":["(hipEvent_t *event, hipIpcEventHandle_t handle)"],"name":["hipIpcOpenEventHandle"],"param":[{"type":[{"_":" *","ref":[{"_":"hipEvent_t","$":{"refid":"group___global_defs_1ga3640952e23c028a87a7db564443948ea","kindref":"member"}}]}],"declname":["event"]},{"type":[{"ref":[{"_":"hipIpcEventHandle_t","$":{"refid":"structhip_ipc_event_handle__t","kindref":"compound"}}]}],"declname":["handle"]}],"briefdescription":[{"para":["Opens an interprocess event handles. "]}],"detaileddescription":[{"para":["Opens an interprocess event handle exported from another process with cudaIpcGetEventHandle. The returned hipEvent_t behaves like a locally created event with the hipEventDisableTiming flag specified. This event need be freed with hipEventDestroy. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior. If the function is called within the same process where handle is returned by hipIpcGetEventHandle, it will return hipErrorInvalidContext.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"event","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["Pointer to hipEvent_t to return the event "]}]},{"parameternamelist":[{"parametername":[{"_":"handle","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["The opaque interprocess handle to open"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidContext","$":{"refid":"hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":["This IPC event related feature API is currently applicable on Linux. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2175","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2175","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaIpcOpenEventHandle  (  cudaEvent_t* event, cudaIpcEventHandle_t handle ) ","hipLine":"hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenEventHandle  (  cudaEvent_t* event, cudaIpcEventHandle_t handle )  using hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)\nextern \"C\" cudaError_t cudaIpcOpenEventHandle  (  cudaEvent_t* event, cudaIpcEventHandle_t handle )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenEventHandle (event, handle);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle  (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )  using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\" cudaError_t cudaIpcOpenMemHandle  (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenMemHandle (devPtr, handle, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle  (  void** devPtr,"},"cudaIpcOpenMemHandle":{"cuda":"cudaIpcOpenMemHandle","hip":"hipIpcOpenMemHandle","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaIpcOpenMemHandle","args":" (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga2ada334c986e10805d58167e260cb0df","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipIpcOpenMemHandle"],"argsstring":["(void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)"],"name":["hipIpcOpenMemHandle"],"param":[{"type":["void **"],"declname":["devPtr"]},{"type":[{"ref":[{"_":"hipIpcMemHandle_t","$":{"refid":"structhip_ipc_mem_handle__t","kindref":"compound"}}]}],"declname":["handle"]},{"type":["unsigned int"],"declname":["flags"]}],"briefdescription":[{"para":["Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process. "]}],"detaileddescription":[{"para":["Maps memory exported from another process with hipIpcGetMemHandle into the current device address space. For contexts on different devices hipIpcOpenMemHandle can attempt to enable peer access between the devices as if the user called hipDeviceEnablePeerAccess. This behavior is controlled by the hipIpcMemLazyEnablePeerAccess flag. hipDeviceCanAccessPeer can determine if a mapping is possible.","Contexts that may open hipIpcMemHandles are restricted in the following way. hipIpcMemHandles from each device in a given process may only be opened by one context per device per other process.","Memory returned from hipIpcOpenMemHandle must be freed with hipIpcCloseMemHandle.","Calling hipFree on an exported memory region before calling hipIpcCloseMemHandle in the importing context will result in undefined behavior.",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":["devPtr"]}],"parameterdescription":[{"para":["- Returned device pointer "]}]},{"parameternamelist":[{"parametername":["handle"]}],"parameterdescription":[{"para":["- hipIpcMemHandle to open "]}]},{"parameternamelist":[{"parametername":["flags"]}],"parameterdescription":[{"para":["- Flags for this operation. Must be specified as hipIpcMemLazyEnablePeerAccess"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidContext","$":{"refid":"hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97","kindref":"member"}},{"_":"hipErrorInvalidDevicePointer","$":{"refid":"hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":[{"_":"During multiple processes, using the same memory handle opened by the current context, there is no guarantee that the same device poiter will be returned in . This is diffrent from CUDA. ","computeroutput":["*devPtr"]}]},{"$":{"kind":"note"},"para":["This IPC memory related feature API on Windows may behave differently from Linux. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2120","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2120","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaIpcOpenMemHandle  (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags ) ","hipLine":"hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle  (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags )  using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\" cudaError_t cudaIpcOpenMemHandle  (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenMemHandle (devPtr, handle, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcCloseMemHandle ( void* devPtr ) using hipError_t hipIpcCloseMemHandle (void *devPtr)\nextern \"C\" cudaError_t cudaIpcCloseMemHandle ( void* devPtr ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcCloseMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcCloseMemHandle (devPtr);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaIpcGetMemHandle ( cudaIpcMemHandle_t* handle, void* devPtr ) using hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t* handle, void* devPtr)\nextern \"C\" cudaError_t cudaIpcGetMemHandle ("},"cudaSetDevice":{"cuda":"cudaSetDevice","hip":"hipSetDevice","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaSetDevice","args":" (  int  device ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga43c1e7f15925eeb762195ccb5e063eae","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipSetDevice"],"argsstring":["(int deviceId)"],"name":["hipSetDevice"],"param":[{"type":["int"],"declname":["deviceId"]}],"briefdescription":[{"para":["Set default device to be used for subsequent hip API calls from this thread. "]}],"detaileddescription":[{"para":[{"_":"\nSets  as the default device for the calling host thread. Valid device id's are 0... (-1).","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"deviceId","$":{"direction":"in"}}]}],"parameterdescription":[{"para":[{"_":"Valid device in range 0....","ref":[{"_":"hipGetDeviceCount()","$":{"refid":"group___device_1ga8555d5c76d88c50ddbf54ae70b568394","kindref":"member"}}]}]}]}]}],"computeroutput":["device"],"ref":[{"_":"hipGetDeviceCount()","$":{"refid":"group___device_1ga8555d5c76d88c50ddbf54ae70b568394","kindref":"member"}}]},"Many HIP APIs implicitly use the \"default device\" :",{"itemizedlist":[{"listitem":[{"para":["Any device memory subsequently allocated from this host thread (using hipMalloc) will be allocated on device."]},{"para":["Any streams or events created from this host thread will be associated with device."]},{"para":["Any kernels launched from this host thread (using hipLaunchKernel) will be executed on device (unless a specific stream is specified, in which case the device associated with that stream will be used)."]}]}]},"This function may be called from any host thread. Multiple host threads may use the same device. This function does no synchronization with the previous or new device, and has very little runtime overhead. Applications can use hipSetDevice to quickly switch the default device before making a HIP runtime call which uses the default device.","The default device is stored in thread-local-storage for each thread. Thread-pool implementations may inherit the default device of the previous thread. A good practice is to always call hipSetDevice at the start of HIP coding sequency to establish a known standard device.",{"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorNoDevice","$":{"refid":"hip__runtime__api_8h_1abaff13a1ce1dd40f0578115c56d9dc8d","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":",  ","ref":[{"_":"hipGetDevice","$":{"refid":"group___device_1ga7e0e2e8c5f78e3c7449764657c254e0a","kindref":"member"}},{"_":"hipGetDeviceCount","$":{"refid":"group___device_1ga8555d5c76d88c50ddbf54ae70b568394","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"1815","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"1815","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaSetDevice  (  int  device ) ","hipLine":"hipError_t hipSetDevice (int deviceId)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaSetDevice  (  int  device )  using hipError_t hipSetDevice (int deviceId)\nextern \"C\" cudaError_t cudaSetDevice  (  int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice (device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties  (  struct cudaDeviceProp *prop,  int  device )  using hipError_t hipGetDeviceProperties (struct hipDeviceProp_t *prop, int deviceId)\nextern \"C\" cudaError_t cudaGetDeviceProperties  (  struct cudaDeviceProp *prop,  int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties (prop, device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice  (  int *device )  using hipError_t hipGetDevice (int *deviceId)\nextern \"C\" cudaError_t cudaGetDevice  (  int *device )  {\n    if(VERBOSE) std::"},"cudaSetDeviceFlags":{"cuda":"cudaSetDeviceFlags","hip":"hipSetDeviceFlags","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaSetDeviceFlags","args":" (  unsigned int  flags ) "},"hipFun":{"$":{"kind":"function","id":"group___device_1ga6e54db382768827e84725632018307aa","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipSetDeviceFlags"],"argsstring":["(unsigned flags)"],"name":["hipSetDeviceFlags"],"param":[{"type":["unsigned"],"declname":["flags"]}],"briefdescription":[{"para":["The current device behavior is changed according the flags passed. "]}],"detaileddescription":[{"para":[{"_":"\nThe schedule flags impact how HIP waits for the completion of a command running on a device. hipDeviceScheduleSpin : HIP runtime will actively spin in the thread which submitted the work until the command completes. This offers the lowest latency, but will consume a CPU core and may increase power. hipDeviceScheduleYield : The HIP runtime will yield the CPU to system so that other tasks can use it. This may increase latency to detect the completion but will consume less power and is friendlier to other tasks in the system. hipDeviceScheduleBlockingSync : On ROCm platform, this is a synonym for hipDeviceScheduleYield. hipDeviceScheduleAuto : Use a hueristic to select between Spin and Yield modes. If the number of HIP contexts is greater than the number of logical processors in the system, use Spin scheduling. Else use Yield scheduling.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["Flag to set on the current device"]}]}]}]},{"_":"hipDeviceMapHost : Allow mapping host memory. On ROCM, this is always allowed and the flag is ignored. hipDeviceLmemResizeToMax : \n\n","simplesect":[{"$":{"kind":"warning"},"para":["ROCm silently ignores this flag."]},{"$":{"kind":"return"},"para":[{"_":", ,  ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidDevice","$":{"refid":"hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5","kindref":"member"}},{"_":"hipErrorSetOnActiveProcess","$":{"refid":"hip__runtime__api_8h_1a67cb78915676025c488014407580c212","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2037","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2037","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaSetDeviceFlags  (  unsigned int  flags ) ","hipLine":"hipError_t hipSetDeviceFlags (unsigned flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaSetDeviceFlags  (  unsigned int  flags )  using hipError_t hipSetDeviceFlags (unsigned flags)\nextern \"C\" cudaError_t cudaSetDeviceFlags  (  unsigned int  flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDeviceFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDeviceFlags (flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaSetDevice  (  int  device )  using hipError_t hipSetDevice (int device)\nextern \"C\" cudaError_t cudaSetDevice  (  int  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice (device);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaGetDevice  (  int *  device )  using hipError_t hipGetDevice (int *device)\nextern \"C\" cudaError_t cudaGetDevice  (  int *  device )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n   "},"cudaStreamAddCallback":{"cuda":"cudaStreamAddCallback","hip":"hipStreamAddCallback","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamAddCallback","args":" (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1ga3e098cd7478828b2104abb41a7bb00d3","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamAddCallback"],"argsstring":["(hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)"],"name":["hipStreamAddCallback"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":[{"ref":[{"_":"hipStreamCallback_t","$":{"refid":"group___stream_1ga6d4e90ec5736f9728102be22d0559dfd","kindref":"member"}}]}],"declname":["callback"]},{"type":["void *"],"declname":["userData"]},{"type":["unsigned int"],"declname":["flags"]}],"briefdescription":[{"para":["Adds a callback to be called on the host after all currently enqueued items in the stream have completed. For each hipStreamAddCallback call, a callback will be executed exactly once. The callback will block later work in the stream until it is finished. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Stream to add callback to "]}]},{"parameternamelist":[{"parametername":[{"_":"callback","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- The function to call once preceding stream operations are complete "]}]},{"parameternamelist":[{"parametername":[{"_":"userData","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- User specified data to be passed to the callback function "]}]},{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Reserved for future use, must be 0 "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}},{"_":"hipErrorNotSupported","$":{"refid":"hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , , ,  ","ref":[{"_":"hipStreamCreate","$":{"refid":"group___stream_1gaff5b62d6e9502d80879f7176f4d03102","kindref":"member"}},{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}},{"_":"hipStreamQuery","$":{"refid":"group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e","kindref":"member"}},{"_":"hipStreamSynchronize","$":{"refid":"group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74","kindref":"member"}},{"_":"hipStreamWaitEvent","$":{"refid":"group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633","kindref":"member"}},{"_":"hipStreamDestroy","$":{"refid":"group___stream_1ga3076a3499ed2c7821311006100bb95ec","kindref":"member"}},{"_":"hipStreamCreateWithPriority","$":{"refid":"group___stream_1gace005d8ea734fb66c995bd43dac3fd44","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2560","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2560","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamAddCallback  (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags ) ","hipLine":"hipError_t hipStreamAddCallback (hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamAddCallback  (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags )  using hipError_t hipStreamAddCallback (hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)\nextern \"C\" cudaError_t cudaStreamAddCallback  (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamAddCallback call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamAddCallback (stream, callback, userData, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t * stream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags ( hipStream_t * stream, unsigned int flags )\nextern \"C\" cudaError_t cudaStreamCreateWithFlags ( cudaStream_t * stream, unsigned int flags ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithFlags ( stream, flags );\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamDestroy ( cudaStream_t stream ) using hipError_t hipStreamDestroy ( hipStream_t stream )\nextern \"C\" cudaError_t cudaStreamDestroy ( cudaStream_t stream ) {\n   "},"cudaStreamAttachMemAsync":{"cuda":"cudaStreamAttachMemAsync","hip":"hipStreamAttachMemAsync","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamAttachMemAsync","args":" (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle ) "},"hipFun":{"$":{"kind":"function","id":"group___memory_m_1gabd2ab38956e78d8a5d5a0320f5ef5027","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamAttachMemAsync"],"argsstring":["(hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)"],"name":["hipStreamAttachMemAsync"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":["void *"],"declname":["dev_ptr"]},{"type":["size_t"],"declname":["length"]},{"type":["unsigned int"],"declname":["flags"]}],"briefdescription":[{"para":["Attach memory to a stream asynchronously in HIP. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- stream in which to enqueue the attach operation "]}]},{"parameternamelist":[{"parametername":[{"_":"dev_ptr","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- pointer to memory (must be a pointer to managed memory or to a valid host-accessible region of system-allocated memory) "]}]},{"parameternamelist":[{"parametername":[{"_":"length","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- length of memory (defaults to zero) "]}]},{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- must be one of hipMemAttachGlobal, hipMemAttachHost or hipMemAttachSingle (defaults to hipMemAttachSingle)"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"note"},"para":["This API is implemented on Linux, under development on Windows. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"3275","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"3275","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamAttachMemAsync  (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle ) ","hipLine":"hipError_t hipStreamAttachMemAsync (hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamAttachMemAsync  (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle )  using hipError_t hipStreamAttachMemAsync (hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)\nextern \"C\" cudaError_t cudaStreamAttachMemAsync  (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamAttachMemAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamAttachMemAsync (stream, devPtr, length, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t *stream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags ( hipStream_t *stream, unsigned int flags )\nextern \"C\" cudaError_t cudaStreamCreateWithFlags ( cudaStream_t *stream, unsigned int flags ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithFlags (stream, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamDestroy ( cudaStream_t stream ) using hipError_t hipStreamDestroy ( hipStream_t stream )\nextern \"C\" cudaError_t cudaStreamDestroy ( cudaStream_t stream"},"cudaStreamBeginCapture":{"cuda":"cudaStreamBeginCapture","hip":"hipStreamBeginCapture","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamBeginCapture","args":" (  cudaStream_t stream, cudaStreamCaptureMode mode ) "},"hipFun":{"$":{"kind":"function","id":"group___graph_1ga826596fabd1d7657721cc3abfb476b10","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamBeginCapture"],"argsstring":["(hipStream_t stream, hipStreamCaptureMode mode)"],"name":["hipStreamBeginCapture"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":[{"ref":[{"_":"hipStreamCaptureMode","$":{"refid":"group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c","kindref":"member"}}]}],"declname":["mode"]}],"briefdescription":[{"para":["Begins graph capture on a stream. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Stream to initiate capture. "]}]},{"parameternamelist":[{"parametername":[{"_":"mode","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Controls the interaction of this capture sequence with other API calls that are not safe."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"6638","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"6638","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamBeginCapture  (  cudaStream_t stream, cudaStreamCaptureMode mode ) ","hipLine":"hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamBeginCapture  (  cudaStream_t stream, cudaStreamCaptureMode mode )  using hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)\nextern \"C\" cudaError_t cudaStreamBeginCapture  (  cudaStream_t stream, cudaStreamCaptureMode mode )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamBeginCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamBeginCapture (stream, mode);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamEndCapture  (  cudaStream_t stream, cudaStream_t *capture_stream )  using hipError_t hipStreamEndCapture (hipStream_t stream, hipStream_t *capture_stream)\nextern \"C\" cudaError_t cudaStreamEndCapture  (  cudaStream_t stream, cudaStream_t *capture_stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamEndCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamEndCapture (stream, capture_stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus *captureStatus )  using"},"cudaStreamCreate":{"cuda":"cudaStreamCreate","hip":"hipStreamCreate","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamCreate","args":" (  cudaStream_t* pStream ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1gaff5b62d6e9502d80879f7176f4d03102","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamCreate"],"argsstring":["(hipStream_t *stream)"],"name":["hipStreamCreate"],"param":[{"type":[{"_":" *","ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]}],"briefdescription":[{"para":["Create an asynchronous stream. "]}],"detaileddescription":[{"para":[{"_":"\n\nCreate a new asynchronous stream.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["Valid pointer to hipStream_t. This function writes the memory with the newly created stream. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}],"computeroutput":["stream"]},{"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , ,  ","ref":[{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}},{"_":"hipStreamCreateWithPriority","$":{"refid":"group___stream_1gace005d8ea734fb66c995bd43dac3fd44","kindref":"member"}},{"_":"hipStreamSynchronize","$":{"refid":"group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74","kindref":"member"}},{"_":"hipStreamWaitEvent","$":{"refid":"group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633","kindref":"member"}},{"_":"hipStreamDestroy","$":{"refid":"group___stream_1ga3076a3499ed2c7821311006100bb95ec","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2343","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2343","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamCreate  (  cudaStream_t* pStream ) ","hipLine":"hipError_t hipStreamCreate (hipStream_t *stream)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreate  (  cudaStream_t* pStream )  using hipError_t hipStreamCreate (hipStream_t *stream)\nextern \"C\" cudaError_t cudaStreamCreate  (  cudaStream_t* pStream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreate (pStream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamDestroy  (  cudaStream_t stream )  using hipError_t hipStreamDestroy (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamDestroy  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamDestroy (stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \""},"cudaStreamCreateWithPriority":{"cuda":"cudaStreamCreateWithPriority","hip":"hipStreamCreateWithPriority","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamCreateWithPriority","args":" (  cudaStream_t* pStream, unsigned int  flags, int  priority ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1gace005d8ea734fb66c995bd43dac3fd44","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamCreateWithPriority"],"argsstring":["(hipStream_t *stream, unsigned int flags, int priority)"],"name":["hipStreamCreateWithPriority"],"param":[{"type":[{"_":" *","ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":["unsigned int"],"declname":["flags"]},{"type":["int"],"declname":["priority"]}],"briefdescription":[{"para":["Create an asynchronous stream with the specified priority. "]}],"detaileddescription":[{"para":[{"_":"\n\nCreate a new asynchronous stream with the specified priority.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See , .","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["Pointer to new stream "]}]},{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["to control stream creation. "]}]},{"parameternamelist":[{"parametername":[{"_":"priority","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["of the stream. Lower numbers represent higher priorities. "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]}],"computeroutput":["stream"],"ref":[{"_":"hipStreamDefault","$":{"refid":"group___global_defs_1ga6df5f70eb976836ab3598cacf0ffcdf9","kindref":"member"}},{"_":"hipStreamNonBlocking","$":{"refid":"group___global_defs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d","kindref":"member"}}]},{"simplesect":[{"$":{"kind":"see"},"para":[{"_":", , ,  ","ref":[{"_":"hipStreamCreate","$":{"refid":"group___stream_1gaff5b62d6e9502d80879f7176f4d03102","kindref":"member"}},{"_":"hipStreamSynchronize","$":{"refid":"group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74","kindref":"member"}},{"_":"hipStreamWaitEvent","$":{"refid":"group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633","kindref":"member"}},{"_":"hipStreamDestroy","$":{"refid":"group___stream_1ga3076a3499ed2c7821311006100bb95ec","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2378","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2378","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamCreateWithPriority  (  cudaStream_t* pStream, unsigned int  flags, int  priority ) ","hipLine":"hipError_t hipStreamCreateWithPriority (hipStream_t *stream, unsigned int flags, int priority)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithPriority  (  cudaStream_t* pStream, unsigned int  flags, int  priority )  using hipError_t hipStreamCreateWithPriority (hipStream_t *stream, unsigned int flags, int priority)\nextern \"C\" cudaError_t cudaStreamCreateWithPriority  (  cudaStream_t* pStream, unsigned int  flags, int  priority )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithPriority (pStream, flags, priority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreate ( cudaStream_t* pStream ) using hipError_t hipStreamCreate (hipStream_t *stream)\nextern \"C\" cudaError_t cudaStreamCreate ( cudaStream_t* pStream ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreate (pStream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamDestroy ( cudaStream_t stream ) using hipError_t hipStreamDestroy (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamDestroy ( cudaStream_t stream ) {\n    if(VERBOSE) std::cout << \"Intercepted c"},"cudaStreamEndCapture":{"cuda":"cudaStreamEndCapture","hip":"hipStreamEndCapture","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamEndCapture","args":" (  cudaStream_t stream, cudaGraph_t* pGraph ) "},"hipFun":{"$":{"kind":"function","id":"group___graph_1ga83fc036ee874fbfe066c0fe4fce816b3","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamEndCapture"],"argsstring":["(hipStream_t stream, hipGraph_t *pGraph)"],"name":["hipStreamEndCapture"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":[{"_":" *","ref":[{"_":"hipGraph_t","$":{"refid":"group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec","kindref":"member"}}]}],"declname":["pGraph"]}],"briefdescription":[{"para":["Ends capture on a stream, returning the captured graph. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Stream to end capture. "]}]},{"parameternamelist":[{"parametername":[{"_":"pGraph","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["- returns the graph captured."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"6652","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"6652","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamEndCapture  (  cudaStream_t stream, cudaGraph_t* pGraph ) ","hipLine":"hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t *pGraph)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamEndCapture  (  cudaStream_t stream, cudaGraph_t* pGraph )  using hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t *pGraph)\nextern \"C\" cudaError_t cudaStreamEndCapture  (  cudaStream_t stream, cudaGraph_t* pGraph )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamEndCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamEndCapture (stream, pGraph);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamBeginCapture ( cudaStream_t stream, cudaStreamCaptureMode mode ) using hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)\nextern \"C\" cudaError_t cudaStreamBeginCapture ( cudaStream_t stream, cudaStreamCaptureMode mode ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamBeginCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamBeginCapture (stream, mode);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t *pStream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags (hipStream_t *pStream, unsigned int flags)\nextern \"C\" c"},"cudaStreamGetCaptureInfo":{"cuda":"cudaStreamGetCaptureInfo","hip":"hipStreamGetCaptureInfo","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamGetCaptureInfo","args":" (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 ) "},"hipFun":{"$":{"kind":"function","id":"group___graph_1ga5343379e3f86d39aa8527fe0e68abf14","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamGetCaptureInfo"],"argsstring":["(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)"],"name":["hipStreamGetCaptureInfo"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":[{"_":" *","ref":[{"_":"hipStreamCaptureStatus","$":{"refid":"group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7","kindref":"member"}}]}],"declname":["pCaptureStatus"]},{"type":["unsigned long long *"],"declname":["pId"]}],"briefdescription":[{"para":["Get capture status of a stream. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Stream under capture. "]}]},{"parameternamelist":[{"parametername":[{"_":"pCaptureStatus","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["- returns current status of the capture. "]}]},{"parameternamelist":[{"parametername":[{"_":"pId","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["- unique ID of the capture."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorStreamCaptureImplicit","$":{"refid":"hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"6667","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"6667","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamGetCaptureInfo  (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 ) ","hipLine":"hipError_t hipStreamGetCaptureInfo (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamGetCaptureInfo  (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 )  using hipError_t hipStreamGetCaptureInfo (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)\nextern \"C\" cudaError_t cudaStreamGetCaptureInfo  (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetCaptureInfo call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetCaptureInfo (stream, captureStatus_out, id_out);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamGetFlags ( cudaStream_t hStream, unsigned int * flags ) using hipError_t hipStreamGetFlags (hipStream_t hStream, unsigned int * flags )\nextern \"C\" cudaError_t cudaStreamGetFlags ( cudaStream_t hStream, unsigned int * flags ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetFlags (hStream, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamGetPriority ( cudaStream_t hStream, int * priority ) using hipError_t hipStreamGetPriority (hipStream_t hStream, int * priority )\nextern \"C\" cudaError_"},"cudaStreamGetFlags":{"cuda":"cudaStreamGetFlags","hip":"hipStreamGetFlags","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamGetFlags","args":" (  cudaStream_t hStream, unsigned int* flags ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1ga3249555a26439591b8873f70b39bb116","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamGetFlags"],"argsstring":["(hipStream_t stream, unsigned int *flags)"],"name":["hipStreamGetFlags"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":["unsigned int *"],"declname":["flags"]}],"briefdescription":[{"para":["Return flags associated with this stream. "]}],"detaileddescription":[{"para":[{"_":"\n\n\nReturn flags associated with this stream in *.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["stream to be queried "]}]},{"parameternamelist":[{"parametername":[{"_":"flags","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["Pointer to an unsigned integer in which the stream's flags are returned "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]},{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]}],"computeroutput":["flags"]},{"simplesect":[{"$":{"kind":"see"},"para":[{"ref":[{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2482","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2482","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamGetFlags  (  cudaStream_t hStream, unsigned int* flags ) ","hipLine":"hipError_t hipStreamGetFlags (hipStream_t stream, unsigned int *flags)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamGetFlags  (  cudaStream_t hStream, unsigned int* flags )  using hipError_t hipStreamGetFlags (hipStream_t stream, unsigned int *flags)\nextern \"C\" cudaError_t cudaStreamGetFlags  (  cudaStream_t hStream, unsigned int* flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetFlags (hStream, flags);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags ( hipStream_t* pStream, unsigned int flags )\nextern \"C\" cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithFlags ( pStream, flags );\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreate ( cudaStream_t* pStream ) using hipError_t hipStreamCreate ( hipStream_t* pStream )\nextern \"C\" cudaError_t cudaStreamCreate ( cudaStream_t* pStream )"},"cudaStreamGetPriority":{"cuda":"cudaStreamGetPriority","hip":"hipStreamGetPriority","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamGetPriority","args":" (  cudaStream_t hStream, int* priority ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1gae5a0d1e66035b157149ec10f5c7952be","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamGetPriority"],"argsstring":["(hipStream_t stream, int *priority)"],"name":["hipStreamGetPriority"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":["int *"],"declname":["priority"]}],"briefdescription":[{"para":["Query the priority of a stream. "]}],"detaileddescription":[{"para":[{"_":"\n\n\nQuery the priority of a stream. The priority is returned in in priority.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["stream to be queried "]}]},{"parameternamelist":[{"parametername":[{"_":"priority","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["Pointer to an unsigned integer in which the stream's priority is returned "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]},{"$":{"kind":"return"},"para":[{"ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]}]},{"simplesect":[{"$":{"kind":"see"},"para":[{"ref":[{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2496","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2496","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamGetPriority  (  cudaStream_t hStream, int* priority ) ","hipLine":"hipError_t hipStreamGetPriority (hipStream_t stream, int *priority)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamGetPriority  (  cudaStream_t hStream, int* priority )  using hipError_t hipStreamGetPriority (hipStream_t stream, int *priority)\nextern \"C\" cudaError_t cudaStreamGetPriority  (  cudaStream_t hStream, int* priority )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetPriority (hStream, priority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithPriority ( cudaStream_t* pStream, unsigned int flags, int priority ) using hipError_t hipStreamCreateWithPriority (hipStream_t* stream, unsigned int flags, int priority)\nextern \"C\" cudaError_t cudaStreamCreateWithPriority ( cudaStream_t* pStream, unsigned int flags, int priority ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithPriority (pStream, flags, priority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags ) using hipError_t hipStreamCreateWith"},"cudaStreamIsCapturing":{"cuda":"cudaStreamIsCapturing","hip":"hipStreamIsCapturing","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamIsCapturing","args":" (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus ) "},"hipFun":{"$":{"kind":"function","id":"group___graph_1ga1e6353035e74630a13ad7effd44e3263","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamIsCapturing"],"argsstring":["(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)"],"name":["hipStreamIsCapturing"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]},{"type":[{"_":" *","ref":[{"_":"hipStreamCaptureStatus","$":{"refid":"group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7","kindref":"member"}}]}],"declname":["pCaptureStatus"]}],"briefdescription":[{"para":["Get stream's capture state. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Stream under capture. "]}]},{"parameternamelist":[{"parametername":[{"_":"pCaptureStatus","$":{"direction":"out"}}]}],"parameterdescription":[{"para":["- returns current status of the capture."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorStreamCaptureImplicit","$":{"refid":"hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"6704","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"6704","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus ) ","hipLine":"hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )  using hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)\nextern \"C\" cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamIsCapturing call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamIsCapturing (stream, pCaptureStatus);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )  using hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)\nextern \"C\" cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamIsCapturing call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamIsCapturing (stream, pCaptureStatus);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamIsCapturing  (  cudaStream_t stream, cudaStreamCaptureStatus"},"cudaStreamQuery":{"cuda":"cudaStreamQuery","hip":"hipStreamQuery","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamQuery","args":" (  cudaStream_t stream ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamQuery"],"argsstring":["(hipStream_t stream)"],"name":["hipStreamQuery"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]}],"briefdescription":[{"para":[{"_":"Return  if all of the operations in the specified  have completed, or  if not. ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorNotReady","$":{"refid":"hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76","kindref":"member"}}],"computeroutput":["stream"]}]}],"detaileddescription":[{"para":[{"_":"\n\nThis is thread-safe and returns a snapshot of the current state of the queue. However, if other host threads are sending work to the stream, the status may change immediately after the function is called. It is typically used for debug.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["stream to query"]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorNotReady","$":{"refid":"hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]}]},{"simplesect":[{"$":{"kind":"see"},"para":[{"_":", , , , ,  ","ref":[{"_":"hipStreamCreate","$":{"refid":"group___stream_1gaff5b62d6e9502d80879f7176f4d03102","kindref":"member"}},{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}},{"_":"hipStreamCreateWithPriority","$":{"refid":"group___stream_1gace005d8ea734fb66c995bd43dac3fd44","kindref":"member"}},{"_":"hipStreamWaitEvent","$":{"refid":"group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633","kindref":"member"}},{"_":"hipStreamSynchronize","$":{"refid":"group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74","kindref":"member"}},{"_":"hipStreamDestroy","$":{"refid":"group___stream_1ga3076a3499ed2c7821311006100bb95ec","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2427","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2427","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamQuery  (  cudaStream_t stream ) ","hipLine":"hipError_t hipStreamQuery (hipStream_t stream)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamQuery  (  cudaStream_t stream )  using hipError_t hipStreamQuery (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamQuery  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamQuery call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamQuery (stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamSynchronize (stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamWaitEvent  (  cudaStream_t stream,  cudaEvent_t event,  unsigned flags )  using hipError_t hipStreamWaitEvent (hipStream_t stream, hipEvent_t event, unsigned flags)\nextern \"C\" cudaError_t cudaStreamWaitEvent  ("},"cudaStreamSynchronize":{"cuda":"cudaStreamSynchronize","hip":"hipStreamSynchronize","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaStreamSynchronize","args":" (  cudaStream_t stream ) "},"hipFun":{"$":{"kind":"function","id":"group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipStreamSynchronize"],"argsstring":["(hipStream_t stream)"],"name":["hipStreamSynchronize"],"param":[{"type":[{"ref":[{"_":"hipStream_t","$":{"refid":"group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29","kindref":"member"}}]}],"declname":["stream"]}],"briefdescription":[{"para":["Wait for all commands in stream to complete. "]}],"detaileddescription":[{"para":[{"_":"\n\nThis command is host-synchronous : the host will block until the specified stream is empty.","parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"stream","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["stream identifier."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidHandle","$":{"refid":"hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611","kindref":"member"}}]}]}]},"This command follows standard null-stream semantics. Specifically, specifying the null stream will cause the command to wait for other streams on the same device to complete all pending operations.","This command honors the hipDeviceLaunchBlocking flag, which controls whether the wait is active or blocking.",{"simplesect":[{"$":{"kind":"see"},"para":[{"_":", , , ,  ","ref":[{"_":"hipStreamCreate","$":{"refid":"group___stream_1gaff5b62d6e9502d80879f7176f4d03102","kindref":"member"}},{"_":"hipStreamCreateWithFlags","$":{"refid":"group___stream_1gaf2382e3cc6632332a8983a0f58e43494","kindref":"member"}},{"_":"hipStreamCreateWithPriority","$":{"refid":"group___stream_1gace005d8ea734fb66c995bd43dac3fd44","kindref":"member"}},{"_":"hipStreamWaitEvent","$":{"refid":"group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633","kindref":"member"}},{"_":"hipStreamDestroy","$":{"refid":"group___stream_1ga3076a3499ed2c7821311006100bb95ec","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2448","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2448","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaStreamSynchronize  (  cudaStream_t stream ) ","hipLine":"hipError_t hipStreamSynchronize (hipStream_t stream)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamSynchronize  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamSynchronize (stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamDestroy  (  cudaStream_t stream )  using hipError_t hipStreamDestroy (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamDestroy  (  cudaStream_t stream )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamDestroy (stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags  (  cudaStream_t *stream,  unsigned int flags )  using hipError_t hipStreamCreateWithFlags (hipStream_t *stream, unsigned int flags)\nextern \"C\" cudaError_t cudaStreamCreateWithFlags  (  cudaStream_t *stream"},"cudaThreadExchangeStreamCaptureMode":{"cuda":"cudaThreadExchangeStreamCaptureMode","hip":"hipThreadExchangeStreamCaptureMode","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaThreadExchangeStreamCaptureMode","args":" (  cudaStreamCaptureMode ** mode ) "},"hipFun":{"$":{"kind":"function","id":"group___graph_1gaa5d692f2f09cad68b7534917e76d8c7f","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipThreadExchangeStreamCaptureMode"],"argsstring":["(hipStreamCaptureMode *mode)"],"name":["hipThreadExchangeStreamCaptureMode"],"param":[{"type":[{"_":" *","ref":[{"_":"hipStreamCaptureMode","$":{"refid":"group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c","kindref":"member"}}]}],"declname":["mode"]}],"briefdescription":[{"para":["Swaps the stream capture mode of a thread. "]}],"detaileddescription":[{"para":[{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"mode","$":{"direction":"in"}}]}],"parameterdescription":[{"para":["- Pointer to mode value to swap with the current mode "]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}}]}]},{"$":{"kind":"warning"},"para":[": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"6734","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"6734","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaThreadExchangeStreamCaptureMode  (  cudaStreamCaptureMode ** mode ) ","hipLine":"hipError_t hipThreadExchangeStreamCaptureMode (hipStreamCaptureMode *mode)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaThreadExchangeStreamCaptureMode  (  cudaStreamCaptureMode ** mode )  using hipError_t hipThreadExchangeStreamCaptureMode (hipStreamCaptureMode *mode)\nextern \"C\" cudaError_t cudaThreadExchangeStreamCaptureMode  (  cudaStreamCaptureMode ** mode )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaThreadExchangeStreamCaptureMode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipThreadExchangeStreamCaptureMode (mode);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority ) using hipError_t hipDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority )\nextern \"C\" cudaError_t cudaDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetStreamPriorityRange call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetStreamPriorityRange (leastPriority, greatestPriority);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority ) using hipError_t hip"},"cudaEventCreate":{"cuda":"cudaEventCreate","hip":"hipEventCreate","cudaFun":{"keyword":"__host__","return":"cudaError_t","name":"cudaEventCreate","args":" (  cudaEvent_t* event, unsigned int  flags ) "},"hipFun":{"$":{"kind":"function","id":"group___event_1ga5df2309c9f29ca4c8e669db658d411b4","prot":"public","static":"no","const":"no","explicit":"no","inline":"no","virt":"non-virtual"},"type":[{"ref":[{"_":"hipError_t","$":{"refid":"group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe","kindref":"member"}}]}],"definition":["hipError_t hipEventCreate"],"argsstring":["(hipEvent_t *event)"],"name":["hipEventCreate"],"param":[{"type":[{"_":" *","ref":[{"_":"hipEvent_t","$":{"refid":"group___global_defs_1ga3640952e23c028a87a7db564443948ea","kindref":"member"}}]}],"declname":["event"]}],"briefdescription":["\n        "],"detaileddescription":[{"para":["Create an event",{"parameterlist":[{"$":{"kind":"param"},"parameteritem":[{"parameternamelist":[{"parametername":[{"_":"event","$":{"direction":"inout"}}]}],"parameterdescription":[{"para":["Returns the newly created event."]}]}]}],"simplesect":[{"$":{"kind":"return"},"para":[{"_":", , , , ","ref":[{"_":"hipSuccess","$":{"refid":"hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b","kindref":"member"}},{"_":"hipErrorNotInitialized","$":{"refid":"hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7","kindref":"member"}},{"_":"hipErrorInvalidValue","$":{"refid":"hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635","kindref":"member"}},{"_":"hipErrorLaunchFailure","$":{"refid":"hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a","kindref":"member"}},{"_":"hipErrorOutOfMemory","$":{"refid":"hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d","kindref":"member"}}]}]},{"$":{"kind":"see"},"para":[{"_":", , , , ,  ","ref":[{"_":"hipEventCreateWithFlags","$":{"refid":"group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75","kindref":"member"}},{"_":"hipEventRecord","$":{"refid":"group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29","kindref":"member"}},{"_":"hipEventQuery","$":{"refid":"group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776","kindref":"member"}},{"_":"hipEventSynchronize","$":{"refid":"group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1","kindref":"member"}},{"_":"hipEventDestroy","$":{"refid":"group___event_1ga83260357dce0c39e8c6a3c74ec97484c","kindref":"member"}},{"_":"hipEventElapsedTime","$":{"refid":"group___event_1gad4128b815cb475c8e13c7e66ff6250b7","kindref":"member"}}]}]}]}]}],"inbodydescription":["\n        "],"location":[{"$":{"file":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","line":"2729","column":"12","declfile":"/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h","declline":"2729","declcolumn":"12"}}]},"cudaLine":"cudaError_t cudaEventCreate  (  cudaEvent_t* event, unsigned int  flags ) ","hipLine":"hipError_t hipEventCreate (hipEvent_t *event)","prediction":"\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\ncudaError_t hipErrorToCudaError(hipError_t hipError);\n\n// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int * count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaEventCreate  (  cudaEvent_t* event, unsigned int  flags )  using hipError_t hipEventCreate (hipEvent_t *event)\nextern \"C\" cudaError_t cudaEventCreate  (  cudaEvent_t* event, unsigned int  flags )  {\n    if(VERBOSE) std::cout << \"Intercepted cudaEventCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventCreate (event);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream ) using hipError_t hipEventRecord (hipEvent_t event, hipStream_t stream)\nextern \"C\" cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream ) {\n    if(VERBOSE) std::cout << \"Intercepted cudaEventRecord call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventRecord (event, stream);\n\n    return hipErrorToCudaError(hipError);\n}\n\n// cudaError_t cudaEventSynchronize ( cudaEvent_t event ) using hipError_t hipEventSynchronize (hipEvent_t event)\nextern \"C\" cudaError_t cudaEventSynchronize ( cudaEvent_t event ) {\n    if(VERBOSE) std::cout << \""}}}