{
  "functions": {
    "cudaChooseDevice": {
      "cuda": "cudaChooseDevice",
      "hip": "hipChooseDevice",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaChooseDevice",
        "args": "  int* device, const cudaDeviceProp* prop ",
        "types": [
          "intundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gaf1e365e1d17cf40644d1470de4817c8e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipChooseDevice"
        ],
        "argsstring": [
          "(int *device, const hipDeviceProp_t *prop)"
        ],
        "name": [
          "hipChooseDevice"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipDeviceProp_t",
                    "$": {
                      "refid": "structhip_device_prop__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "prop"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              {
                "_": "Device which matches  is returned. ",
                "ref": [
                  {
                    "_": "hipDeviceProp_t",
                    "$": {
                      "refid": "structhip_device_prop__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "prop",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the properties"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2046",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2046",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "hipDeviceProp_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaChooseDevice (  int* device, const cudaDeviceProp* prop )",
      "hipLine": "hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)",
      "graft": "// cudaError_t cudaChooseDevice (  int* device, const cudaDeviceProp* prop ) using hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipDeviceProp_t to cudaDeviceProp\ncudaDeviceProp hipDeviceProp_t_TO_cudaDeviceProp(hipDeviceProp_t);\n\n// cudaDeviceProp to hipDeviceProp_t\nhipDeviceProp_t cudaDeviceProp_TO_hipDeviceProp_t(cudaDeviceProp);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaChooseDevice (  int* device, const cudaDeviceProp* prop ) using hipError_t hipChooseDevice (int *device, const hipDeviceProp_t *prop)\nextern \"C\"  cudaError_t cudaChooseDevice (  int* device, const cudaDeviceProp* prop )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaChooseDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipChooseDevice(device, cudaDeviceProp_TO_hipDeviceProp_t(*prop));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t* prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties(hipDeviceProp_t_TO_cudaDeviceProp(*prop), device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice",
      "forcePrediction": false
    },
    "cudaDeviceGetByPCIBusId": {
      "cuda": "cudaDeviceGetByPCIBusId",
      "hip": "hipDeviceGetByPCIBusId",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetByPCIBusId",
        "args": "  int* device, const char* pciBusId ",
        "types": [
          "intundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___driver_1ga2ec307f165d576c0c673a7b1fa9b0fe4",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetByPCIBusId"
        ],
        "argsstring": [
          "(int *device, const char *pciBusId)"
        ],
        "name": [
          "hipDeviceGetByPCIBusId"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              "const char *"
            ],
            "declname": [
              "pciBusId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a handle to a compute device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The handle of the device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pciBusId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The string of PCI Bus Id for the device"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1743",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1743",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "const char undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetByPCIBusId (  int* device, const char* pciBusId )",
      "hipLine": "hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)",
      "graft": "// cudaError_t cudaDeviceGetByPCIBusId (  int* device, const char* pciBusId ) using hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetByPCIBusId (  int* device, const char* pciBusId ) using hipError_t hipDeviceGetByPCIBusId (int *device, const char *pciBusId)\nextern \"C\"  cudaError_t cudaDeviceGetByPCIBusId (  int* device, const char* pciBusId )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetByPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetByPCIBusId (device, pciBusId);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int len, int device ) using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\"  cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int len, int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipError_t_TO_cudaError",
      "forcePrediction": false
    },
    "cudaDeviceGetDefaultMemPool": {
      "cuda": "cudaDeviceGetDefaultMemPool",
      "hip": "hipDeviceGetDefaultMemPool",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetDefaultMemPool",
        "args": "  cudaMemPool_t* memPool, int  device ",
        "types": [
          "cudaMemPool_tundefined",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetDefaultMemPool"
        ],
        "argsstring": [
          "(hipMemPool_t *mem_pool, int device)"
        ],
        "name": [
          "hipDeviceGetDefaultMemPool"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns the default memory pool of the specified device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Default memory pool to return "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Device index for query the default memory pool"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipDeviceGetDefaultMemPool",
                            "$": {
                              "refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1867",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1867",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetDefaultMemPool (  cudaMemPool_t* memPool, int  device )",
      "hipLine": "hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)",
      "graft": "// cudaError_t cudaDeviceGetDefaultMemPool (  cudaMemPool_t* memPool, int  device ) using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetDefaultMemPool (  cudaMemPool_t* memPool, int  device ) using hipError_t hipDeviceGetDefaultMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\"  cudaError_t cudaDeviceGetDefaultMemPool (  cudaMemPool_t* memPool, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetDefaultMemPool (  (hipMemPool_t*)memPool, device );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetDefaultMemPool (  cudaMemPool_t memPool ) using hipError_t hipDeviceSetDefaultMemPool (hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaDeviceSetDefaultMemPool (  cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetDefaultMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetDefaultMemPool (  cudaMemPool_t_TO_hipMemPool_t(memPool) );\n\n    return hipError_t_TO_cudaError_t(hip",
      "forcePrediction": false
    },
    "cudaDeviceGetMemPool": {
      "cuda": "cudaDeviceGetMemPool",
      "hip": "hipDeviceGetMemPool",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetMemPool",
        "args": "  cudaMemPool_t* memPool, int  device ",
        "types": [
          "cudaMemPool_tundefined",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga881dfd032ba869936bca97edb1a12ca9",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetMemPool"
        ],
        "argsstring": [
          "(hipMemPool_t *mem_pool, int device)"
        ],
        "name": [
          "hipDeviceGetMemPool"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets the current memory pool for the specified device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Returns the last pool provided to  for this device or the device's default memory pool if  has never been called. By default the current mempool is the default mempool for a device, otherwise the returned pool must have been set with .",
                "computeroutput": [
                  "hipDeviceSetMemPool",
                  "hipDeviceSetMemPool",
                  "hipDeviceSetMemPool"
                ]
              },
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Current memory pool on the specified device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Device index to query the current memory pool"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipDeviceGetDefaultMemPool",
                            "$": {
                              "refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1909",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1909",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )",
      "hipLine": "hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)",
      "graft": "// cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device ) using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device ) using hipError_t hipDeviceGetMemPool (hipMemPool_t *mem_pool, int device)\nextern \"C\"  cudaError_t cudaDeviceGetMemPool (  cudaMemPool_t* memPool, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (  (hipMemPool_t*)memPool, device );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t  memPool ) using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t  memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetMemPool (  device, cudaMemPool_t_TO_hipMemPool_t(memPool) );\n\n    return hipError_t_TO_",
      "forcePrediction": false
    },
    "cudaDeviceGetP2PAttribute": {
      "cuda": "cudaDeviceGetP2PAttribute",
      "hip": "hipDeviceGetP2PAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetP2PAttribute",
        "args": "  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ",
        "types": [
          "intundefined",
          "cudaDeviceP2PAttr",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___driver_1gaed3b34e394dd0bbdf6a02eafd38b8f15",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetP2PAttribute"
        ],
        "argsstring": [
          "(int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)"
        ],
        "name": [
          "hipDeviceGetP2PAttribute"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "value"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipDeviceP2PAttr",
                    "$": {
                      "refid": "group___global_defs_1ga5582537cfebefc286383a3abeb71f4d1",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "srcDevice"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "dstDevice"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a value for attribute of link between two devices. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the value for the attrubute "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "enum of hipDeviceP2PAttr to query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "srcDevice",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The source device of the link "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dstDevice",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The destination device of the link"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1725",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1725",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "hipDeviceP2PAttr",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetP2PAttribute (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )",
      "hipLine": "hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)",
      "graft": "// cudaError_t cudaDeviceGetP2PAttribute (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) using hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaDeviceP2PAttr to hipDeviceP2PAttr\nhipDeviceP2PAttr cudaDeviceP2PAttr_TO_hipDeviceP2PAttr(cudaDeviceP2PAttr);\n\n// hipDeviceP2PAttr to cudaDeviceP2PAttr\ncudaDeviceP2PAttr hipDeviceP2PAttr_TO_cudaDeviceP2PAttr(hipDeviceP2PAttr);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetP2PAttribute (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice ) using hipError_t hipDeviceGetP2PAttribute (int *value, hipDeviceP2PAttr attr, int srcDevice, int dstDevice)\nextern \"C\"  cudaError_t cudaDeviceGetP2PAttribute (  int* value, cudaDeviceP2PAttr attr, int  srcDevice, int  dstDevice )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetP2PAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetP2PAttribute (value, cudaDeviceP2PAttr_TO_hipDeviceP2PAttr(attr), srcDevice, dstDevice);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags ) using hipError_t hipDeviceEnablePeerAccess (int peerDevice, unsigned int flags)\nextern \"C\" cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipError",
      "forcePrediction": false
    },
    "cudaDeviceGetPCIBusId": {
      "cuda": "cudaDeviceGetPCIBusId",
      "hip": "hipDeviceGetPCIBusId",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetPCIBusId",
        "args": "  char* pciBusId, int  len, int  device ",
        "types": [
          "charundefined",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___driver_1gaaa961c8ec8047903617f4245fa50256a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetPCIBusId"
        ],
        "argsstring": [
          "(char *pciBusId, int len, int device)"
        ],
        "name": [
          "hipDeviceGetPCIBusId"
        ],
        "param": [
          {
            "type": [
              "char *"
            ],
            "declname": [
              "pciBusId"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "len"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a PCI Bus Id string for the device, overloaded to take int device ID. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pciBusId",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The string of PCI Bus Id format for the device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "len",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Maximum length of string "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The device ordinal"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1735",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1735",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "char undefined",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int  len, int  device )",
      "hipLine": "hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)",
      "graft": "// cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int  len, int  device ) using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int  len, int  device ) using hipError_t hipDeviceGetPCIBusId (char *pciBusId, int len, int device)\nextern \"C\"  cudaError_t cudaDeviceGetPCIBusId (  char* pciBusId, int  len, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetPCIBusId call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetPCIBusId (pciBusId, len, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetName (  char* name, int  len, int  device ) using hipError_t hipDeviceGetName (char *name, int len, int device)\nextern \"C\"  cudaError_t cudaDeviceGetName (  char* name, int  len, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetName call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetName (name, len, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGet (",
      "forcePrediction": false
    },
    "cudaDeviceGetStreamPriorityRange": {
      "cuda": "cudaDeviceGetStreamPriorityRange",
      "hip": "hipDeviceGetStreamPriorityRange",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetStreamPriorityRange",
        "args": "  int* leastPriority, int* greatestPriority ",
        "types": [
          "intundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1ga2b0709fb23b273abec8ea223ebb362bc",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetStreamPriorityRange"
        ],
        "argsstring": [
          "(int *leastPriority, int *greatestPriority)"
        ],
        "name": [
          "hipDeviceGetStreamPriorityRange"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "leastPriority"
            ]
          },
          {
            "type": [
              "int *"
            ],
            "declname": [
              "greatestPriority"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns numerical values that correspond to the least and greatest stream priority. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nReturns in *leastPriority and *greatestPriority the numerical values that correspond to the least and greatest stream priority respectively. Stream priorities follow a convention where lower numbers imply greater priorities. The range of meaningful stream priorities is given by [*greatestPriority, *leastPriority]. If the user attempts to create a stream with a priority value that is outside the the meaningful range as specified by this API, the priority is automatically clamped to within the valid range. ",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "leastPriority",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer in which value corresponding to least priority is returned. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "greatestPriority",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer in which value corresponding to greatest priority is returned. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2393",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2393",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetStreamPriorityRange (  int* leastPriority, int* greatestPriority )",
      "hipLine": "hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)",
      "graft": "// cudaError_t cudaDeviceGetStreamPriorityRange (  int* leastPriority, int* greatestPriority ) using hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange (  int* leastPriority, int* greatestPriority ) using hipError_t hipDeviceGetStreamPriorityRange (int *leastPriority, int *greatestPriority)\nextern \"C\"  cudaError_t cudaDeviceGetStreamPriorityRange (  int* leastPriority, int* greatestPriority )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetStreamPriorityRange call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetStreamPriorityRange (leastPriority, greatestPriority);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attr, int device ) using hipError_t hipDeviceGetAttribute (int* value, hipDeviceAttribute_t attr, int device)\nextern \"C\" cudaError_t cudaDeviceGetAttribute ( int* value, cudaDeviceAttr attr, int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetAttribute (value, hipDeviceAttribute_t(attr), device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_",
      "forcePrediction": false
    },
    "cudaDeviceReset": {
      "cuda": "cudaDeviceReset",
      "hip": "hipDeviceReset",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceReset",
        "args": "  void ",
        "types": [
          "void",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga8d57161ae56a8edc46eeda447417bf6c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceReset"
        ],
        "argsstring": [
          "(void)"
        ],
        "name": [
          "hipDeviceReset"
        ],
        "param": [
          {
            "type": [
              "void"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "The state of current device is discarded and updated to a fresh state. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Calling this function deletes all streams created, memory allocated, kernels running, events created. Make sure that no other thread is using the device or streams, memory, kernels, events associated with the current device.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipDeviceSynchronize",
                            "$": {
                              "refid": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1783",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1783",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceReset (  void )",
      "hipLine": "hipError_t hipDeviceReset (void)",
      "graft": "// cudaError_t cudaDeviceReset (  void ) using hipError_t hipDeviceReset (void)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceReset (  void ) using hipError_t hipDeviceReset (void)\nextern \"C\"  cudaError_t cudaDeviceReset (  void )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceReset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceReset();\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSynchronize ( void ) using hipError_t hipDeviceSynchronize (void)\nextern \"C\" cudaError_t cudaDeviceSynchronize ( void )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSynchronize();\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int* device ) using hipError_t hipGetDevice (int* device)\nextern \"C\" cudaError_t cudaGetDevice ( int* device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDevice call\" << std::endl;",
      "forcePrediction": false
    },
    "cudaDeviceSetCacheConfig": {
      "cuda": "cudaDeviceSetCacheConfig",
      "hip": "hipDeviceSetCacheConfig",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceSetCacheConfig",
        "args": "  cudaFuncCache cacheConfig ",
        "types": [
          "cudaFuncCache",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gaada3d30a46ae06f68cf1574f496b86ee",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceSetCacheConfig"
        ],
        "argsstring": [
          "(hipFuncCache_t cacheConfig)"
        ],
        "name": [
          "hipDeviceSetCacheConfig"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipFuncCache_t",
                    "$": {
                      "refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "cacheConfig"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set L1/Shared cache partition. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nNote: AMD devices do not support reconfigurable cache. This API is not implemented on AMD platform. If the function is called, it will return hipErrorNotSupported. ",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "cacheConfig",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Cache configuration"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1935",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1935",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipFuncCache_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceSetCacheConfig (  cudaFuncCache cacheConfig )",
      "hipLine": "hipError_t hipDeviceSetCacheConfig (hipFuncCache_t cacheConfig)",
      "graft": "// cudaError_t cudaDeviceSetCacheConfig (  cudaFuncCache cacheConfig ) using hipError_t hipDeviceSetCacheConfig (hipFuncCache_t cacheConfig)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaFuncCache to hipFuncCache_t\nhipFuncCache_t cudaFuncCache_TO_hipFuncCache_t(cudaFuncCache);\n\n// hipFuncCache_t to cudaFuncCache\ncudaFuncCache hipFuncCache_t_TO_cudaFuncCache(hipFuncCache_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetCacheConfig (  cudaFuncCache cacheConfig ) using hipError_t hipDeviceSetCacheConfig (hipFuncCache_t cacheConfig)\nextern \"C\"  cudaError_t cudaDeviceSetCacheConfig (  cudaFuncCache cacheConfig )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetCacheConfig(cudaFuncCache_TO_hipFuncCache_t(cacheConfig));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetCacheConfig (  cudaFuncCache* cacheConfig ) using hipError_t hipDeviceGetCacheConfig (hipFuncCache_t* cacheConfig)\nextern \"C\"  cudaError_t cudaDeviceGetCacheConfig (  cudaFuncCache* cacheConfig )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetCacheConfig(hipFuncCache_t_TO_cudaFuncCache(cacheConfig));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetLimit (",
      "forcePrediction": false
    },
    "cudaDeviceSetLimit": {
      "cuda": "cudaDeviceSetLimit",
      "hip": "hipDeviceSetLimit",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceSetLimit",
        "args": "  cudaLimit limit, size_t value ",
        "types": [
          "cudaLimit",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gaaa264755a3c1750a12c60aa7807b7fe8",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceSetLimit"
        ],
        "argsstring": [
          "(enum hipLimit_t limit, size_t value)"
        ],
        "name": [
          "hipDeviceSetLimit"
        ],
        "param": [
          {
            "type": [
              {
                "_": "enum ",
                "ref": [
                  {
                    "_": "hipLimit_t",
                    "$": {
                      "refid": "group___global_defs_1ga02ceb1513c852c4dd1ecf3cc459fda70",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "limit"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets resource limits of current device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "As the input enum limit,  sets the limit value of the stack size on the current GPU device, per thread. The limit size can get via hipDeviceGetLimit. The size is in units of 256 dwords, up to the limit (128K - 16).",
                "ref": [
                  {
                    "_": "hipLimitStackSize",
                    "$": {
                      "refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a30214f21a523ab016abc833abde96486",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "_": " sets the limit value of the heap used by the malloc()/free() calls. For limit size, use the  API.",
                "ref": [
                  {
                    "_": "hipLimitMallocHeapSize",
                    "$": {
                      "refid": "group___global_defs_1gga02ceb1513c852c4dd1ecf3cc459fda70a1ec17519ca7e1fa12dde48d3a919d210",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipDeviceGetLimit",
                    "$": {
                      "refid": "group___device_1ga8edc85bb9637d6b1eda0d064d141a255",
                      "kindref": "member"
                    }
                  }
                ]
              },
              "Any other input as default, the funtion will return hipErrorUnsupportedLimit.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "limit",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Enum of hipLimit_t to set "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The size of limit value in bytes"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorUnsupportedLimit",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a700ce451a4df4dca02b539df3cd8c03d",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1980",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1980",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipLimit_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceSetLimit (  cudaLimit limit, size_t value )",
      "hipLine": "hipError_t hipDeviceSetLimit (enum hipLimit_t limit, size_t value)",
      "graft": "// cudaError_t cudaDeviceSetLimit (  cudaLimit limit, size_t value ) using hipError_t hipDeviceSetLimit (enum hipLimit_t limit, size_t value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaLimit to hipLimit_t\nhipLimit_t cudaLimit_TO_hipLimit_t(cudaLimit);\n\n// hipLimit_t to cudaLimit\ncudaLimit hipLimit_t_TO_cudaLimit(hipLimit_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetLimit (  cudaLimit limit, size_t value ) using hipError_t hipDeviceSetLimit (enum hipLimit_t limit, size_t value)\nextern \"C\"  cudaError_t cudaDeviceSetLimit (  cudaLimit limit, size_t value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetLimit call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetLimit(cudaLimit_TO_hipLimit_t(limit), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetLimit ( size_t* pValue, cudaLimit limit ) using hipError_t hipDeviceGetLimit (size_t* pValue, enum hipLimit_t limit)\nextern \"C\"  cudaError_t cudaDeviceGetLimit ( size_t* pValue, cudaLimit limit )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetLimit call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetLimit(pValue, cudaLimit_TO_hipLimit_t(limit));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t c",
      "forcePrediction": false
    },
    "cudaDeviceSetMemPool": {
      "cuda": "cudaDeviceSetMemPool",
      "hip": "hipDeviceSetMemPool",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceSetMemPool",
        "args": "  int  device, cudaMemPool_t memPool ",
        "types": [
          "int",
          "cudaMemPool_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceSetMemPool"
        ],
        "argsstring": [
          "(int device, hipMemPool_t mem_pool)"
        ],
        "name": [
          "hipDeviceSetMemPool"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the current memory pool of a device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "The memory pool must be local to the specified device.  allocates from the current mempool of the provided stream's device. By default, a device's current memory pool is its default memory pool.",
                "computeroutput": [
                  "hipMallocAsync"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "Use  for asynchronous memory allocations from a device different than the one the stream runs on.",
                        "computeroutput": [
                          "hipMallocFromPoolAsync"
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipDeviceGetDefaultMemPool",
                            "$": {
                              "refid": "group___device_1ga16d31ff3398a0c76ea5148563406412a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Device index for the update "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool for update as the current on the specified device"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1889",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1889",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipMemPool_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool )",
      "hipLine": "hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)",
      "graft": "// cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool ) using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool ) using hipError_t hipDeviceSetMemPool (int device, hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaDeviceSetMemPool (  int  device, cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetMemPool (device, cudaMemPool_t_TO_hipMemPool_t(memPool));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetMemPool (  int  device, cudaMemPool_t* memPool ) using hipError_t hipDeviceGetMemPool (int device, hipMemPool_t* mem_pool)\nextern \"C\"  cudaError_t cudaDeviceGetMemPool (  int  device, cudaMemPool_t* memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetMemPool call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetMemPool (device, hipMemPool_t_TO_cudaMemPool_t(memPool));\n\n    return hipError",
      "forcePrediction": false
    },
    "cudaDeviceSetSharedMemConfig": {
      "cuda": "cudaDeviceSetSharedMemConfig",
      "hip": "hipDeviceSetSharedMemConfig",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceSetSharedMemConfig",
        "args": "  cudaSharedMemConfig config ",
        "types": [
          "cudaSharedMemConfig",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga9b1f279084e76691cedfbfadf9c717ee",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceSetSharedMemConfig"
        ],
        "argsstring": [
          "(hipSharedMemConfig config)"
        ],
        "name": [
          "hipDeviceSetSharedMemConfig"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipSharedMemConfig",
                    "$": {
                      "refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "config"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "The bank width of shared memory on current device is set. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "config",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Configuration for the bank width of shared memory"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2012",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2012",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipSharedMemConfig",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceSetSharedMemConfig (  cudaSharedMemConfig config )",
      "hipLine": "hipError_t hipDeviceSetSharedMemConfig (hipSharedMemConfig config)",
      "graft": "// cudaError_t cudaDeviceSetSharedMemConfig (  cudaSharedMemConfig config ) using hipError_t hipDeviceSetSharedMemConfig (hipSharedMemConfig config)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaSharedMemConfig to hipSharedMemConfig\nhipSharedMemConfig cudaSharedMemConfig_TO_hipSharedMemConfig(cudaSharedMemConfig);\n\n// hipSharedMemConfig to cudaSharedMemConfig\ncudaSharedMemConfig hipSharedMemConfig_TO_cudaSharedMemConfig(hipSharedMemConfig);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetSharedMemConfig (  cudaSharedMemConfig config ) using hipError_t hipDeviceSetSharedMemConfig (hipSharedMemConfig config)\nextern \"C\"  cudaError_t cudaDeviceSetSharedMemConfig (  cudaSharedMemConfig config )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetSharedMemConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetSharedMemConfig(cudaSharedMemConfig_TO_hipSharedMemConfig(config));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetSharedMemConfig (  cudaSharedMemConfig* pConfig ) using hipError_t hipDeviceGetSharedMemConfig (hipSharedMemConfig* pConfig)\nextern \"C\"  cudaError_t cudaDeviceGetSharedMemConfig (  cudaSharedMemConfig* pConfig )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetSharedMemConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetSharedMemConfig(pConfig);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetSharedMemConfig (  cuda",
      "forcePrediction": false
    },
    "cudaGetDeviceFlags": {
      "cuda": "cudaGetDeviceFlags",
      "hip": "hipGetDeviceFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetDeviceFlags",
        "args": "  unsigned int* flags ",
        "types": [
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga1270f7281bb46cf3e077944e6f233d53",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetDeviceFlags"
        ],
        "argsstring": [
          "(unsigned int *flags)"
        ],
        "name": [
          "hipGetDeviceFlags"
        ],
        "param": [
          {
            "type": [
              "unsigned int *"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets the flags set for current device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the flags"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2000",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2000",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "unsigned int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetDeviceFlags (  unsigned int* flags )",
      "hipLine": "hipError_t hipGetDeviceFlags (unsigned int *flags)",
      "graft": "// cudaError_t cudaGetDeviceFlags (  unsigned int* flags ) using hipError_t hipGetDeviceFlags (unsigned int *flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceFlags (  unsigned int* flags ) using hipError_t hipGetDeviceFlags (unsigned int *flags)\nextern \"C\" ",
      "forcePrediction": false
    },
    "cudaGetDeviceProperties": {
      "cuda": "cudaGetDeviceProperties",
      "hip": "hipGetDeviceProperties",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetDeviceProperties",
        "args": "  cudaDeviceProp* prop, int  device ",
        "types": [
          "cudaDevicePropundefined",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga32208513b7cd491f0cb5fc884053f790",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetDeviceProperties"
        ],
        "argsstring": [
          "(hipDeviceProp_t *prop, int deviceId)"
        ],
        "name": [
          "hipGetDeviceProperties"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipDeviceProp_t",
                    "$": {
                      "refid": "structhip_device_prop__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "prop"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "deviceId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns device properties. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "prop",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "written with device properties "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "deviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "which device to query for information"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "xrefsect": [
                  {
                    "$": {
                      "id": "bug_1_bug000001"
                    },
                    "xreftitle": [
                      "Bug"
                    ],
                    "xrefdescription": [
                      {
                        "para": [
                          "HCC always returns 0 for maxThreadsPerMultiProcessor ",
                          "HCC always returns 0 for regsPerBlock ",
                          "HCC always returns 0 for l2CacheSize"
                        ]
                      }
                    ]
                  }
                ]
              },
              "Populates hipGetDeviceProperties with information for the specified device. "
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1923",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1923",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipDeviceProp_t",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device )",
      "hipLine": "hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int deviceId)",
      "graft": "// cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int deviceId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipDeviceProp_t to cudaDeviceProp\ncudaDeviceProp hipDeviceProp_t_TO_cudaDeviceProp(hipDeviceProp_t);\n\n// cudaDeviceProp to hipDeviceProp_t\nhipDeviceProp_t cudaDeviceProp_TO_hipDeviceProp_t(cudaDeviceProp);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t *prop, int deviceId)\nextern \"C\"  cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties( (hipDeviceProp_t*)prop, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int* device ) using hipError_t hipGetDevice (int* deviceId)\nextern \"C\" cudaError_t cudaGetDevice ( int* device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDevice(device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDevice ( int  device ) using hipError_t hipSetDevice (int deviceId)\nextern \"C\" cudaError_t cudaSetDevice ( int  device )\n{\n    if(VER",
      "forcePrediction": false
    },
    "cudaIpcCloseMemHandle": {
      "cuda": "cudaIpcCloseMemHandle",
      "hip": "hipIpcCloseMemHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaIpcCloseMemHandle",
        "args": "  void* devPtr ",
        "types": [
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gac2db0688a6a471e17ca631977e199da7",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipIpcCloseMemHandle"
        ],
        "argsstring": [
          "(void *devPtr)"
        ],
        "name": [
          "hipIpcCloseMemHandle"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "devPtr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Close memory mapped with hipIpcOpenMemHandle. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Unmaps memory returnd by hipIpcOpenMemHandle. The original allocation in the exporting process as well as imported mappings in other processes will be unaffected.",
              "Any resources used to enable peer access will be freed if this is the last mapping using them.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "devPtr"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device pointer returned by hipIpcOpenMemHandle"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMapFailed",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This IPC memory related feature API on Windows may behave differently from Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2138",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2138",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaIpcCloseMemHandle (  void* devPtr )",
      "hipLine": "hipError_t hipIpcCloseMemHandle (void *devPtr)",
      "graft": "// cudaError_t cudaIpcCloseMemHandle (  void* devPtr ) using hipError_t hipIpcCloseMemHandle (void *devPtr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcCloseMemHandle (  void* devPtr ) using hipError_t hipIpcCloseMemHandle (void *devPtr)\nextern \"C\"  cudaError_t cudaIpcCloseMemHandle (  void* devPtr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcCloseMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcCloseMemHandle(devPtr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event ) using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t* handle, hipEvent_t event)\nextern \"C\"  cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetEventHandle(handle, event);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError",
      "forcePrediction": false
    },
    "cudaIpcGetEventHandle": {
      "cuda": "cudaIpcGetEventHandle",
      "hip": "hipIpcGetEventHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaIpcGetEventHandle",
        "args": "  cudaIpcEventHandle_t* handle, cudaEvent_t event ",
        "types": [
          "cudaIpcEventHandle_tundefined",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga16b63a461a72d22dbcbbdbdff548adba",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipIpcGetEventHandle"
        ],
        "argsstring": [
          "(hipIpcEventHandle_t *handle, hipEvent_t event)"
        ],
        "name": [
          "hipIpcGetEventHandle"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipIpcEventHandle_t",
                    "$": {
                      "refid": "structhip_ipc_event_handle__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets an opaque interprocess handle for an event. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "This opaque handle may be copied into other processes and opened with hipIpcOpenEventHandle. Then hipEventRecord, hipEventSynchronize, hipStreamWaitEvent and hipEventQuery may be used in either process. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "handle",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to hipIpcEventHandle to return the opaque event handle "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Event allocated with hipEventInterprocess and hipEventDisableTiming flags"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidConfiguration",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad2e6cccb1d5fb3027a24cd2f4235fe5b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This IPC event related feature API is currently applicable on Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2156",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2156",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipIpcEventHandle_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event )",
      "hipLine": "hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t *handle, hipEvent_t event)",
      "graft": "// cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event ) using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t *handle, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipIpcEventHandle_t to cudaIpcEventHandle_t\ncudaIpcEventHandle_t hipIpcEventHandle_t_TO_cudaIpcEventHandle_t(hipIpcEventHandle_t);\n\n// cudaIpcEventHandle_t to hipIpcEventHandle_t\nhipIpcEventHandle_t cudaIpcEventHandle_t_TO_hipIpcEventHandle_t(cudaIpcEventHandle_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event ) using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t *handle, hipEvent_t event)\nextern \"C\"  cudaError_t cudaIpcGetEventHandle (  cudaIpcEventHandle_t* handle, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetEventHandle (handle, hipEvent_t_TO_cudaEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcOpenEventHandle ( cudaEvent_t* event, cudaIpcEventHandle_t handle ) using hipError_t hipIpcOpenEventHandle (hipEvent_t* event, hipIpcEventHandle_t handle)\nextern \"C\"  cudaError_t cudaIpcOpenEventHandle ( cudaEvent_t* event, cudaIpcEventHandle_t handle )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenEventHandle (event, hipIpcEventHandle",
      "forcePrediction": false
    },
    "cudaIpcGetMemHandle": {
      "cuda": "cudaIpcGetMemHandle",
      "hip": "hipIpcGetMemHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaIpcGetMemHandle",
        "args": "  cudaIpcMemHandle_t* handle, void* devPtr ",
        "types": [
          "cudaIpcMemHandle_tundefined",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gafd8c80f7e3b6426a630fff768409be70",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipIpcGetMemHandle"
        ],
        "argsstring": [
          "(hipIpcMemHandle_t *handle, void *devPtr)"
        ],
        "name": [
          "hipIpcGetMemHandle"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipIpcMemHandle_t",
                    "$": {
                      "refid": "structhip_ipc_mem_handle__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "devPtr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets an interprocess memory handle for an existing device memory allocation. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Takes a pointer to the base of an existing device memory allocation created with hipMalloc and exports it for use in another process. This is a lightweight operation and may be called multiple times on an allocation without adverse effects.",
              "If a region of memory is freed with hipFree and a subsequent call to hipMalloc returns memory with the same device address, hipIpcGetMemHandle will return a unique handle for the new memory.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "handle"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to user allocated hipIpcMemHandle to return the handle in. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "devPtr"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Base pointer to previously allocated device memory"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMapFailed",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ac17907adccb71e0ffdbfdbf793980a3d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This IPC memory related feature API on Windows may behave differently from Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2084",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2084",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipIpcMemHandle_t",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaIpcGetMemHandle (  cudaIpcMemHandle_t* handle, void* devPtr )",
      "hipLine": "hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t *handle, void *devPtr)",
      "graft": "// cudaError_t cudaIpcGetMemHandle (  cudaIpcMemHandle_t* handle, void* devPtr ) using hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t *handle, void *devPtr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipIpcMemHandle_t to cudaIpcMemHandle_t\ncudaIpcMemHandle_t hipIpcMemHandle_t_TO_cudaIpcMemHandle_t(hipIpcMemHandle_t);\n\n// cudaIpcMemHandle_t to hipIpcMemHandle_t\nhipIpcMemHandle_t cudaIpcMemHandle_t_TO_hipIpcMemHandle_t(cudaIpcMemHandle_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcGetMemHandle (  cudaIpcMemHandle_t* handle, void* devPtr ) using hipError_t hipIpcGetMemHandle (hipIpcMemHandle_t *handle, void *devPtr)\nextern \"C\"  cudaError_t cudaIpcGetMemHandle (  cudaIpcMemHandle_t* handle, void* devPtr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetMemHandle (handle, devPtr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags ) using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\"  cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenMemHandle (devPtr, cudaIpcMemHandle_t_TO_hip",
      "forcePrediction": false
    },
    "cudaIpcOpenEventHandle": {
      "cuda": "cudaIpcOpenEventHandle",
      "hip": "hipIpcOpenEventHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaIpcOpenEventHandle",
        "args": "  cudaEvent_t* event, cudaIpcEventHandle_t handle ",
        "types": [
          "cudaEvent_tundefined",
          "cudaIpcEventHandle_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1gae73ef28488c43e5343fdf02178c25a5d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipIpcOpenEventHandle"
        ],
        "argsstring": [
          "(hipEvent_t *event, hipIpcEventHandle_t handle)"
        ],
        "name": [
          "hipIpcOpenEventHandle"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipIpcEventHandle_t",
                    "$": {
                      "refid": "structhip_ipc_event_handle__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Opens an interprocess event handles. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Opens an interprocess event handle exported from another process with cudaIpcGetEventHandle. The returned hipEvent_t behaves like a locally created event with the hipEventDisableTiming flag specified. This event need be freed with hipEventDestroy. Operations on the imported event after the exported event has been freed with hipEventDestroy will result in undefined behavior. If the function is called within the same process where handle is returned by hipIpcGetEventHandle, it will return hipErrorInvalidContext.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to hipEvent_t to return the event "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "handle",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The opaque interprocess handle to open"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidContext",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This IPC event related feature API is currently applicable on Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2175",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2175",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipEvent_t",
          "hipIpcEventHandle_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaIpcOpenEventHandle (  cudaEvent_t* event, cudaIpcEventHandle_t handle )",
      "hipLine": "hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)",
      "graft": "// cudaError_t cudaIpcOpenEventHandle (  cudaEvent_t* event, cudaIpcEventHandle_t handle ) using hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaIpcEventHandle_t to hipIpcEventHandle_t\nhipIpcEventHandle_t cudaIpcEventHandle_t_TO_hipIpcEventHandle_t(cudaIpcEventHandle_t);\n\n// hipIpcEventHandle_t to cudaIpcEventHandle_t\ncudaIpcEventHandle_t hipIpcEventHandle_t_TO_cudaIpcEventHandle_t(hipIpcEventHandle_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcOpenEventHandle (  cudaEvent_t* event, cudaIpcEventHandle_t handle ) using hipError_t hipIpcOpenEventHandle (hipEvent_t *event, hipIpcEventHandle_t handle)\nextern \"C\"  cudaError_t cudaIpcOpenEventHandle (  cudaEvent_t* event, cudaIpcEventHandle_t handle )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenEventHandle (event, hipIpcEventHandle_t_TO_cudaIpcEventHandle_t(handle));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcGetEventHandle ( cudaIpcEventHandle_t* handle, cudaEvent_t event ) using hipError_t hipIpcGetEventHandle (hipIpcEventHandle_t* handle, hipEvent_t event)\nextern \"C\"  cudaError_t cudaIpcGetEventHandle ( cudaIpcEventHandle_t* handle, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcGetEventHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcGetEventHandle (handle",
      "forcePrediction": false
    },
    "cudaIpcOpenMemHandle": {
      "cuda": "cudaIpcOpenMemHandle",
      "hip": "hipIpcOpenMemHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaIpcOpenMemHandle",
        "args": "  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags ",
        "types": [
          "voidundefined*",
          "cudaIpcMemHandle_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga2ada334c986e10805d58167e260cb0df",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipIpcOpenMemHandle"
        ],
        "argsstring": [
          "(void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)"
        ],
        "name": [
          "hipIpcOpenMemHandle"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "devPtr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipIpcMemHandle_t",
                    "$": {
                      "refid": "structhip_ipc_mem_handle__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Opens an interprocess memory handle exported from another process and returns a device pointer usable in the local process. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Maps memory exported from another process with hipIpcGetMemHandle into the current device address space. For contexts on different devices hipIpcOpenMemHandle can attempt to enable peer access between the devices as if the user called hipDeviceEnablePeerAccess. This behavior is controlled by the hipIpcMemLazyEnablePeerAccess flag. hipDeviceCanAccessPeer can determine if a mapping is possible.",
              "Contexts that may open hipIpcMemHandles are restricted in the following way. hipIpcMemHandles from each device in a given process may only be opened by one context per device per other process.",
              "Memory returned from hipIpcOpenMemHandle must be freed with hipIpcCloseMemHandle.",
              "Calling hipFree on an exported memory region before calling hipIpcCloseMemHandle in the importing context will result in undefined behavior.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "devPtr"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returned device pointer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "handle"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- hipIpcMemHandle to open "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              "flags"
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Flags for this operation. Must be specified as hipIpcMemLazyEnablePeerAccess"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidContext",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "During multiple processes, using the same memory handle opened by the current context, there is no guarantee that the same device poiter will be returned in . This is diffrent from CUDA. ",
                        "computeroutput": [
                          "*devPtr"
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This IPC memory related feature API on Windows may behave differently from Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2120",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2120",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "hipIpcMemHandle_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags )",
      "hipLine": "hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)",
      "graft": "// cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags ) using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaIpcMemHandle_t to hipIpcMemHandle_t\nhipIpcMemHandle_t cudaIpcMemHandle_t_TO_hipIpcMemHandle_t(cudaIpcMemHandle_t);\n\n// hipIpcMemHandle_t to cudaIpcMemHandle_t\ncudaIpcMemHandle_t hipIpcMemHandle_t_TO_cudaIpcMemHandle_t(hipIpcMemHandle_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags ) using hipError_t hipIpcOpenMemHandle (void **devPtr, hipIpcMemHandle_t handle, unsigned int flags)\nextern \"C\"  cudaError_t cudaIpcOpenMemHandle (  void** devPtr, cudaIpcMemHandle_t handle, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcOpenMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcOpenMemHandle(devPtr, hipIpcMemHandle_t_TO_cudaIpcMemHandle_t(handle), flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaIpcCloseMemHandle (  void* devPtr ) using hipError_t hipIpcCloseMemHandle (void *devPtr)\nextern \"C\"  cudaError_t cudaIpcCloseMemHandle (  void* devPtr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaIpcCloseMemHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipIpcCloseMemHandle(devPtr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError",
      "forcePrediction": false
    },
    "cudaSetDevice": {
      "cuda": "cudaSetDevice",
      "hip": "hipSetDevice",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaSetDevice",
        "args": "  int  device ",
        "types": [
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga43c1e7f15925eeb762195ccb5e063eae",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipSetDevice"
        ],
        "argsstring": [
          "(int deviceId)"
        ],
        "name": [
          "hipSetDevice"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "deviceId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set default device to be used for subsequent hip API calls from this thread. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nSets  as the default device for the calling host thread. Valid device id's are 0... (-1).",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "deviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              {
                                "_": "Valid device in range 0....",
                                "ref": [
                                  {
                                    "_": "hipGetDeviceCount()",
                                    "$": {
                                      "refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
                                      "kindref": "member"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "computeroutput": [
                  "device"
                ],
                "ref": [
                  {
                    "_": "hipGetDeviceCount()",
                    "$": {
                      "refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
                      "kindref": "member"
                    }
                  }
                ]
              },
              "Many HIP APIs implicitly use the \"default device\" :",
              {
                "itemizedlist": [
                  {
                    "listitem": [
                      {
                        "para": [
                          "Any device memory subsequently allocated from this host thread (using hipMalloc) will be allocated on device."
                        ]
                      },
                      {
                        "para": [
                          "Any streams or events created from this host thread will be associated with device."
                        ]
                      },
                      {
                        "para": [
                          "Any kernels launched from this host thread (using hipLaunchKernel) will be executed on device (unless a specific stream is specified, in which case the device associated with that stream will be used)."
                        ]
                      }
                    ]
                  }
                ]
              },
              "This function may be called from any host thread. Multiple host threads may use the same device. This function does no synchronization with the previous or new device, and has very little runtime overhead. Applications can use hipSetDevice to quickly switch the default device before making a HIP runtime call which uses the default device.",
              "The default device is stored in thread-local-storage for each thread. Thread-pool implementations may inherit the default device of the previous thread. A good practice is to always call hipSetDevice at the start of HIP coding sequency to establish a known standard device.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNoDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1abaff13a1ce1dd40f0578115c56d9dc8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipGetDevice",
                            "$": {
                              "refid": "group___device_1ga7e0e2e8c5f78e3c7449764657c254e0a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipGetDeviceCount",
                            "$": {
                              "refid": "group___device_1ga8555d5c76d88c50ddbf54ae70b568394",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1815",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1815",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaSetDevice (  int  device )",
      "hipLine": "hipError_t hipSetDevice (int deviceId)",
      "graft": "// cudaError_t cudaSetDevice (  int  device ) using hipError_t hipSetDevice (int deviceId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDevice (  int  device ) using hipError_t hipSetDevice (int deviceId)\nextern \"C\"  cudaError_t cudaSetDevice (  int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice(device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice (  int*  device ) using hipError_t hipGetDevice (int* deviceId)\nextern \"C\"  cudaError_t cudaGetDevice (  int*  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDevice(device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties (  struct cudaDeviceProp*  prop,  int  device ) using hipError_t hipGetDeviceProperties (struct hipDeviceProp_t* prop, int deviceId)\nextern \"C\"  cudaError_t cudaGetDeviceProperties ( ",
      "forcePrediction": false
    },
    "cudaSetDeviceFlags": {
      "cuda": "cudaSetDeviceFlags",
      "hip": "hipSetDeviceFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaSetDeviceFlags",
        "args": "  unsigned int  flags ",
        "types": [
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___device_1ga6e54db382768827e84725632018307aa",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipSetDeviceFlags"
        ],
        "argsstring": [
          "(unsigned flags)"
        ],
        "name": [
          "hipSetDeviceFlags"
        ],
        "param": [
          {
            "type": [
              "unsigned"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "The current device behavior is changed according the flags passed. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nThe schedule flags impact how HIP waits for the completion of a command running on a device. hipDeviceScheduleSpin : HIP runtime will actively spin in the thread which submitted the work until the command completes. This offers the lowest latency, but will consume a CPU core and may increase power. hipDeviceScheduleYield : The HIP runtime will yield the CPU to system so that other tasks can use it. This may increase latency to detect the completion but will consume less power and is friendlier to other tasks in the system. hipDeviceScheduleBlockingSync : On ROCm platform, this is a synonym for hipDeviceScheduleYield. hipDeviceScheduleAuto : Use a hueristic to select between Spin and Yield modes. If the number of HIP contexts is greater than the number of logical processors in the system, use Spin scheduling. Else use Yield scheduling.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Flag to set on the current device"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "_": "hipDeviceMapHost : Allow mapping host memory. On ROCM, this is always allowed and the flag is ignored. hipDeviceLmemResizeToMax : \n\n",
                "simplesect": [
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      "ROCm silently ignores this flag."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorSetOnActiveProcess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a67cb78915676025c488014407580c212",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2037",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2037",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "unsigned",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaSetDeviceFlags (  unsigned int  flags )",
      "hipLine": "hipError_t hipSetDeviceFlags (unsigned flags)",
      "graft": "// cudaError_t cudaSetDeviceFlags (  unsigned int  flags ) using hipError_t hipSetDeviceFlags (unsigned flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDeviceFlags (  unsigned int  flags ) using hipError_t hipSetDeviceFlags (unsigned flags)\nextern \"C\"  cudaError_t cudaSetDeviceFlags (  unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDeviceFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDeviceFlags(flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDevice (  int  device ) using hipError_t hipSetDevice (int device)\nextern \"C\"  cudaError_t cudaSetDevice (  int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice(device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice (  int*  device ) using hipError_t hipGetDevice (int* device)\nextern \"C\"  cudaError_t cudaGetDevice (  int*  device )\n{\n    if(VERBOSE) std::cout << \"Inter",
      "forcePrediction": false
    },
    "cudaStreamAddCallback": {
      "cuda": "cudaStreamAddCallback",
      "hip": "hipStreamAddCallback",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamAddCallback",
        "args": "  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags ",
        "types": [
          "cudaStream_t",
          "cudaStreamCallback_t",
          "voidundefined",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1ga3e098cd7478828b2104abb41a7bb00d3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamAddCallback"
        ],
        "argsstring": [
          "(hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)"
        ],
        "name": [
          "hipStreamAddCallback"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStreamCallback_t",
                    "$": {
                      "refid": "group___stream_1ga6d4e90ec5736f9728102be22d0559dfd",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "callback"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "userData"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Adds a callback to be called on the host after all currently enqueued items in the stream have completed. For each hipStreamAddCallback call, a callback will be executed exactly once. The callback will block later work in the stream until it is finished. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream to add callback to "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "callback",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The function to call once preceding stream operations are complete "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "userData",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- User specified data to be passed to the callback function "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Reserved for future use, must be 0 "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , ,  ",
                        "ref": [
                          {
                            "_": "hipStreamCreate",
                            "$": {
                              "refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamQuery",
                            "$": {
                              "refid": "group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamSynchronize",
                            "$": {
                              "refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamWaitEvent",
                            "$": {
                              "refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamDestroy",
                            "$": {
                              "refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithPriority",
                            "$": {
                              "refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2560",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2560",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipStreamCallback_t",
          "void undefined",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamAddCallback (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags )",
      "hipLine": "hipError_t hipStreamAddCallback (hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)",
      "graft": "// cudaError_t cudaStreamAddCallback (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags ) using hipError_t hipStreamAddCallback (hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStreamCallback_t to hipStreamCallback_t\nhipStreamCallback_t cudaStreamCallback_t_TO_hipStreamCallback_t(cudaStreamCallback_t);\n\n// hipStreamCallback_t to cudaStreamCallback_t\ncudaStreamCallback_t hipStreamCallback_t_TO_cudaStreamCallback_t(hipStreamCallback_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamAddCallback (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags ) using hipError_t hipStreamAddCallback (hipStream_t stream, hipStreamCallback_t callback, void *userData, unsigned int flags)\nextern \"C\"  cudaError_t cudaStreamAddCallback (  cudaStream_t stream, cudaStreamCallback_t callback, void* userData, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamAddCallback call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamAddCallback(cudaStream_t_TO_hipStream_t(stream), cudaStreamCallback_t_TO_hipStreamCallback_t(callback), userData, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreate ( cudaStream_t* pStream ) using hipError_t hipStreamCreate ( hipStream_t* pStream )\nextern \"C\" cudaError_t cudaStreamCreate ( cudaStream_t* pStream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreate(pStream);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n//",
      "forcePrediction": false
    },
    "cudaStreamAttachMemAsync": {
      "cuda": "cudaStreamAttachMemAsync",
      "hip": "hipStreamAttachMemAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamAttachMemAsync",
        "args": "  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle ",
        "types": [
          "cudaStream_t",
          "Tundefined",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1gabd2ab38956e78d8a5d5a0320f5ef5027",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamAttachMemAsync"
        ],
        "argsstring": [
          "(hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)"
        ],
        "name": [
          "hipStreamAttachMemAsync"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "length"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Attach memory to a stream asynchronously in HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- stream in which to enqueue the attach operation "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory (must be a pointer to managed memory or to a valid host-accessible region of system-allocated memory) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "length",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- length of memory (defaults to zero) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- must be one of hipMemAttachGlobal, hipMemAttachHost or hipMemAttachSingle (defaults to hipMemAttachSingle)"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3275",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3275",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "void undefined",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamAttachMemAsync (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle )",
      "hipLine": "hipError_t hipStreamAttachMemAsync (hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)",
      "graft": "// cudaError_t cudaStreamAttachMemAsync (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle ) using hipError_t hipStreamAttachMemAsync (hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamAttachMemAsync (  cudaStream_t stream, T* devPtr, size_t length = 0, unsigned int  flags = cudaMemAttachSingle ) using hipError_t hipStreamAttachMemAsync (hipStream_t stream, void *dev_ptr, size_t length, unsigned int flags)\nextern \"C\"  cudaError_t cudaStreamAttachMemAsync (  cudaStream_t stream, void *devPtr, size_t length, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamAttachMemAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamAttachMemAsync ( hipStream_t_TO_cudaStream_t(stream), devPtr, length, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags ( hipStream_t* pStream, unsigned int flags )\nextern \"C\" cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithFlags ( pStream, flags );\n\n    return hipError_t_TO_cuda",
      "forcePrediction": false
    },
    "cudaStreamBeginCapture": {
      "cuda": "cudaStreamBeginCapture",
      "hip": "hipStreamBeginCapture",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamBeginCapture",
        "args": "  cudaStream_t stream, cudaStreamCaptureMode mode ",
        "types": [
          "cudaStream_t",
          "cudaStreamCaptureMode",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga826596fabd1d7657721cc3abfb476b10",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamBeginCapture"
        ],
        "argsstring": [
          "(hipStream_t stream, hipStreamCaptureMode mode)"
        ],
        "name": [
          "hipStreamBeginCapture"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStreamCaptureMode",
                    "$": {
                      "refid": "group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mode"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Begins graph capture on a stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream to initiate capture. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Controls the interaction of this capture sequence with other API calls that are not safe."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6638",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6638",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipStreamCaptureMode",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode )",
      "hipLine": "hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)",
      "graft": "// cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode ) using hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStreamCaptureMode to hipStreamCaptureMode\nhipStreamCaptureMode cudaStreamCaptureMode_TO_hipStreamCaptureMode(cudaStreamCaptureMode);\n\n// hipStreamCaptureMode to cudaStreamCaptureMode\ncudaStreamCaptureMode hipStreamCaptureMode_TO_cudaStreamCaptureMode(hipStreamCaptureMode);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode ) using hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)\nextern \"C\"  cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamBeginCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamBeginCapture(cudaStream_t_TO_hipStream_t(stream), cudaStreamCaptureMode_TO_hipStreamCaptureMode(mode));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph ) using hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t* pGraph)\nextern \"C\"  cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamEndCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamEndCapture(cudaStream_t_TO",
      "forcePrediction": false
    },
    "cudaStreamCreate": {
      "cuda": "cudaStreamCreate",
      "hip": "hipStreamCreate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamCreate",
        "args": "  cudaStream_t* pStream ",
        "types": [
          "cudaStream_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamCreate"
        ],
        "argsstring": [
          "(hipStream_t *stream)"
        ],
        "name": [
          "hipStreamCreate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Create an asynchronous stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nCreate a new asynchronous stream.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Valid pointer to hipStream_t. This function writes the memory with the newly created stream. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "computeroutput": [
                  "stream"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , ,  ",
                        "ref": [
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithPriority",
                            "$": {
                              "refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamSynchronize",
                            "$": {
                              "refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamWaitEvent",
                            "$": {
                              "refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamDestroy",
                            "$": {
                              "refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2343",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2343",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamCreate (  cudaStream_t* pStream )",
      "hipLine": "hipError_t hipStreamCreate (hipStream_t *stream)",
      "graft": "// cudaError_t cudaStreamCreate (  cudaStream_t* pStream ) using hipError_t hipStreamCreate (hipStream_t *stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreate (  cudaStream_t* pStream ) using hipError_t hipStreamCreate (hipStream_t *stream)\nextern \"C\"  cudaError_t cudaStreamCreate (  cudaStream_t* pStream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreate(pStream);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamDestroy (  cudaStream_t stream ) using hipError_t hipStreamDestroy (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStreamDestroy (  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamDestroy(stream);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize (  cudaStream_t stream ) using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStream",
      "forcePrediction": false
    },
    "cudaStreamCreateWithPriority": {
      "cuda": "cudaStreamCreateWithPriority",
      "hip": "hipStreamCreateWithPriority",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamCreateWithPriority",
        "args": "  cudaStream_t* pStream, unsigned int  flags, int  priority ",
        "types": [
          "cudaStream_tundefined",
          "unsigned",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamCreateWithPriority"
        ],
        "argsstring": [
          "(hipStream_t *stream, unsigned int flags, int priority)"
        ],
        "name": [
          "hipStreamCreateWithPriority"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "priority"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Create an asynchronous stream with the specified priority. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nCreate a new asynchronous stream with the specified priority.  returns an opaque handle that can be used to reference the newly created stream in subsequent hipStream* commands. The stream is allocated on the heap and will remain allocated even if the handle goes out-of-scope. To release the memory used by the stream, applicaiton must call hipStreamDestroy. Flags controls behavior of the stream. See , .",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to new stream "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "to control stream creation. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "priority",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "of the stream. Lower numbers represent higher priorities. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "computeroutput": [
                  "stream"
                ],
                "ref": [
                  {
                    "_": "hipStreamDefault",
                    "$": {
                      "refid": "group___global_defs_1ga6df5f70eb976836ab3598cacf0ffcdf9",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipStreamNonBlocking",
                    "$": {
                      "refid": "group___global_defs_1gaaba9ae995d9b43b7d1ee70c6fa12c57d",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipStreamCreate",
                            "$": {
                              "refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamSynchronize",
                            "$": {
                              "refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamWaitEvent",
                            "$": {
                              "refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamDestroy",
                            "$": {
                              "refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2378",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2378",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "unsigned int",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamCreateWithPriority (  cudaStream_t* pStream, unsigned int  flags, int  priority )",
      "hipLine": "hipError_t hipStreamCreateWithPriority (hipStream_t *stream, unsigned int flags, int priority)",
      "graft": "// cudaError_t cudaStreamCreateWithPriority (  cudaStream_t* pStream, unsigned int  flags, int  priority ) using hipError_t hipStreamCreateWithPriority (hipStream_t *stream, unsigned int flags, int priority)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithPriority (  cudaStream_t* pStream, unsigned int  flags, int  priority ) using hipError_t hipStreamCreateWithPriority (hipStream_t *stream, unsigned int flags, int priority)\nextern \"C\"  cudaError_t cudaStreamCreateWithPriority (  cudaStream_t* pStream, unsigned int  flags, int  priority )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithPriority (pStream, flags, priority);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreate (  cudaStream_t* pStream ) using hipError_t hipStreamCreate (hipStream_t *stream)\nextern \"C\"  cudaError_t cudaStreamCreate (  cudaStream_t* pStream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreate (pStream);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamDestroy (  cudaStream_t stream ) using hipError_t hipStreamDestroy (",
      "forcePrediction": false
    },
    "cudaStreamEndCapture": {
      "cuda": "cudaStreamEndCapture",
      "hip": "hipStreamEndCapture",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamEndCapture",
        "args": "  cudaStream_t stream, cudaGraph_t* pGraph ",
        "types": [
          "cudaStream_t",
          "cudaGraph_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga83fc036ee874fbfe066c0fe4fce816b3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamEndCapture"
        ],
        "argsstring": [
          "(hipStream_t stream, hipGraph_t *pGraph)"
        ],
        "name": [
          "hipStreamEndCapture"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Ends capture on a stream, returning the captured graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream to end capture. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraph",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns the graph captured."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6652",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6652",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph )",
      "hipLine": "hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t *pGraph)",
      "graft": "// cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph ) using hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t *pGraph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph ) using hipError_t hipStreamEndCapture (hipStream_t stream, hipGraph_t *pGraph)\nextern \"C\"  cudaError_t cudaStreamEndCapture (  cudaStream_t stream, cudaGraph_t* pGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamEndCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamEndCapture(cudaStream_t_TO_hipStream_t(stream), (hipGraph_t*)pGraph);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode ) using hipError_t hipStreamBeginCapture (hipStream_t stream, hipStreamCaptureMode mode)\nextern \"C\"  cudaError_t cudaStreamBeginCapture (  cudaStream_t stream, cudaStreamCaptureMode mode )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamBeginCapture call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamBeginCapture(cudaStream_t_TO_hipStream_t(stream), mode);",
      "forcePrediction": false
    },
    "cudaStreamGetCaptureInfo": {
      "cuda": "cudaStreamGetCaptureInfo",
      "hip": "hipStreamGetCaptureInfo",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamGetCaptureInfo",
        "args": "  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 ",
        "types": [
          "cudaStream_t",
          "cudaStreamCaptureStatus",
          "unsigned",
          "cudaGraph_tundefined",
          "const",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5343379e3f86d39aa8527fe0e68abf14",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamGetCaptureInfo"
        ],
        "argsstring": [
          "(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)"
        ],
        "name": [
          "hipStreamGetCaptureInfo"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipStreamCaptureStatus",
                    "$": {
                      "refid": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pCaptureStatus"
            ]
          },
          {
            "type": [
              "unsigned long long *"
            ],
            "declname": [
              "pId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Get capture status of a stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream under capture. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pCaptureStatus",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns current status of the capture. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pId",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- unique ID of the capture."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorStreamCaptureImplicit",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6667",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6667",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipStreamCaptureStatus",
          "unsigned long long undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamGetCaptureInfo (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 )",
      "hipLine": "hipError_t hipStreamGetCaptureInfo (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)",
      "graft": "// cudaError_t cudaStreamGetCaptureInfo (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 ) using hipError_t hipStreamGetCaptureInfo (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStreamCaptureStatus to hipStreamCaptureStatus\nhipStreamCaptureStatus cudaStreamCaptureStatus_TO_hipStreamCaptureStatus(cudaStreamCaptureStatus);\n\n// hipStreamCaptureStatus to cudaStreamCaptureStatus\ncudaStreamCaptureStatus hipStreamCaptureStatus_TO_cudaStreamCaptureStatus(hipStreamCaptureStatus);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamGetCaptureInfo (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 ) using hipError_t hipStreamGetCaptureInfo (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus, unsigned long long *pId)\nextern \"C\"  cudaError_t cudaStreamGetCaptureInfo (  cudaStream_t stream, cudaStreamCaptureStatus ** captureStatus_out, unsigned long long* id_out = 0, cudaGraph_t* graph_out = 0, const cudaGraphNode_t** dependencies_out = 0, size_t* numDependencies_out = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetCaptureInfo call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetCaptureInfo (hipStream_t_TO_cudaStream_t(stream), captureStatus_out, id_out, graph_out, dependencies_out, numDependencies_out);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamGetFlags ( cudaStream_t hStream, unsigned int* flags ) using hipError_t hipStreamGetFlags (hipStream_t hStream, unsigned int* flags)\nextern \"C\" cudaError_t cudaStreamGetFlags ( cudaStream_t hStream, unsigned int* flags )\n{\n    if(VERBOSE) std::cout << \"",
      "forcePrediction": false
    },
    "cudaStreamGetFlags": {
      "cuda": "cudaStreamGetFlags",
      "hip": "hipStreamGetFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamGetFlags",
        "args": "  cudaStream_t hStream, unsigned int* flags ",
        "types": [
          "cudaStream_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1ga3249555a26439591b8873f70b39bb116",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamGetFlags"
        ],
        "argsstring": [
          "(hipStream_t stream, unsigned int *flags)"
        ],
        "name": [
          "hipStreamGetFlags"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              "unsigned int *"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Return flags associated with this stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\n\nReturn flags associated with this stream in *.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream to be queried "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to an unsigned integer in which the stream's flags are returned "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "computeroutput": [
                  "flags"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2482",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2482",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "unsigned int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamGetFlags (  cudaStream_t hStream, unsigned int* flags )",
      "hipLine": "hipError_t hipStreamGetFlags (hipStream_t stream, unsigned int *flags)",
      "graft": "// cudaError_t cudaStreamGetFlags (  cudaStream_t hStream, unsigned int* flags ) using hipError_t hipStreamGetFlags (hipStream_t stream, unsigned int *flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamGetFlags (  cudaStream_t hStream, unsigned int* flags ) using hipError_t hipStreamGetFlags (hipStream_t stream, unsigned int *flags)\nextern \"C\"  cudaError_t cudaStreamGetFlags (  cudaStream_t hStream, unsigned int* flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetFlags ( hipStream_t_TO_cudaStream_t(hStream), flags );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags ) using hipError_t hipStreamCreateWithFlags ( hipStream_t* pStream, unsigned int flags )\nextern \"C\" cudaError_t cudaStreamCreateWithFlags ( cudaStream_t* pStream, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithFlags ( pStream, flags );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cuda",
      "forcePrediction": false
    },
    "cudaStreamGetPriority": {
      "cuda": "cudaStreamGetPriority",
      "hip": "hipStreamGetPriority",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamGetPriority",
        "args": "  cudaStream_t hStream, int* priority ",
        "types": [
          "cudaStream_t",
          "intundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1gae5a0d1e66035b157149ec10f5c7952be",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamGetPriority"
        ],
        "argsstring": [
          "(hipStream_t stream, int *priority)"
        ],
        "name": [
          "hipStreamGetPriority"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              "int *"
            ],
            "declname": [
              "priority"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query the priority of a stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\n\nQuery the priority of a stream. The priority is returned in in priority.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream to be queried "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "priority",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to an unsigned integer in which the stream's priority is returned "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2496",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2496",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamGetPriority (  cudaStream_t hStream, int* priority )",
      "hipLine": "hipError_t hipStreamGetPriority (hipStream_t stream, int *priority)",
      "graft": "// cudaError_t cudaStreamGetPriority (  cudaStream_t hStream, int* priority ) using hipError_t hipStreamGetPriority (hipStream_t stream, int *priority)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamGetPriority (  cudaStream_t hStream, int* priority ) using hipError_t hipStreamGetPriority (hipStream_t stream, int *priority)\nextern \"C\"  cudaError_t cudaStreamGetPriority (  cudaStream_t hStream, int* priority )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamGetPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamGetPriority ( hipStream_t_TO_cudaStream_t(hStream), priority );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreateWithPriority ( cudaStream_t* pStream, unsigned int flags, int priority ) using hipError_t hipStreamCreateWithPriority ( hipStream_t* stream, unsigned int flags, int priority )\nextern \"C\"  cudaError_t cudaStreamCreateWithPriority ( cudaStream_t* pStream, unsigned int flags, int priority )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamCreateWithPriority call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamCreateWithPriority ( (hipStream_t*)pStream, flags, priority );\n\n    return hipError_t",
      "forcePrediction": false
    },
    "cudaStreamIsCapturing": {
      "cuda": "cudaStreamIsCapturing",
      "hip": "hipStreamIsCapturing",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamIsCapturing",
        "args": "  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus ",
        "types": [
          "cudaStream_t",
          "cudaStreamCaptureStatus",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga1e6353035e74630a13ad7effd44e3263",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamIsCapturing"
        ],
        "argsstring": [
          "(hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)"
        ],
        "name": [
          "hipStreamIsCapturing"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipStreamCaptureStatus",
                    "$": {
                      "refid": "group___global_defs_1gacb066bac5e39dd1b82926e02db1756a7",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pCaptureStatus"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Get stream's capture state. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream under capture. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pCaptureStatus",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns current status of the capture."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorStreamCaptureImplicit",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad6fee0d337b88d486f9eda8608275334",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6704",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6704",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipStreamCaptureStatus",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamIsCapturing (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )",
      "hipLine": "hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)",
      "graft": "// cudaError_t cudaStreamIsCapturing (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus ) using hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaStreamCaptureStatus to hipStreamCaptureStatus\nhipStreamCaptureStatus cudaStreamCaptureStatus_TO_hipStreamCaptureStatus(cudaStreamCaptureStatus);\n\n// hipStreamCaptureStatus to cudaStreamCaptureStatus\ncudaStreamCaptureStatus hipStreamCaptureStatus_TO_cudaStreamCaptureStatus(hipStreamCaptureStatus);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamIsCapturing (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus ) using hipError_t hipStreamIsCapturing (hipStream_t stream, hipStreamCaptureStatus *pCaptureStatus)\nextern \"C\"  cudaError_t cudaStreamIsCapturing (  cudaStream_t stream, cudaStreamCaptureStatus ** pCaptureStatus )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamIsCapturing call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipStreamCaptureStatus hipCaptureStatus;\n    hipError_t hipError = hipStreamIsCapturing(cudaStream_t_TO_hipStream_t(stream), &hipCaptureStatus);\n\n    // Translate the return value\n    *pCaptureStatus = hipStreamCaptureStatus_TO_cudaStreamCaptureStatus(hipCaptureStatus);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize ( cudaStream_t stream ) using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\" cudaError_t cudaStreamSynchronize ( cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError =",
      "forcePrediction": false
    },
    "cudaStreamQuery": {
      "cuda": "cudaStreamQuery",
      "hip": "hipStreamQuery",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamQuery",
        "args": "  cudaStream_t stream ",
        "types": [
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1ga925b39ff78d3b5fd458bd9e2cade9f4e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamQuery"
        ],
        "argsstring": [
          "(hipStream_t stream)"
        ],
        "name": [
          "hipStreamQuery"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              {
                "_": "Return  if all of the operations in the specified  have completed, or  if not. ",
                "ref": [
                  {
                    "_": "hipSuccess",
                    "$": {
                      "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorNotReady",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                      "kindref": "member"
                    }
                  }
                ],
                "computeroutput": [
                  "stream"
                ]
              }
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nThis is thread-safe and returns a snapshot of the current state of the queue. However, if other host threads are sending work to the stream, the status may change immediately after the function is called. It is typically used for debug.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream to query"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotReady",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipStreamCreate",
                            "$": {
                              "refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithPriority",
                            "$": {
                              "refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamWaitEvent",
                            "$": {
                              "refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamSynchronize",
                            "$": {
                              "refid": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamDestroy",
                            "$": {
                              "refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2427",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2427",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamQuery (  cudaStream_t stream )",
      "hipLine": "hipError_t hipStreamQuery (hipStream_t stream)",
      "graft": "// cudaError_t cudaStreamQuery (  cudaStream_t stream ) using hipError_t hipStreamQuery (hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamQuery (  cudaStream_t stream ) using hipError_t hipStreamQuery (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStreamQuery (  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamQuery call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamQuery(cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize (  cudaStream_t stream ) using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStreamSynchronize (  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamSynchronize(cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamWaitEvent (  cudaStream_t stream,  cudaEvent_",
      "forcePrediction": false
    },
    "cudaStreamSynchronize": {
      "cuda": "cudaStreamSynchronize",
      "hip": "hipStreamSynchronize",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaStreamSynchronize",
        "args": "  cudaStream_t stream ",
        "types": [
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_1gabbfb9f573a6ebe8c478605ecb5504a74",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipStreamSynchronize"
        ],
        "argsstring": [
          "(hipStream_t stream)"
        ],
        "name": [
          "hipStreamSynchronize"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Wait for all commands in stream to complete. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nThis command is host-synchronous : the host will block until the specified stream is empty.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream identifier."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "This command follows standard null-stream semantics. Specifically, specifying the null stream will cause the command to wait for other streams on the same device to complete all pending operations.",
              "This command honors the hipDeviceLaunchBlocking flag, which controls whether the wait is active or blocking.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , ,  ",
                        "ref": [
                          {
                            "_": "hipStreamCreate",
                            "$": {
                              "refid": "group___stream_1gaff5b62d6e9502d80879f7176f4d03102",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithFlags",
                            "$": {
                              "refid": "group___stream_1gaf2382e3cc6632332a8983a0f58e43494",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamCreateWithPriority",
                            "$": {
                              "refid": "group___stream_1gace005d8ea734fb66c995bd43dac3fd44",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamWaitEvent",
                            "$": {
                              "refid": "group___stream_1gacdd84c8f8ef1539c96c57c1d5bcae633",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipStreamDestroy",
                            "$": {
                              "refid": "group___stream_1ga3076a3499ed2c7821311006100bb95ec",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2448",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2448",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaStreamSynchronize (  cudaStream_t stream )",
      "hipLine": "hipError_t hipStreamSynchronize (hipStream_t stream)",
      "graft": "// cudaError_t cudaStreamSynchronize (  cudaStream_t stream ) using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamSynchronize (  cudaStream_t stream ) using hipError_t hipStreamSynchronize (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStreamSynchronize (  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamSynchronize(cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamDestroy (  cudaStream_t stream ) using hipError_t hipStreamDestroy (hipStream_t stream)\nextern \"C\"  cudaError_t cudaStreamDestroy (  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaStreamDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipStreamDestroy(cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaStreamCreate (  cudaStream_t* pStream ) using hipError",
      "forcePrediction": false
    },
    "cudaThreadExchangeStreamCaptureMode": {
      "cuda": "cudaThreadExchangeStreamCaptureMode",
      "hip": "hipThreadExchangeStreamCaptureMode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaThreadExchangeStreamCaptureMode",
        "args": "  cudaStreamCaptureMode ** mode ",
        "types": [
          "cudaStreamCaptureMode",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaa5d692f2f09cad68b7534917e76d8c7f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipThreadExchangeStreamCaptureMode"
        ],
        "argsstring": [
          "(hipStreamCaptureMode *mode)"
        ],
        "name": [
          "hipThreadExchangeStreamCaptureMode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipStreamCaptureMode",
                    "$": {
                      "refid": "group___global_defs_1ga3ae2cd03e623963eba9e0064d270ce4c",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mode"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Swaps the stream capture mode of a thread. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to mode value to swap with the current mode "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6734",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6734",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStreamCaptureMode",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaThreadExchangeStreamCaptureMode (  cudaStreamCaptureMode ** mode )",
      "hipLine": "hipError_t hipThreadExchangeStreamCaptureMode (hipStreamCaptureMode *mode)",
      "graft": "// cudaError_t cudaThreadExchangeStreamCaptureMode (  cudaStreamCaptureMode ** mode ) using hipError_t hipThreadExchangeStreamCaptureMode (hipStreamCaptureMode *mode)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStreamCaptureMode to hipStreamCaptureMode\nhipStreamCaptureMode cudaStreamCaptureMode_TO_hipStreamCaptureMode(cudaStreamCaptureMode);\n\n// hipStreamCaptureMode to cudaStreamCaptureMode\ncudaStreamCaptureMode hipStreamCaptureMode_TO_cudaStreamCaptureMode(hipStreamCaptureMode);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaThreadExchangeStreamCaptureMode (  cudaStreamCaptureMode ** mode ) using hipError_t hipThreadExchangeStreamCaptureMode (hipStreamCaptureMode *mode)\nextern \"C\"  cudaError_t cudaThreadExchangeStreamCaptureMode (  cudaStreamCaptureMode ** mode )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaThreadExchangeStreamCaptureMode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipStreamCaptureMode hipMode;\n    hipError_t hipError = hipThreadExchangeStreamCaptureMode (&hipMode);\n\n    // Translate the return value from HIP to CUDA\n    *mode = cudaStreamCaptureMode_TO_hipStreamCaptureMode(hipMode);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority ) using hipError_t hipDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority )\nextern \"C\" cudaError_t cudaDeviceGetStreamPriorityRange ( int *leastPriority, int *greatestPriority )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetStreamPriorityRange call\" << std::endl;\n    // Translate the call",
      "forcePrediction": false
    },
    "cudaEventCreate": {
      "cuda": "cudaEventCreate",
      "hip": "hipEventCreate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaEventCreate",
        "args": "  cudaEvent_t* event, unsigned int  flags ",
        "types": [
          "cudaEvent_tundefined",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipEventCreate"
        ],
        "argsstring": [
          "(hipEvent_t *event)"
        ],
        "name": [
          "hipEventCreate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          "\n        "
        ],
        "detaileddescription": [
          {
            "para": [
              "Create an event",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns the newly created event."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorLaunchFailure",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipEventCreateWithFlags",
                            "$": {
                              "refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventRecord",
                            "$": {
                              "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventQuery",
                            "$": {
                              "refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventSynchronize",
                            "$": {
                              "refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventDestroy",
                            "$": {
                              "refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventElapsedTime",
                            "$": {
                              "refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2729",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2729",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaEventCreate (  cudaEvent_t* event, unsigned int  flags )",
      "hipLine": "hipError_t hipEventCreate (hipEvent_t *event)",
      "graft": "// cudaError_t cudaEventCreate (  cudaEvent_t* event, unsigned int  flags ) using hipError_t hipEventCreate (hipEvent_t *event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventCreate (  cudaEvent_t* event, unsigned int  flags ) using hipError_t hipEventCreate (hipEvent_t *event)\nextern \"C\"  cudaError_t cudaEventCreate (  cudaEvent_t* event, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventCreate(event);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream ) using hipError_t hipEventRecord (hipEvent_t event, hipStream_t stream)\nextern \"C\" cudaError_t cudaEventRecord ( cudaEvent_t event, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventRecord call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventRecord(event, stream);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventSynchronize ( cudaEvent_t event ) using hipError_t hipEventSynchronize (hipEvent_t event",
      "forcePrediction": false
    },
    "cudaEventElapsedTime": {
      "cuda": "cudaEventElapsedTime",
      "hip": "hipEventElapsedTime",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaEventElapsedTime",
        "args": "  float* ms, cudaEvent_t start, cudaEvent_t end ",
        "types": [
          "floatundefined",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipEventElapsedTime"
        ],
        "argsstring": [
          "(float *ms, hipEvent_t start, hipEvent_t stop)"
        ],
        "name": [
          "hipEventElapsedTime"
        ],
        "param": [
          {
            "type": [
              "float *"
            ],
            "declname": [
              "ms"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "start"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stop"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Return the elapsed time between two events. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nComputes the elapsed time between two events. Time is computed in ms, with a resolution of approximately 1 us.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ms",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              ": Return time between start and stop in ms. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "start",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              ": Start event. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stop",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              ": Stop event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotReady",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorLaunchFailure",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "Events which are recorded in a NULL stream will block until all commands on all other streams complete execution, and then record the timestamp.",
              {
                "_": "Events which are recorded in a non-NULL stream will record their timestamp when they reach the head of the specified stream, after all previous commands in that stream have completed executing. Thus the time that the event recorded may be significantly after the host calls .",
                "ref": [
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "_": "If  has not been called on either event, then  is returned. If  has been called on both events, but the timestamp has not yet been recorded on one or both events (that is,  would return  on at least one of the events), then  is returned.",
                "ref": [
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorInvalidHandle",
                    "$": {
                      "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipEventQuery()",
                    "$": {
                      "refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorNotReady",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorNotReady",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipEventCreate",
                            "$": {
                              "refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventCreateWithFlags",
                            "$": {
                              "refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventQuery",
                            "$": {
                              "refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventDestroy",
                            "$": {
                              "refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventRecord",
                            "$": {
                              "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventSynchronize",
                            "$": {
                              "refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2830",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2830",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "float undefined",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaEventElapsedTime (  float* ms, cudaEvent_t start, cudaEvent_t end )",
      "hipLine": "hipError_t hipEventElapsedTime (float *ms, hipEvent_t start, hipEvent_t stop)",
      "graft": "// cudaError_t cudaEventElapsedTime (  float* ms, cudaEvent_t start, cudaEvent_t end ) using hipError_t hipEventElapsedTime (float *ms, hipEvent_t start, hipEvent_t stop)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventElapsedTime (  float* ms, cudaEvent_t start, cudaEvent_t end ) using hipError_t hipEventElapsedTime (float *ms, hipEvent_t start, hipEvent_t stop)\nextern \"C\"  cudaError_t cudaEventElapsedTime (  float* ms, cudaEvent_t start, cudaEvent_t end )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventElapsedTime call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventElapsedTime(ms, hipEvent_t_TO_cudaEvent_t(start), hipEvent_t_TO_cudaEvent_t(end));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventCreate ( cudaEvent_t* event ) using hipError_t hipEventCreate (hipEvent_t* event)\nextern \"C\" cudaError_t cudaEventCreate ( cudaEvent_t* event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventCreate(event);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventDestroy ( cuda",
      "forcePrediction": false
    },
    "cudaEventQuery": {
      "cuda": "cudaEventQuery",
      "hip": "hipEventQuery",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaEventQuery",
        "args": "  cudaEvent_t event ",
        "types": [
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipEventQuery"
        ],
        "argsstring": [
          "(hipEvent_t event)"
        ],
        "name": [
          "hipEventQuery"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query event status. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nQuery the status of the specified event. This function will return  if all commands in the appropriate stream (specified to ) have completed. If any execution has not completed, then  is returned.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Event to query. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotReady",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorLaunchFailure",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "ref": [
                  {
                    "_": "hipSuccess",
                    "$": {
                      "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorNotReady",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a8e981181b750f34a4c9532cbba73ba76",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": ": This API returns , if  is not called before this API.",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventRecord()",
                            "$": {
                              "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipEventCreate",
                            "$": {
                              "refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventCreateWithFlags",
                            "$": {
                              "refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventRecord",
                            "$": {
                              "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventDestroy",
                            "$": {
                              "refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventSynchronize",
                            "$": {
                              "refid": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventElapsedTime",
                            "$": {
                              "refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2847",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2847",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaEventQuery (  cudaEvent_t event )",
      "hipLine": "hipError_t hipEventQuery (hipEvent_t event)",
      "graft": "// cudaError_t cudaEventQuery (  cudaEvent_t event ) using hipError_t hipEventQuery (hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventQuery (  cudaEvent_t event ) using hipError_t hipEventQuery (hipEvent_t event)\nextern \"C\"  cudaError_t cudaEventQuery (  cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventQuery call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventQuery(cudaEvent_t_TO_hipEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventSynchronize (  cudaEvent_t event ) using hipError_t hipEventSynchronize (hipEvent_t event)\nextern \"C\"  cudaError_t cudaEventSynchronize (  cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventSynchronize(cudaEvent_t_TO_hipEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventRecord (  cudaEvent_t event,  cudaStream_t",
      "forcePrediction": false
    },
    "cudaEventSynchronize": {
      "cuda": "cudaEventSynchronize",
      "hip": "hipEventSynchronize",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaEventSynchronize",
        "args": "  cudaEvent_t event ",
        "types": [
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___event_1ga1f72d98ba5d6f7dc3da54e0c41fe38b1",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipEventSynchronize"
        ],
        "argsstring": [
          "(hipEvent_t event)"
        ],
        "name": [
          "hipEventSynchronize"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Wait for an event to complete. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "This function will block until the event is ready, waiting for all previous work in the stream specified when event was recorded with .",
                "ref": [
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "_": "If  has not been called on , this function returns  when no event is captured.",
                "ref": [
                  {
                    "_": "hipEventRecord()",
                    "$": {
                      "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipSuccess",
                    "$": {
                      "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                      "kindref": "member"
                    }
                  }
                ],
                "computeroutput": [
                  "event"
                ]
              },
              "This function needs to support hipEventBlockingSync parameter.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Event on which to wait."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorLaunchFailure",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f1f32a3741b37e03030cfbc08852f6a",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipEventCreate",
                            "$": {
                              "refid": "group___event_1ga5df2309c9f29ca4c8e669db658d411b4",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventCreateWithFlags",
                            "$": {
                              "refid": "group___event_1gae86a5acb1b22b61bc9ecb9c28fc71b75",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventQuery",
                            "$": {
                              "refid": "group___event_1ga5d12d7b798b5ceb5932d1ac21f5ac776",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventDestroy",
                            "$": {
                              "refid": "group___event_1ga83260357dce0c39e8c6a3c74ec97484c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventRecord",
                            "$": {
                              "refid": "group___event_1ga553b6f7a8e7b7dd9536d8a64c24d7e29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipEventElapsedTime",
                            "$": {
                              "refid": "group___event_1gad4128b815cb475c8e13c7e66ff6250b7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2801",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2801",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaEventSynchronize (  cudaEvent_t event )",
      "hipLine": "hipError_t hipEventSynchronize (hipEvent_t event)",
      "graft": "// cudaError_t cudaEventSynchronize (  cudaEvent_t event ) using hipError_t hipEventSynchronize (hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventSynchronize (  cudaEvent_t event ) using hipError_t hipEventSynchronize (hipEvent_t event)\nextern \"C\"  cudaError_t cudaEventSynchronize (  cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventSynchronize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventSynchronize(cudaEvent_t_TO_hipEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaEventRecord (  cudaEvent_t event,  cudaStream_t stream ) using hipError_t hipEventRecord (hipEvent_t event, hipStream_t stream)\nextern \"C\"  cudaError_t cudaEventRecord (  cudaEvent_t event,  cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaEventRecord call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipEventRecord(cudaEvent_t_TO_hipEvent_t(event), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t",
      "forcePrediction": false
    },
    "cudaDestroyExternalMemory": {
      "cuda": "cudaDestroyExternalMemory",
      "hip": "hipDestroyExternalMemory",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDestroyExternalMemory",
        "args": "  cudaExternalMemory_t extMem ",
        "types": [
          "cudaExternalMemory_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1ga0528cd84c3ccb2f288c802250ebbc653",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDestroyExternalMemory"
        ],
        "argsstring": [
          "(hipExternalMemory_t extMem)"
        ],
        "name": [
          "hipDestroyExternalMemory"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipExternalMemory_t",
                    "$": {
                      "refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extMem"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys an external memory object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extMem",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "External memory object to be destroyed"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3032",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3032",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalMemory_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDestroyExternalMemory (  cudaExternalMemory_t extMem )",
      "hipLine": "hipError_t hipDestroyExternalMemory (hipExternalMemory_t extMem)",
      "graft": "// cudaError_t cudaDestroyExternalMemory (  cudaExternalMemory_t extMem ) using hipError_t hipDestroyExternalMemory (hipExternalMemory_t extMem)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaExternalMemory_t to hipExternalMemory_t\nhipExternalMemory_t cudaExternalMemory_t_TO_hipExternalMemory_t(cudaExternalMemory_t);\n\n// hipExternalMemory_t to cudaExternalMemory_t\ncudaExternalMemory_t hipExternalMemory_t_TO_cudaExternalMemory_t(hipExternalMemory_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroyExternalMemory (  cudaExternalMemory_t extMem ) using hipError_t hipDestroyExternalMemory (hipExternalMemory_t extMem)\nextern \"C\"  cudaError_t cudaDestroyExternalMemory (  cudaExternalMemory_t extMem )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroyExternalMemory call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDestroyExternalMemory(cudaExternalMemory_t_TO_hipExternalMemory_t(extMem));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr,  cudaExternalMemory_t extMem,  const void* extMem_handle,  size_t size,  unsigned int flags ) using hipError_t hipExternalMemoryGetMappedBuffer (void** devPtr, hipExternalMemory_t extMem, const void* extMem_handle, size_t size, unsigned int flags)\nextern \"C\"  cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr,  cudaExternalMemory_t extMem,  const void* extMem_handle,  size_t size,  unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaExternalMemoryGetMappedBuffer",
      "forcePrediction": false
    },
    "cudaDestroyExternalSemaphore": {
      "cuda": "cudaDestroyExternalSemaphore",
      "hip": "hipDestroyExternalSemaphore",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDestroyExternalSemaphore",
        "args": "  cudaExternalSemaphore_t extSem ",
        "types": [
          "cudaExternalSemaphore_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1ga951f58a4bfdf32fe540e3732d9350429",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDestroyExternalSemaphore"
        ],
        "argsstring": [
          "(hipExternalSemaphore_t extSem)"
        ],
        "name": [
          "hipDestroyExternalSemaphore"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipExternalSemaphore_t",
                    "$": {
                      "refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extSem"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys an external semaphore object and releases any references to the underlying resource. Any outstanding signals or waits must have completed before the semaphore is destroyed. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extSem",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "handle to an external memory object"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2998",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2998",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalSemaphore_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDestroyExternalSemaphore (  cudaExternalSemaphore_t extSem )",
      "hipLine": "hipError_t hipDestroyExternalSemaphore (hipExternalSemaphore_t extSem)",
      "graft": "// cudaError_t cudaDestroyExternalSemaphore (  cudaExternalSemaphore_t extSem ) using hipError_t hipDestroyExternalSemaphore (hipExternalSemaphore_t extSem)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n\n// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroyExternalSemaphore (  cudaExternalSemaphore_t extSem ) using hipError_t hipDestroyExternalSemaphore (hipExternalSemaphore_t extSem)\nextern \"C\"  cudaError_t cudaDestroyExternalSemaphore (  cudaExternalSemaphore_t extSem )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroyExternalSemaphore call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDestroyExternalSemaphore(cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(extSem));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, unsigned int numExtSems, const cudaStream_t* streamArray ) using hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t* extSemArray, unsigned int numExtSems, const hipStream_t* streamArray)\nextern \"C\"  cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, unsigned int numExtSems, const cudaStream_t* streamArray )\n{\n    if(VERBOSE) std::cout << \"Intercept",
      "forcePrediction": false
    },
    "cudaExternalMemoryGetMappedBuffer": {
      "cuda": "cudaExternalMemoryGetMappedBuffer",
      "hip": "hipExternalMemoryGetMappedBuffer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaExternalMemoryGetMappedBuffer",
        "args": "  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc ",
        "types": [
          "voidundefined*",
          "cudaExternalMemory_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1gafdd9c269bcab2c5dd97f6788e26db9c8",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipExternalMemoryGetMappedBuffer"
        ],
        "argsstring": [
          "(void **devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc *bufferDesc)"
        ],
        "name": [
          "hipExternalMemoryGetMappedBuffer"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "devPtr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipExternalMemory_t",
                    "$": {
                      "refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extMem"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalMemoryBufferDesc",
                    "$": {
                      "refid": "structhip_external_memory_buffer_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "bufferDesc"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Maps a buffer onto an imported memory object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "devPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned device pointer to buffer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extMem",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Handle to external memory object "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "bufferDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Buffer descriptor"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3022",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3022",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "hipExternalMemory_t",
          "hipExternalMemoryBufferDesc",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc )",
      "hipLine": "hipError_t hipExternalMemoryGetMappedBuffer (void **devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc *bufferDesc)",
      "graft": "// cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc ) using hipError_t hipExternalMemoryGetMappedBuffer (void **devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc *bufferDesc)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaExternalMemory_t to hipExternalMemory_t\nhipExternalMemory_t cudaExternalMemory_t_TO_hipExternalMemory_t(cudaExternalMemory_t);\n\n// hipExternalMemory_t to cudaExternalMemory_t\ncudaExternalMemory_t hipExternalMemory_t_TO_cudaExternalMemory_t(hipExternalMemory_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalMemoryBufferDesc to cudaExternalMemoryBufferDesc\ncudaExternalMemoryBufferDesc hipExternalMemoryBufferDesc_TO_cudaExternalMemoryBufferDesc(hipExternalMemoryBufferDesc);\n\n// cudaExternalMemoryBufferDesc to hipExternalMemoryBufferDesc\nhipExternalMemoryBufferDesc cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc(cudaExternalMemoryBufferDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc ) using hipError_t hipExternalMemoryGetMappedBuffer (void **devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc *bufferDesc)\nextern \"C\"  cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaExternalMemoryGetMappedBuffer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipExternalMemoryGetMappedBuffer (devPtr, hipExternalMemory_t_TO_hipExternalMemory_t(extMem), &cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc(*bufferDesc));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaExternalMemoryGetMappedMipmappedArray ( cudaArray** mipmappedArray, cudaExternalMemory_t extMem, const cudaExternalMemoryMipmappedArrayDesc* mipmapDesc ) using hipError_t hipExternalMemoryGetMappedMipmappedArray (hipArray** mipmappedArray, hipExternalMemory_t extMem, const hipExternalMemoryMipmappedArrayDesc* mipmapDesc)\nextern \"C\"  cudaError_t cudaExternalMemoryGetMappedMipmappedArray ( cudaArray**",
      "forcePrediction": false
    },
    "cudaImportExternalMemory": {
      "cuda": "cudaImportExternalMemory",
      "hip": "hipImportExternalMemory",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaImportExternalMemory",
        "args": "  cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc ",
        "types": [
          "cudaExternalMemory_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1ga3843e77ea25a17638a4d732d908ec625",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipImportExternalMemory"
        ],
        "argsstring": [
          "(hipExternalMemory_t *extMem_out, const hipExternalMemoryHandleDesc *memHandleDesc)"
        ],
        "name": [
          "hipImportExternalMemory"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipExternalMemory_t",
                    "$": {
                      "refid": "group___global_defs_1gacad4902ef0f6115cb225c6eadc08c0ed",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extMem_out"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalMemoryHandleDesc",
                    "$": {
                      "refid": "structhip_external_memory_handle_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "memHandleDesc"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Imports an external memory object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extMem_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned handle to an external memory object "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "memHandleDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory import handle descriptor"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3010",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3010",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalMemory_t",
          "hipExternalMemoryHandleDesc",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaImportExternalMemory (  cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc )",
      "hipLine": "hipError_t hipImportExternalMemory (hipExternalMemory_t *extMem_out, const hipExternalMemoryHandleDesc *memHandleDesc)",
      "graft": "// cudaError_t cudaImportExternalMemory (  cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc ) using hipError_t hipImportExternalMemory (hipExternalMemory_t *extMem_out, const hipExternalMemoryHandleDesc *memHandleDesc)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalMemory_t to cudaExternalMemory_t\ncudaExternalMemory_t hipExternalMemory_t_TO_cudaExternalMemory_t(hipExternalMemory_t);\n\n// cudaExternalMemory_t to hipExternalMemory_t\nhipExternalMemory_t cudaExternalMemory_t_TO_hipExternalMemory_t(cudaExternalMemory_t);\n\n// hipExternalMemoryHandleDesc to cudaExternalMemoryHandleDesc\ncudaExternalMemoryHandleDesc hipExternalMemoryHandleDesc_TO_cudaExternalMemoryHandleDesc(hipExternalMemoryHandleDesc);\n\n// cudaExternalMemoryHandleDesc to hipExternalMemoryHandleDesc\nhipExternalMemoryHandleDesc cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc(cudaExternalMemoryHandleDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaImportExternalMemory (  cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc ) using hipError_t hipImportExternalMemory (hipExternalMemory_t *extMem_out, const hipExternalMemoryHandleDesc *memHandleDesc)\nextern \"C\"  cudaError_t cudaImportExternalMemory (  cudaExternalMemory_t* extMem_out, const cudaExternalMemoryHandleDesc* memHandleDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaImportExternalMemory call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipImportExternalMemory (extMem_out, cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc(*memHandleDesc));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc ) using hipError_t hipExternalMemoryGetMappedBuffer (void** devPtr, hipExternalMemory_t extMem, const hipExternalMemoryBufferDesc* bufferDesc)\nextern \"C\"  cudaError_t cudaExternalMemoryGetMappedBuffer (  void** devPtr, cudaExternalMemory_t extMem, const cudaExternalMemoryBufferDesc* bufferDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaExternalMemoryGetMappedBuffer call\" << std::endl;\n   ",
      "forcePrediction": false
    },
    "cudaImportExternalSemaphore": {
      "cuda": "cudaImportExternalSemaphore",
      "hip": "hipImportExternalSemaphore",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaImportExternalSemaphore",
        "args": "  cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc ",
        "types": [
          "cudaExternalSemaphore_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1ga089c3d30b1b67b9bc4120cf557e3d2fc",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipImportExternalSemaphore"
        ],
        "argsstring": [
          "(hipExternalSemaphore_t *extSem_out, const hipExternalSemaphoreHandleDesc *semHandleDesc)"
        ],
        "name": [
          "hipImportExternalSemaphore"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipExternalSemaphore_t",
                    "$": {
                      "refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extSem_out"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreHandleDesc",
                    "$": {
                      "refid": "structhip_external_semaphore_handle_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "semHandleDesc"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Imports an external semaphore. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extSem_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "External semaphores to be waited on "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "semHandleDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Semaphore import handle descriptor"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2957",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2957",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalSemaphore_t",
          "hipExternalSemaphoreHandleDesc",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaImportExternalSemaphore (  cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc )",
      "hipLine": "hipError_t hipImportExternalSemaphore (hipExternalSemaphore_t *extSem_out, const hipExternalSemaphoreHandleDesc *semHandleDesc)",
      "graft": "// cudaError_t cudaImportExternalSemaphore (  cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc ) using hipError_t hipImportExternalSemaphore (hipExternalSemaphore_t *extSem_out, const hipExternalSemaphoreHandleDesc *semHandleDesc)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n\n// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n\n// hipExternalSemaphoreHandleDesc to cudaExternalSemaphoreHandleDesc\ncudaExternalSemaphoreHandleDesc hipExternalSemaphoreHandleDesc_TO_cudaExternalSemaphoreHandleDesc(hipExternalSemaphoreHandleDesc);\n\n// cudaExternalSemaphoreHandleDesc to hipExternalSemaphoreHandleDesc\nhipExternalSemaphoreHandleDesc cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc(cudaExternalSemaphoreHandleDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaImportExternalSemaphore (  cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc ) using hipError_t hipImportExternalSemaphore (hipExternalSemaphore_t *extSem_out, const hipExternalSemaphoreHandleDesc *semHandleDesc)\nextern \"C\"  cudaError_t cudaImportExternalSemaphore (  cudaExternalSemaphore_t* extSem_out, const cudaExternalSemaphoreHandleDesc* semHandleDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaImportExternalSemaphore call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipImportExternalSemaphore (extSem_out, cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc(*semHandleDesc));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSignalExternalSemaphoresAsync (const cudaExternalSemaphore_t* extSemArray, const struct cudaExternalSemaphoreSignalParams* paramsArray, unsigned int numExtSems, cudaStream_t stream) using hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const struct hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\" cudaError_t cudaSignalExternalSemaphoresAsync (const cudaExternalSemaphore_",
      "forcePrediction": false
    },
    "cudaSignalExternalSemaphoresAsync": {
      "cuda": "cudaSignalExternalSemaphoresAsync",
      "hip": "hipSignalExternalSemaphoresAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaSignalExternalSemaphoresAsync",
        "args": "  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "unsigned",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1gaeb7a6254609be10d799997d749ee96c3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipSignalExternalSemaphoresAsync"
        ],
        "argsstring": [
          "(const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)"
        ],
        "name": [
          "hipSignalExternalSemaphoresAsync"
        ],
        "param": [
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphore_t",
                    "$": {
                      "refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extSemArray"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreSignalParams",
                    "$": {
                      "refid": "structhip_external_semaphore_signal_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "paramsArray"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "numExtSems"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Signals a set of external semaphore objects. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extSemArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "External semaphores to be waited on "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "paramsArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Array of semaphore parameters "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numExtSems",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Number of semaphores to wait on "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Stream to enqueue the wait operations in"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2971",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2971",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalSemaphore_t",
          "hipExternalSemaphoreSignalParams",
          "unsigned int",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)",
      "graft": "// cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n\n// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n\n// hipExternalSemaphoreSignalParams to cudaExternalSemaphoreSignalParams_v1\ncudaExternalSemaphoreSignalParams_v1 hipExternalSemaphoreSignalParams_TO_cudaExternalSemaphoreSignalParams_v1(hipExternalSemaphoreSignalParams);\n\n// cudaExternalSemaphoreSignalParams_v1 to hipExternalSemaphoreSignalParams\nhipExternalSemaphoreSignalParams cudaExternalSemaphoreSignalParams_v1_TO_hipExternalSemaphoreSignalParams(cudaExternalSemaphoreSignalParams_v1);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\"  cudaError_t cudaSignalExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaSignalExternalSemaphoresAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSignalExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaWaitExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipWaitExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\"  c",
      "forcePrediction": false
    },
    "cudaWaitExternalSemaphoresAsync": {
      "cuda": "cudaWaitExternalSemaphoresAsync",
      "hip": "hipWaitExternalSemaphoresAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaWaitExternalSemaphoresAsync",
        "args": "  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "unsigned",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___external_1gade94d4535f2631d3d275f812ad372279",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipWaitExternalSemaphoresAsync"
        ],
        "argsstring": [
          "(const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)"
        ],
        "name": [
          "hipWaitExternalSemaphoresAsync"
        ],
        "param": [
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphore_t",
                    "$": {
                      "refid": "group___global_defs_1gabac0a28e2e38f93c46743f629efac5c5",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extSemArray"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreWaitParams",
                    "$": {
                      "refid": "structhip_external_semaphore_wait_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "paramsArray"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "numExtSems"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Waits on a set of external semaphore objects. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extSemArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "External semaphores to be waited on "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "paramsArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Array of semaphore parameters "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numExtSems",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Number of semaphores to wait on "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Stream to enqueue the wait operations in"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      ""
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2986",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2986",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipExternalSemaphore_t",
          "hipExternalSemaphoreWaitParams",
          "unsigned int",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaWaitExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipWaitExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)",
      "graft": "// cudaError_t cudaWaitExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipWaitExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n\n// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n\n// hipExternalSemaphoreWaitParams to cudaExternalSemaphoreWaitParams_v1\ncudaExternalSemaphoreWaitParams_v1 hipExternalSemaphoreWaitParams_TO_cudaExternalSemaphoreWaitParams_v1(hipExternalSemaphoreWaitParams);\n\n// cudaExternalSemaphoreWaitParams_v1 to hipExternalSemaphoreWaitParams\nhipExternalSemaphoreWaitParams cudaExternalSemaphoreWaitParams_v1_TO_hipExternalSemaphoreWaitParams(cudaExternalSemaphoreWaitParams_v1);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaWaitExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipWaitExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreWaitParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\"  cudaError_t cudaWaitExternalSemaphoresAsync (  const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreWaitParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaWaitExternalSemaphoresAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipWaitExternalSemaphoresAsync(extSemArray, paramsArray, numExtSems, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSignalExternalSemaphoresAsync ( const cudaExternalSemaphore_t* extSemArray, const cudaExternalSemaphoreSignalParams* paramsArray, unsigned int  numExtSems, cudaStream_t stream = 0 ) using hipError_t hipSignalExternalSemaphoresAsync (const hipExternalSemaphore_t *extSemArray, const hipExternalSemaphoreSignalParams *paramsArray, unsigned int numExtSems, hipStream_t stream)\nextern \"C\"  cuda",
      "forcePrediction": false
    },
    "cudaFuncGetAttributes": {
      "cuda": "cudaFuncGetAttributes",
      "hip": "hipFuncGetAttributes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFuncGetAttributes",
        "args": "  cudaFuncAttributes* attr, T* entry ",
        "types": [
          "cudaFuncAttributesundefined",
          "Tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___module_1ga18a72890686975fdd46c7c8a7bb5a607",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFuncGetAttributes"
        ],
        "argsstring": [
          "(struct hipFuncAttributes *attr, const void *func)"
        ],
        "name": [
          "hipFuncGetAttributes"
        ],
        "param": [
          {
            "type": [
              {
                "_": "struct  *",
                "ref": [
                  {
                    "_": "hipFuncAttributes",
                    "$": {
                      "refid": "structhip_func_attributes",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "func"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Find out attributes for a given function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Attributes of funtion "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "func",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the function handle"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5290",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5290",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipFuncAttributes",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFuncGetAttributes (  cudaFuncAttributes* attr, T* entry )",
      "hipLine": "hipError_t hipFuncGetAttributes (struct hipFuncAttributes *attr, const void *func)",
      "graft": "// cudaError_t cudaFuncGetAttributes (  cudaFuncAttributes* attr, T* entry ) using hipError_t hipFuncGetAttributes (struct hipFuncAttributes *attr, const void *func)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipFuncAttributes to cudaFuncAttributes\ncudaFuncAttributes hipFuncAttributes_TO_cudaFuncAttributes(hipFuncAttributes);\n\n// cudaFuncAttributes to hipFuncAttributes\nhipFuncAttributes cudaFuncAttributes_TO_hipFuncAttributes(cudaFuncAttributes);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncGetAttributes (  cudaFuncAttributes* attr, T* entry ) using hipError_t hipFuncGetAttributes (struct hipFuncAttributes *attr, const void *func)\nextern \"C\"  cudaError_t cudaFuncGetAttributes (  cudaFuncAttributes* attr, void* entry )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFuncGetAttributes call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFuncGetAttributes ( (hipFuncAttributes*)attr, entry );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (struct hipDeviceProp_t *prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties ( (hipDeviceProp_t*)prop, device );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int* device ) using hipError_t hip",
      "forcePrediction": false
    },
    "cudaFuncSetAttribute": {
      "cuda": "cudaFuncSetAttribute",
      "hip": "hipFuncSetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFuncSetAttribute",
        "args": "  T* entry, cudaFuncAttribute attr, int  value ",
        "types": [
          "Tundefined",
          "cudaFuncAttribute",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___execution_1ga8417deea9092f35e497bc7e19bd5e12d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFuncSetAttribute"
        ],
        "argsstring": [
          "(const void *func, hipFuncAttribute attr, int value)"
        ],
        "name": [
          "hipFuncSetAttribute"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "func"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipFuncAttribute",
                    "$": {
                      "refid": "group___global_defs_1ga4a800faf1ce60529b4f052a30ef10b85",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set attribute for a specific function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "func",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the function "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Attribute to set "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Value to set"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2201",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2201",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "hipFuncAttribute",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFuncSetAttribute (  T* entry, cudaFuncAttribute attr, int  value )",
      "hipLine": "hipError_t hipFuncSetAttribute (const void *func, hipFuncAttribute attr, int value)",
      "graft": "// cudaError_t cudaFuncSetAttribute (  T* entry, cudaFuncAttribute attr, int  value ) using hipError_t hipFuncSetAttribute (const void *func, hipFuncAttribute attr, int value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaFuncAttribute to hipFuncAttribute\nhipFuncAttribute cudaFuncAttribute_TO_hipFuncAttribute(cudaFuncAttribute);\n\n// hipFuncAttribute to cudaFuncAttribute\ncudaFuncAttribute hipFuncAttribute_TO_cudaFuncAttribute(hipFuncAttribute);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncSetAttribute (  T* entry, cudaFuncAttribute attr, int  value ) using hipError_t hipFuncSetAttribute (const void *func, hipFuncAttribute attr, int value)\nextern \"C\"  cudaError_t cudaFuncSetAttribute (  void* entry, cudaFuncAttribute attr, int  value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFuncSetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFuncSetAttribute (entry, hipFuncAttribute_TO_cudaFuncAttribute(attr), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncGetAttributes (  struct cudaFuncAttributes* attr, const void* func ) using hipError_t hipFuncGetAttributes (struct hipFuncAttributes* attr, const void* func)\nextern \"C\"  cudaError_t cudaFuncGetAttributes (  struct cudaFuncAttributes* attr, const void* func )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFuncGetAttributes call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFuncGetAttributes (attr, func);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncGetAttribute",
      "forcePrediction": false
    },
    "cudaFuncSetCacheConfig": {
      "cuda": "cudaFuncSetCacheConfig",
      "hip": "hipFuncSetCacheConfig",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFuncSetCacheConfig",
        "args": "  T* func, cudaFuncCache cacheConfig ",
        "types": [
          "Tundefined",
          "cudaFuncCache",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___execution_1gafdb33ef569eb89808fc5178d04b508ba",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFuncSetCacheConfig"
        ],
        "argsstring": [
          "(const void *func, hipFuncCache_t config)"
        ],
        "name": [
          "hipFuncSetCacheConfig"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "func"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipFuncCache_t",
                    "$": {
                      "refid": "group___global_defs_1ga86e5c5692645963a9a673e1aa88ba6ca",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "config"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set Cache configuration for a specific function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "func",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the function. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "config",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Configuration to set."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  Note: AMD devices and some Nvidia GPUS do not support reconfigurable cache. This hint is ignored on those architectures. ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2213",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2213",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "hipFuncCache_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFuncSetCacheConfig (  T* func, cudaFuncCache cacheConfig )",
      "hipLine": "hipError_t hipFuncSetCacheConfig (const void *func, hipFuncCache_t config)",
      "graft": "// cudaError_t cudaFuncSetCacheConfig (  T* func, cudaFuncCache cacheConfig ) using hipError_t hipFuncSetCacheConfig (const void *func, hipFuncCache_t config)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaFuncCache to hipFuncCache_t\nhipFuncCache_t cudaFuncCache_TO_hipFuncCache_t(cudaFuncCache);\n\n// hipFuncCache_t to cudaFuncCache\ncudaFuncCache hipFuncCache_t_TO_cudaFuncCache(hipFuncCache_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncSetCacheConfig (  T* func, cudaFuncCache cacheConfig ) using hipError_t hipFuncSetCacheConfig (const void *func, hipFuncCache_t config)\nextern \"C\"  cudaError_t cudaFuncSetCacheConfig (  void* func, cudaFuncCache cacheConfig )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFuncSetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFuncSetCacheConfig (func, cudaFuncCache_TO_hipFuncCache_t(cacheConfig));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetCacheConfig ( cudaFuncCache cacheConfig ) using hipError_t hipDeviceSetCacheConfig (hipFuncCache_t config)\nextern \"C\" cudaError_t cudaDeviceSetCacheConfig ( cudaFuncCache cacheConfig )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetCacheConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetCacheConfig (cudaFuncCache_TO_hipFuncCache_t(cacheConfig));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetCacheConfig (",
      "forcePrediction": false
    },
    "cudaFuncSetSharedMemConfig": {
      "cuda": "cudaFuncSetSharedMemConfig",
      "hip": "hipFuncSetSharedMemConfig",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFuncSetSharedMemConfig",
        "args": "  const void* func, cudaSharedMemConfig config ",
        "types": [
          "const",
          "cudaSharedMemConfig",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___execution_1ga36b1d09bfb54678df0c7dc1066ec029c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFuncSetSharedMemConfig"
        ],
        "argsstring": [
          "(const void *func, hipSharedMemConfig config)"
        ],
        "name": [
          "hipFuncSetSharedMemConfig"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "func"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipSharedMemConfig",
                    "$": {
                      "refid": "group___global_defs_1ga2e17b71d94ac350f2ccd914fd49d104e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "config"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set shared memory configuation for a specific function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nNote: AMD devices and some Nvidia GPUS do not support shared cache banking, and the hint is ignored on those architectures. ",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "func",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of the function "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "config",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Configuration"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2226",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2226",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "hipSharedMemConfig",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFuncSetSharedMemConfig (  const void* func, cudaSharedMemConfig config )",
      "hipLine": "hipError_t hipFuncSetSharedMemConfig (const void *func, hipSharedMemConfig config)",
      "graft": "// cudaError_t cudaFuncSetSharedMemConfig (  const void* func, cudaSharedMemConfig config ) using hipError_t hipFuncSetSharedMemConfig (const void *func, hipSharedMemConfig config)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaSharedMemConfig to hipSharedMemConfig\nhipSharedMemConfig cudaSharedMemConfig_TO_hipSharedMemConfig(cudaSharedMemConfig);\n\n// hipSharedMemConfig to cudaSharedMemConfig\ncudaSharedMemConfig hipSharedMemConfig_TO_cudaSharedMemConfig(hipSharedMemConfig);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFuncSetSharedMemConfig (  const void* func, cudaSharedMemConfig config ) using hipError_t hipFuncSetSharedMemConfig (const void *func, hipSharedMemConfig config)\nextern \"C\"  cudaError_t cudaFuncSetSharedMemConfig (  const void* func, cudaSharedMemConfig config )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFuncSetSharedMemConfig call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFuncSetSharedMemConfig (func, cudaSharedMemConfig_TO_hipSharedMemConfig(config));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t* prop, int device)\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties (prop, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int* device ) using hip",
      "forcePrediction": false
    },
    "cudaLaunchCooperativeKernel": {
      "cuda": "cudaLaunchCooperativeKernel",
      "hip": "hipLaunchCooperativeKernel",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaLaunchCooperativeKernel",
        "args": "  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "dim3",
          "voidundefined*",
          "size_t",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___module_1gaa516e011bb07d01550102c98adb57ec2",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipLaunchCooperativeKernel"
        ],
        "argsstring": [
          "(const void *f, dim3 gridDim, dim3 blockDimX, void **kernelParams, unsigned int sharedMemBytes, hipStream_t stream)"
        ],
        "name": [
          "hipLaunchCooperativeKernel"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "f"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "dim3",
                    "$": {
                      "refid": "structdim3",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "gridDim"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "dim3",
                    "$": {
                      "refid": "structdim3",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "blockDimX"
            ]
          },
          {
            "type": [
              "void **"
            ],
            "declname": [
              "kernelParams"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "sharedMemBytes"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "launches kernel f with launch parameters and shared memory on stream with arguments passed to kernelparams or extra, where thread blocks can cooperate and synchronize as they execute "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "f",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Kernel to launch. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "gridDim",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Grid dimensions specified as multiple of blockDim. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "blockDimX",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Block dimensions specified in work-items "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kernelParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "A list of kernel arguments "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sharedMemBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorCooperativeLaunchTooLarge",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5433",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5433",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "dim3",
          "void undefined*",
          "unsigned int",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaLaunchCooperativeKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipLaunchCooperativeKernel (const void *f, dim3 gridDim, dim3 blockDimX, void **kernelParams, unsigned int sharedMemBytes, hipStream_t stream)",
      "graft": "// cudaError_t cudaLaunchCooperativeKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ) using hipError_t hipLaunchCooperativeKernel (const void *f, dim3 gridDim, dim3 blockDimX, void **kernelParams, unsigned int sharedMemBytes, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaLaunchCooperativeKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ) using hipError_t hipLaunchCooperativeKernel (const void *f, dim3 gridDim, dim3 blockDimX, void **kernelParams, unsigned int sharedMemBytes, hipStream_t stream)\nextern \"C\"  cudaError_t cudaLaunchCooperativeKernel (  const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaLaunchCooperativeKernel call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipLaunchCooperativeKernel(func, gridDim, blockDim, args, sharedMem, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void** devPtr, size_t size)\nextern \"C\" cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc(devPtr, size);\n\n    return hipError_t_TO_c",
      "forcePrediction": false
    },
    "cudaLaunchCooperativeKernelMultiDevice": {
      "cuda": "cudaLaunchCooperativeKernelMultiDevice",
      "hip": "hipLaunchCooperativeKernelMultiDevice",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaLaunchCooperativeKernelMultiDevice",
        "args": "  cudaLaunchParams* launchParamsList, unsigned int  numDevices, unsigned int  flags = 0 ",
        "types": [
          "cudaLaunchParamsundefined",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___module_1ga661fc9f6975de96edd80c78af888a03f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipLaunchCooperativeKernelMultiDevice"
        ],
        "argsstring": [
          "(hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)"
        ],
        "name": [
          "hipLaunchCooperativeKernelMultiDevice"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipLaunchParams",
                    "$": {
                      "refid": "structhip_launch_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "launchParamsList"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "numDevices"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Launches kernels on multiple devices where thread blocks can cooperate and synchronize as they execute. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "launchParamsList",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "List of launch parameters, one per device. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDevices",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Size of the launchParamsList array. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Flags to control launch behavior."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorCooperativeLaunchTooLarge",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aa935871ec793bddb05a16585eb6e7610",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5447",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5447",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipLaunchParams",
          "int",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaLaunchCooperativeKernelMultiDevice (  cudaLaunchParams* launchParamsList, unsigned int  numDevices, unsigned int  flags = 0 )",
      "hipLine": "hipError_t hipLaunchCooperativeKernelMultiDevice (hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)",
      "graft": "// cudaError_t cudaLaunchCooperativeKernelMultiDevice (  cudaLaunchParams* launchParamsList, unsigned int  numDevices, unsigned int  flags = 0 ) using hipError_t hipLaunchCooperativeKernelMultiDevice (hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipLaunchParams to cudaLaunchParams\ncudaLaunchParams hipLaunchParams_TO_cudaLaunchParams(hipLaunchParams);\n\n// cudaLaunchParams to hipLaunchParams\nhipLaunchParams cudaLaunchParams_TO_hipLaunchParams(cudaLaunchParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaLaunchCooperativeKernelMultiDevice (  cudaLaunchParams* launchParamsList, unsigned int  numDevices, unsigned int  flags = 0 ) using hipError_t hipLaunchCooperativeKernelMultiDevice (hipLaunchParams *launchParamsList, int numDevices, unsigned int flags)\nextern \"C\"  cudaError_t cudaLaunchCooperativeKernelMultiDevice (  cudaLaunchParams* launchParamsList, unsigned int  numDevices, unsigned int  flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaLaunchCooperativeKernelMultiDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipLaunchCooperativeKernelMultiDevice (launchParamsList, numDevices, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaLaunchCooperativeKernel (  const void* f, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ) using hipError_t hipLaunchCooperativeKernel (const void* f, dim3 gridDim, dim3 blockDim, void** args, unsigned int sharedMem = 0, hipStream_t stream = 0)\nextern \"C\"  cudaError_t cudaLaunchCooperativeKernel (  const void* f, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t",
      "forcePrediction": false
    },
    "cudaLaunchHostFunc": {
      "cuda": "cudaLaunchHostFunc",
      "hip": "hipLaunchHostFunc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaLaunchHostFunc",
        "args": "  cudaStream_t stream, cudaHostFn_t fn, void* userData ",
        "types": [
          "cudaStream_t",
          "cudaHostFn_t",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___clang_1ga154cd475c8e1b9e623981fc165c543a9",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipLaunchHostFunc"
        ],
        "argsstring": [
          "(hipStream_t stream, hipHostFn_t fn, void *userData)"
        ],
        "name": [
          "hipLaunchHostFunc"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipHostFn_t",
                    "$": {
                      "refid": "group___global_defs_1ga6b1ea90b2fea2d4c62eb351e1ed44f93",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "fn"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "userData"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Enqueues a host function call in a stream. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- stream to enqueue work to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "fn",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- function to call once operations enqueued preceeding are complete. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "userData",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- User-specified data to be passed to the function. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidResourceHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5730",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5730",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipStream_t",
          "hipHostFn_t",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaLaunchHostFunc (  cudaStream_t stream, cudaHostFn_t fn, void* userData )",
      "hipLine": "hipError_t hipLaunchHostFunc (hipStream_t stream, hipHostFn_t fn, void *userData)",
      "graft": "// cudaError_t cudaLaunchHostFunc (  cudaStream_t stream, cudaHostFn_t fn, void* userData ) using hipError_t hipLaunchHostFunc (hipStream_t stream, hipHostFn_t fn, void *userData)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaHostFn_t to hipHostFn_t\nhipHostFn_t cudaHostFn_t_TO_hipHostFn_t(cudaHostFn_t);\n\n// hipHostFn_t to cudaHostFn_t\ncudaHostFn_t hipHostFn_t_TO_cudaHostFn_t(hipHostFn_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaLaunchHostFunc (  cudaStream_t stream, cudaHostFn_t fn, void* userData ) using hipError_t hipLaunchHostFunc (hipStream_t stream, hipHostFn_t fn, void *userData)\nextern \"C\"  cudaError_t cudaLaunchHostFunc (  cudaStream_t stream, cudaHostFn_t fn, void* userData )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaLaunchHostFunc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipLaunchHostFunc(cudaStream_t_TO_hipStream_t(stream), cudaHostFn_t_TO_hipHostFn_t(fn), userData);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDevice ( int device ) using hipError_t hipSetDevice (int device)\nextern \"C\" cudaError_t cudaSetDevice ( int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaSetDevice call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipSetDevice(device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDeviceFlags ( unsigned int flags ) using hipError_t hipSetDeviceFlags (",
      "forcePrediction": false
    },
    "cudaLaunchKernel": {
      "cuda": "cudaLaunchKernel",
      "hip": "hipLaunchKernel",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaLaunchKernel",
        "args": "  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "dim3",
          "voidundefined*",
          "size_t",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___clang_1ga4421a399434f41a1679a84fec3685829",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipLaunchKernel"
        ],
        "argsstring": [
          "(const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream)"
        ],
        "name": [
          "hipLaunchKernel"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "function_address"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "dim3",
                    "$": {
                      "refid": "structdim3",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "numBlocks"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "dim3",
                    "$": {
                      "refid": "structdim3",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "dimBlocks"
            ]
          },
          {
            "type": [
              "void **"
            ],
            "declname": [
              "args"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sharedMemBytes"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "C compliant kernel launch API. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "function_address",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- kernel stub function pointer. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numBlocks",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- number of blocks "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dimBlocks",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- dimension of a block "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "args",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- kernel arguments "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sharedMemBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Amount of dynamic shared memory to allocate for this kernel. The HIP-Clang compiler provides support for extern shared declarations. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream where the kernel should be dispatched. May be 0, in which case th default stream is used with associated synchronization rules."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5712",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5712",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "dim3",
          "void undefined*",
          "size_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaLaunchKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipLaunchKernel (const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream)",
      "graft": "// cudaError_t cudaLaunchKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ) using hipError_t hipLaunchKernel (const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaLaunchKernel (  const T* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem = 0, cudaStream_t stream = 0 ) using hipError_t hipLaunchKernel (const void *function_address, dim3 numBlocks, dim3 dimBlocks, void **args, size_t sharedMemBytes, hipStream_t stream)\nextern \"C\"  cudaError_t cudaLaunchKernel (  const void* func, dim3 gridDim, dim3 blockDim, void** args, size_t sharedMem, cudaStream_t stream)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaLaunchKernel call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipLaunchKernel(func, gridDim, blockDim, args, sharedMem, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void** devPtr, size_t size)\nextern \"C\" cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc(devPtr, size);\n\n    return hipError_t_TO_cudaError_t(hipError);\n",
      "forcePrediction": false
    },
    "cudaOccupancyMaxActiveBlocksPerMultiprocessor": {
      "cuda": "cudaOccupancyMaxActiveBlocksPerMultiprocessor",
      "hip": "hipOccupancyMaxActiveBlocksPerMultiprocessor",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaOccupancyMaxActiveBlocksPerMultiprocessor",
        "args": "  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize ",
        "types": [
          "intundefined",
          "T",
          "int",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___occupancy_1ga59c488f35b0ba4b4938ba16e1a7ed7ec",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessor"
        ],
        "argsstring": [
          "(int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk)"
        ],
        "name": [
          "hipOccupancyMaxActiveBlocksPerMultiprocessor"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "numBlocks"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "f"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "blockSize"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dynSharedMemPerBlk"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns occupancy for a device function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numBlocks",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned occupancy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "f",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Kernel function for which occupancy is calulated "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "blockSize",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Block size the kernel is intended to be launched with "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dynSharedMemPerBlk",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Dynamic shared memory usage (in bytes) intended for each block "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5544",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5544",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "const void undefined",
          "int",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize )",
      "hipLine": "hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessor (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk)",
      "graft": "// cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize ) using hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessor (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize ) using hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessor (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk)\nextern \"C\"  cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor (  int* numBlocks, void* func, int  blockSize, size_t dynamicSMemSize )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaOccupancyMaxActiveBlocksPerMultiprocessor call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipOccupancyMaxActiveBlocksPerMultiprocessor (numBlocks, func, blockSize, dynamicSMemSize);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxPotentialBlockSize ( int* minGridSize, int* blockSize, T func,  size_t dynamicSMemSize, int blockSizeLimit ) using hipError_t hipOccupancyMaxPotentialBlockSize (int *minGridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)\nextern \"C\" cudaError_t cudaOccupancyMaxPotentialBlockSize ( int* minGridSize, int* blockSize, void* func,  size_t dynamicSMemSize",
      "forcePrediction": false
    },
    "cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags": {
      "cuda": "cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags",
      "hip": "hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags",
        "args": "  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize, unsigned int  flags ",
        "types": [
          "intundefined",
          "T",
          "int",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___occupancy_1ga137f983b7da9d96ecee675dcc9eee86d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
        ],
        "argsstring": [
          "(int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)"
        ],
        "name": [
          "hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "numBlocks"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "f"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "blockSize"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dynSharedMemPerBlk"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns occupancy for a device function. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numBlocks",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned occupancy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "f",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Kernel function for which occupancy is calulated "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "blockSize",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Block size the kernel is intended to be launched with "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dynSharedMemPerBlk",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Dynamic shared memory usage (in bytes) intended for each block "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Extra flags for occupancy calculation (currently ignored) "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5556",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5556",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "const void undefined",
          "int",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize, unsigned int  flags )",
      "hipLine": "hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)",
      "graft": "// cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize, unsigned int  flags ) using hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (  int* numBlocks, T func, int  blockSize, size_t dynamicSMemSize, unsigned int  flags ) using hipError_t hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (int *numBlocks, const void *f, int blockSize, size_t dynSharedMemPerBlk, unsigned int flags)\nextern \"C\"  cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (  int* numBlocks, void* func, int  blockSize, size_t dynamicSMemSize, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipOccupancyMaxActiveBlocksPerMultiprocessorWithFlags (numBlocks, func, blockSize, dynamicSMemSize, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxPotentialBlockSize ( int* minGridSize, int* blockSize, T func, int blockSizeToDynamicSMemSize, int  blockSizeLimit ) using hipError_t hipOccupancyMaxPotentialBlockSize (int *minGridSize, int *blockSize, const void *f, int blockSizeToDynamicSMemSize, int  blockSizeLimit)\nextern \"C\"  cudaError_t cudaOccupancyMaxPotentialBlockSize ( int* minGridSize, int* block",
      "forcePrediction": false
    },
    "cudaOccupancyMaxPotentialBlockSize": {
      "cuda": "cudaOccupancyMaxPotentialBlockSize",
      "hip": "hipOccupancyMaxPotentialBlockSize",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaOccupancyMaxPotentialBlockSize",
        "args": "  int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int  blockSizeLimit = 0 ",
        "types": [
          "intundefined",
          "T",
          "size_t",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___occupancy_1ga68a4c477d2e4f769bdb090d0b10bbe66",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipOccupancyMaxPotentialBlockSize"
        ],
        "argsstring": [
          "(int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)"
        ],
        "name": [
          "hipOccupancyMaxPotentialBlockSize"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "gridSize"
            ]
          },
          {
            "type": [
              "int *"
            ],
            "declname": [
              "blockSize"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "f"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dynSharedMemPerBlk"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "blockSizeLimit"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "determine the grid and block sizes to achieves maximum occupancy for a kernel "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nPlease note, HIP does not support kernel launch with total work items defined in dimension with size gridDim x blockDim >= 2^32.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "gridSize",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "minimum grid size for maximum potential occupancy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "blockSize",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "block size for maximum potential occupancy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "f",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "kernel function for which occupancy is calulated "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dynSharedMemPerBlk",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "dynamic shared memory usage (in bytes) intended for each block "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "blockSizeLimit",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "the maximum block size for the kernel, use 0 for no limit"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5572",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5572",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "const void undefined",
          "size_t",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaOccupancyMaxPotentialBlockSize (  int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int  blockSizeLimit = 0 )",
      "hipLine": "hipError_t hipOccupancyMaxPotentialBlockSize (int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)",
      "graft": "// cudaError_t cudaOccupancyMaxPotentialBlockSize (  int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int  blockSizeLimit = 0 ) using hipError_t hipOccupancyMaxPotentialBlockSize (int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxPotentialBlockSize (  int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int  blockSizeLimit = 0 ) using hipError_t hipOccupancyMaxPotentialBlockSize (int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)\nextern \"C\"  cudaError_t cudaOccupancyMaxPotentialBlockSize (  int* minGridSize, int* blockSize, void* func, size_t dynamicSMemSize, int  blockSizeLimit )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaOccupancyMaxPotentialBlockSize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipOccupancyMaxPotentialBlockSize(minGridSize, blockSize, func, dynamicSMemSize, blockSizeLimit);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags (  int* minGridSize, int* blockSize, T func, size_t dynamicSMemSize = 0, int  blockSizeLimit = 0, unsigned int  flags = 0 ) using hipError_t hipOccupancyMaxPotentialBlockSize (int *gridSize, int *blockSize, const void *f, size_t dynSharedMemPerBlk, int blockSizeLimit)\nextern \"C\"  cudaError_t cudaOccupancyMaxPotentialBlockSizeWithFlags (  int* minGridSize",
      "forcePrediction": false
    },
    "cudaArrayGetInfo": {
      "cuda": "cudaArrayGetInfo",
      "hip": "hipArrayGetInfo",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaArrayGetInfo",
        "args": "  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array ",
        "types": [
          "cudaChannelFormatDescundefined",
          "cudaExtentundefined",
          "unsigned",
          "cudaArray_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga9f67e594f3d410393b312ade84044597",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipArrayGetInfo"
        ],
        "argsstring": [
          "(hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)"
        ],
        "name": [
          "hipArrayGetInfo"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipChannelFormatDesc",
                    "$": {
                      "refid": "structhip_channel_format_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipExtent",
                    "$": {
                      "refid": "structhip_extent",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extent"
            ]
          },
          {
            "type": [
              "unsigned int *"
            ],
            "declname": [
              "flags"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets info about the specified array. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returned array type "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extent",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returned array shape. 2D arrays will have depth of zero "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returned array flags "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The HIP array to get info for"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1aeb3d4c53136bc4d018316afb760a0611",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipArrayGetDescriptor",
                            "$": {
                              "refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipArray3DGetDescriptor",
                            "$": {
                              "refid": "group___memory_1ga68d59254ab8994d3f61063bb57bf5498",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4460",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4460",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipChannelFormatDesc",
          "hipExtent",
          "unsigned int undefined",
          "hipArray_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array )",
      "hipLine": "hipError_t hipArrayGetInfo (hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)",
      "graft": "// cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array ) using hipError_t hipArrayGetInfo (hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\nundefined\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n\n// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n\n// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n\n// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array ) using hipError_t hipArrayGetInfo (hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)\nextern \"C\"  cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaArrayGetInfo call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipArrayGetInfo (desc, extent, flags, hipArray_t_TO_cudaArray_t(array));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array ) using hipError_t hipArrayGetInfo (hipChannelFormatDesc *desc, hipExtent *extent, unsigned int *flags, hipArray_t array)\nextern \"C\"  cudaError_t cudaArrayGetInfo (  cudaChannelFormatDesc* desc, cudaExtent* extent, unsigned int* flags, cudaArray_t array )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaArrayGetInfo call\" << std::endl;\n    // Translate the call to",
      "forcePrediction": false
    },
    "cudaFreeArray": {
      "cuda": "cudaFreeArray",
      "hip": "hipFreeArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFreeArray",
        "args": "  cudaArray_t array ",
        "types": [
          "cudaArray_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFreeArray"
        ],
        "argsstring": [
          "(hipArray_t array)"
        ],
        "name": [
          "hipFreeArray"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Frees an array on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to array to free "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMalloc",
                            "$": {
                              "refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocPitch",
                            "$": {
                              "refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocArray",
                            "$": {
                              "refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostFree",
                            "$": {
                              "refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4434",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4434",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFreeArray (  cudaArray_t array )",
      "hipLine": "hipError_t hipFreeArray (hipArray_t array)",
      "graft": "// cudaError_t cudaFreeArray (  cudaArray_t array ) using hipError_t hipFreeArray (hipArray_t array)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeArray (  cudaArray_t array ) using hipError_t hipFreeArray (hipArray_t array)\nextern \"C\"  cudaError_t cudaFreeArray (  cudaArray_t array )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFreeArray(cudaArray_t_TO_hipArray_t(array));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocArray (  cudaArray_t* array, const struct cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags = 0 ) using hipError_t hipMallocArray (hipArray_t* array, const struct hipChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags = 0 )\nextern \"C\" cudaError_t cudaMallocArray (  cudaArray_t* array, const struct cudaChannelFormatDesc* desc, size_t width, size_t height, unsigned int flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n",
      "forcePrediction": false
    },
    "cudaFreeHost": {
      "cuda": "cudaFreeHost",
      "hip": "hipHostFree",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFreeHost",
        "args": "  void* ptr ",
        "types": [
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostFree"
        ],
        "argsstring": [
          "(void *ptr)"
        ],
        "name": [
          "hipHostFree"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "ptr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              {
                "_": "Free memory allocated by the hcc hip host memory allocation API This API performs an implicit  call. If pointer is NULL, the hip runtime is initialized and hipSuccess is returned. ",
                "ref": [
                  {
                    "_": "hipDeviceSynchronize()",
                    "$": {
                      "refid": "group___device_1gaefdc2847fb1d6c3fb1354e827a191ebd",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to memory to be freed "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  (if pointer is invalid, including device pointers allocated with hipMalloc)",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMalloc",
                            "$": {
                              "refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocPitch",
                            "$": {
                              "refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocArray",
                            "$": {
                              "refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeArray",
                            "$": {
                              "refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMalloc3D",
                            "$": {
                              "refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMalloc3DArray",
                            "$": {
                              "refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3875",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3875",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFreeHost (  void* ptr )",
      "hipLine": "hipError_t hipHostFree (void *ptr)",
      "graft": "// cudaError_t cudaFreeHost (  void* ptr ) using hipError_t hipHostFree (void *ptr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeHost (  void* ptr ) using hipError_t hipHostFree (void *ptr)\nextern \"C\"  cudaError_t cudaFreeHost (  void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeHost call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostFree (ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFree ( void* devPtr ) using hipError_t hipFree (void *devPtr)\nextern \"C\"  cudaError_t cudaFree ( void* devPtr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFree call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFree (devPtr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void **devPtr, size_t size)\nextern \"C\"  cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBO",
      "forcePrediction": false
    },
    "cudaFreeMipmappedArray": {
      "cuda": "cudaFreeMipmappedArray",
      "hip": "hipFreeMipmappedArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFreeMipmappedArray",
        "args": "  cudaMipmappedArray_t mipmappedArray ",
        "types": [
          "cudaMipmappedArray_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1ga0255fc720bfe4164717b99dbd7c954c4",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFreeMipmappedArray"
        ],
        "argsstring": [
          "(hipMipmappedArray_t mipmappedArray)"
        ],
        "name": [
          "hipFreeMipmappedArray"
        ],
        "param": [
          {
            "type": [
              "hipMipmappedArray_t"
            ],
            "declname": [
              "mipmappedArray"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Frees a mipmapped array on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mipmappedArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to mipmapped array to free"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Windows, under development on Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5956",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5956",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMipmappedArray_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFreeMipmappedArray (  cudaMipmappedArray_t mipmappedArray )",
      "hipLine": "hipError_t hipFreeMipmappedArray (hipMipmappedArray_t mipmappedArray)",
      "graft": "// cudaError_t cudaFreeMipmappedArray (  cudaMipmappedArray_t mipmappedArray ) using hipError_t hipFreeMipmappedArray (hipMipmappedArray_t mipmappedArray)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMipmappedArray_t to hipMipmappedArray_t\nhipMipmappedArray_t cudaMipmappedArray_t_TO_hipMipmappedArray_t(cudaMipmappedArray_t);\n\n// hipMipmappedArray_t to cudaMipmappedArray_t\ncudaMipmappedArray_t hipMipmappedArray_t_TO_cudaMipmappedArray_t(hipMipmappedArray_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeMipmappedArray (  cudaMipmappedArray_t mipmappedArray ) using hipError_t hipFreeMipmappedArray (hipMipmappedArray_t mipmappedArray)\nextern \"C\"  cudaError_t cudaFreeMipmappedArray (  cudaMipmappedArray_t mipmappedArray )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeMipmappedArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFreeMipmappedArray(cudaMipmappedArray_t_TO_hipMipmappedArray_t(mipmappedArray));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags ) using hipError_t hipMallocMipmappedArray (hipMipmappedArray_t* mipmappedArray, const struct hipChannelFormatDesc* desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags )\nextern \"C\"  cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const struct c",
      "forcePrediction": false
    },
    "cudaGetMipmappedArrayLevel": {
      "cuda": "cudaGetMipmappedArrayLevel",
      "hip": "hipGetMipmappedArrayLevel",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetMipmappedArrayLevel",
        "args": "  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level ",
        "types": [
          "cudaArray_tundefined",
          "cudaMipmappedArray_const_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1ga1ecc39df7764a7dcd5dad7149ffb2bc5",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetMipmappedArrayLevel"
        ],
        "argsstring": [
          "(hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)"
        ],
        "name": [
          "hipGetMipmappedArrayLevel"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "levelArray"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMipmappedArray_const_t",
                    "$": {
                      "refid": "driver__types_8h_1ad3a2249d04845db4cddf271c474058f6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mipmappedArray"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "level"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets a mipmap level of a HIP mipmapped array. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "levelArray",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returned mipmap level HIP array "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mipmappedArray",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- HIP mipmapped array "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "level",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Mipmap level"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Windows, under development on Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5970",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5970",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "hipMipmappedArray_const_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level )",
      "hipLine": "hipError_t hipGetMipmappedArrayLevel (hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)",
      "graft": "// cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level ) using hipError_t hipGetMipmappedArrayLevel (hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaMipmappedArray_const_t to hipMipmappedArray_const_t\nhipMipmappedArray_const_t cudaMipmappedArray_const_t_TO_hipMipmappedArray_const_t(cudaMipmappedArray_const_t);\n\n// hipMipmappedArray_const_t to cudaMipmappedArray_const_t\ncudaMipmappedArray_const_t hipMipmappedArray_const_t_TO_cudaMipmappedArray_const_t(hipMipmappedArray_const_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level ) using hipError_t hipGetMipmappedArrayLevel (hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)\nextern \"C\"  cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetMipmappedArrayLevel call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetMipmappedArrayLevel (levelArray, hipMipmappedArray_const_t_TO_hipMipmappedArray_const_t(mipmappedArray), level);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int  level ) using hipError_t hipGetMipmappedArrayLevel (hipArray_t *levelArray, hipMipmappedArray_const_t mipmappedArray, unsigned int level)\nextern \"C\"  cudaError_t cudaGetMipmappedArrayLevel (  cudaArray_t* levelArray, cudaMipmappedArray",
      "forcePrediction": false
    },
    "cudaGetSymbolAddress": {
      "cuda": "cudaGetSymbolAddress",
      "hip": "hipGetSymbolAddress",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetSymbolAddress",
        "args": "  void** devPtr, const T& symbol ",
        "types": [
          "voidundefined*",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gaecac468bcedcfb139058df2d83d38987",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetSymbolAddress"
        ],
        "argsstring": [
          "(void **devPtr, const void *symbol)"
        ],
        "name": [
          "hipGetSymbolAddress"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "devPtr"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets device pointer associated with symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "devPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the device associated the symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the symbole of the device"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4061",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4061",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetSymbolAddress (  void** devPtr, const T& symbol )",
      "hipLine": "hipError_t hipGetSymbolAddress (void **devPtr, const void *symbol)",
      "graft": "// cudaError_t cudaGetSymbolAddress (  void** devPtr, const T& symbol ) using hipError_t hipGetSymbolAddress (void **devPtr, const void *symbol)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetSymbolAddress (  void** devPtr, const T& symbol ) using hipError_t hipGetSymbolAddress (void **devPtr, const void *symbol)\nextern \"C\"  cudaError_t cudaGetSymbolAddress (  void** devPtr, const void* symbol )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetSymbolAddress call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetSymbolAddress(devPtr, symbol);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetSymbolSize (  size_t* size, const T& symbol ) using hipError_t hipGetSymbolSize (size_t* size, const void* symbol)\nextern \"C\"  cudaError_t cudaGetSymbolSize (  size_t* size, const void* symbol )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetSymbolSize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetSymbolSize(size, symbol);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device ) using hipError_t hipGetDevice",
      "forcePrediction": false
    },
    "cudaGetSymbolSize": {
      "cuda": "cudaGetSymbolSize",
      "hip": "hipGetSymbolSize",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetSymbolSize",
        "args": "  size_t* size, const T& symbol ",
        "types": [
          "size_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gae61bb9a71f0fe9b3eee29336d6b83d97",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetSymbolSize"
        ],
        "argsstring": [
          "(size_t *size, const void *symbol)"
        ],
        "name": [
          "hipGetSymbolSize"
        ],
        "param": [
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets the size of the given symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the device symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the size"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4074",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4074",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "size_t undefined",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetSymbolSize (  size_t* size, const T& symbol )",
      "hipLine": "hipError_t hipGetSymbolSize (size_t *size, const void *symbol)",
      "graft": "// cudaError_t cudaGetSymbolSize (  size_t* size, const T& symbol ) using hipError_t hipGetSymbolSize (size_t *size, const void *symbol)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetSymbolSize (  size_t* size, const T& symbol ) using hipError_t hipGetSymbolSize (size_t *size, const void *symbol)\nextern \"C\"  cudaError_t cudaGetSymbolSize (  size_t* size, const void* symbol )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetSymbolSize call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetSymbolSize(size, symbol);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetSymbolAddress ( void** devPtr, const T& symbol ) using hipError_t hipGetSymbolAddress (void** devPtr, const void* symbol)\nextern \"C\"  cudaError_t cudaGetSymbolAddress ( void** devPtr, const void* symbol )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetSymbolAddress call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetSymbolAddress(devPtr, symbol);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (struct hipDevice",
      "forcePrediction": false
    },
    "cudaHostAlloc": {
      "cuda": "cudaHostAlloc",
      "hip": "hipHostAlloc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaHostAlloc",
        "args": "  void** pHost, size_t size, unsigned int  flags ",
        "types": [
          "voidundefined*",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga0e35f3397f6ea9c3f47a17461ae01231",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostAlloc"
        ],
        "argsstring": [
          "(void **ptr, size_t size, unsigned int flags)"
        ],
        "name": [
          "hipHostAlloc"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocate device accessible page locked host memory [Deprecated]. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the allocated host pinned memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested memory size in bytes "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of host memory allocation"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      {
                        "_": "This API is deprecated, use  instead ",
                        "ref": [
                          {
                            "_": "hipHostMalloc()",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3724",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3724",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaHostAlloc (  void** pHost, size_t size, unsigned int  flags )",
      "hipLine": "hipError_t hipHostAlloc (void **ptr, size_t size, unsigned int flags)",
      "graft": "// cudaError_t cudaHostAlloc (  void** pHost, size_t size, unsigned int  flags ) using hipError_t hipHostAlloc (void **ptr, size_t size, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostAlloc (  void** pHost, size_t size, unsigned int  flags ) using hipError_t hipHostAlloc (void **ptr, size_t size, unsigned int flags)\nextern \"C\"  cudaError_t cudaHostAlloc (  void** pHost, size_t size, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostAlloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostAlloc (pHost, size, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags ) using hipError_t hipHostGetDevicePointer (void **pDevice, void *pHost, unsigned int flags)\nextern \"C\"  cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostGetDevicePointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostGetDevicePointer (pDevice, pHost, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_",
      "forcePrediction": false
    },
    "cudaHostGetDevicePointer": {
      "cuda": "cudaHostGetDevicePointer",
      "hip": "hipHostGetDevicePointer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaHostGetDevicePointer",
        "args": "  void** pDevice, void* pHost, unsigned int  flags ",
        "types": [
          "voidundefined*",
          "voidundefined",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostGetDevicePointer"
        ],
        "argsstring": [
          "(void **devPtr, void *hstPtr, unsigned int flags)"
        ],
        "name": [
          "hipHostGetDevicePointer"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "devPtr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "hstPtr"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Get Device pointer from Host Pointer allocated through hipHostMalloc. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "devPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Device Pointer mapped to passed host pointer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hstPtr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Host Pointer allocated through hipHostMalloc "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Flags to be passed for extension"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSetDeviceFlags",
                            "$": {
                              "refid": "group___device_1ga6e54db382768827e84725632018307aa",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3736",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3736",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "void undefined",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags )",
      "hipLine": "hipError_t hipHostGetDevicePointer (void **devPtr, void *hstPtr, unsigned int flags)",
      "graft": "// cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags ) using hipError_t hipHostGetDevicePointer (void **devPtr, void *hstPtr, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags ) using hipError_t hipHostGetDevicePointer (void **devPtr, void *hstPtr, unsigned int flags)\nextern \"C\"  cudaError_t cudaHostGetDevicePointer (  void** pDevice, void* pHost, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostGetDevicePointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostGetDevicePointer (pDevice, pHost, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetFlags ( int* pFlags, void* pHost ) using hipError_t hipHostGetFlags (unsigned int* flagsPtr, void* hostPtr)\nextern \"C\" cudaError_t cudaHostGetFlags ( int* pFlags, void* pHost )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostGetFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostGetFlags (pFlags, pHost);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostRegister ( void* ptr, size_t size, unsigned int  flags",
      "forcePrediction": false
    },
    "cudaHostGetFlags": {
      "cuda": "cudaHostGetFlags",
      "hip": "hipHostGetFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaHostGetFlags",
        "args": "  unsigned int* pFlags, void* pHost ",
        "types": [
          "unsigned",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga4d26915873b3e3534ceb4dc310f8709a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostGetFlags"
        ],
        "argsstring": [
          "(unsigned int *flagsPtr, void *hostPtr)"
        ],
        "name": [
          "hipHostGetFlags"
        ],
        "param": [
          {
            "type": [
              "unsigned int *"
            ],
            "declname": [
              "flagsPtr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "hostPtr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Return flags associated with host pointer. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flagsPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory location to store flags "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hostPtr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Host Pointer allocated through hipHostMalloc "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3746",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3746",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "unsigned int undefined",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaHostGetFlags (  unsigned int* pFlags, void* pHost )",
      "hipLine": "hipError_t hipHostGetFlags (unsigned int *flagsPtr, void *hostPtr)",
      "graft": "// cudaError_t cudaHostGetFlags (  unsigned int* pFlags, void* pHost ) using hipError_t hipHostGetFlags (unsigned int *flagsPtr, void *hostPtr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetFlags (  unsigned int* pFlags, void* pHost ) using hipError_t hipHostGetFlags (unsigned int *flagsPtr, void *hostPtr)\nextern \"C\"  cudaError_t cudaHostGetFlags (  unsigned int* pFlags, void* pHost )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostGetFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostGetFlags (pFlags, pHost);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetDevicePointer ( void** pDevice, void* pHost, unsigned int flags ) using hipError_t hipHostGetDevicePointer (void** devicePtr, void* hostPtr, unsigned int flags)\nextern \"C\" cudaError_t cudaHostGetDevicePointer ( void** pDevice, void* pHost, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostGetDevicePointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostGetDevicePointer (pDevice, pHost, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostAlloc ( void** p",
      "forcePrediction": false
    },
    "cudaHostRegister": {
      "cuda": "cudaHostRegister",
      "hip": "hipHostRegister",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaHostRegister",
        "args": "  void* ptr, size_t size, unsigned int  flags ",
        "types": [
          "voidundefined",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostRegister"
        ],
        "argsstring": [
          "(void *hostPtr, size_t sizeBytes, unsigned int flags)"
        ],
        "name": [
          "hipHostRegister"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "hostPtr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Register host memory so it can be accessed from the current device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nFlags:\n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hostPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to host memory to be registered. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Size of the host memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "See below."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "itemizedlist": [
                  {
                    "listitem": [
                      {
                        "para": [
                          {
                            "_": " Memory is Mapped and Portable",
                            "ref": [
                              {
                                "_": "hipHostRegisterDefault",
                                "$": {
                                  "refid": "group___global_defs_1gac7c100d241ff84ad10109bb00b7b25dc",
                                  "kindref": "member"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " Memory is considered registered by all contexts. HIP only supports one context so this is always assumed true.",
                            "ref": [
                              {
                                "_": "hipHostRegisterPortable",
                                "$": {
                                  "refid": "group___global_defs_1ga2db444f2315d412d3c7ba80ec6049583",
                                  "kindref": "member"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " Map the allocation into the address space for the current device. The device pointer can be obtained with .",
                            "ref": [
                              {
                                "_": "hipHostRegisterMapped",
                                "$": {
                                  "refid": "group___global_defs_1gacfa4edcfcb39fc61bff6bdecb14d7618",
                                  "kindref": "member"
                                }
                              },
                              {
                                "_": "hipHostGetDevicePointer",
                                "$": {
                                  "refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
                                  "kindref": "member"
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "_": "After registering the memory, use  to obtain the mapped device pointer. On many systems, the mapped device pointer will have a different value than the mapped host pointer. Applications must use the device pointer in device code, and the host pointer in device code.",
                "ref": [
                  {
                    "_": "hipHostGetDevicePointer",
                    "$": {
                      "refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
                      "kindref": "member"
                    }
                  }
                ]
              },
              "On some systems, registered memory is pinned. On some systems, registered memory may not be actually be pinned but uses OS or hardware facilities to all GPU access to the host memory.",
              "Developers are strongly encouraged to register memory blocks which are aligned to the host cache-line size. (typically 64-bytes but can be obtains from the CPUID instruction).",
              "If registering non-aligned pointers, the application must take care when register pointers from the same cache line on different devices. HIP's coarse-grained synchronization model does not guarantee correct results if different devices write to different parts of the same cache block - typically one of the writes will \"win\" and overwrite data from the other registered memory region.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipHostUnregister",
                            "$": {
                              "refid": "group___memory_1ga4c9e1810b9f5858d36c4d28c91c86924",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostGetFlags",
                            "$": {
                              "refid": "group___memory_1ga4d26915873b3e3534ceb4dc310f8709a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostGetDevicePointer",
                            "$": {
                              "refid": "group___memory_1ga8fa7a0478020b835a24785cd6bb89725",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3783",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3783",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int  flags )",
      "hipLine": "hipError_t hipHostRegister (void *hostPtr, size_t sizeBytes, unsigned int flags)",
      "graft": "// cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int  flags ) using hipError_t hipHostRegister (void *hostPtr, size_t sizeBytes, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int  flags ) using hipError_t hipHostRegister (void *hostPtr, size_t sizeBytes, unsigned int flags)\nextern \"C\"  cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostRegister call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostRegister (ptr, size, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostUnregister (  void* ptr ) using hipError_t hipHostUnregister (void *hostPtr)\nextern \"C\"  cudaError_t cudaHostUnregister (  void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostUnregister call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostUnregister (ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaSetDevice (  int  device ) using hipError_t hipSetDevice (int device)\nextern \"C\"  cudaError_t cudaSetDevice (  int  device )\n{",
      "forcePrediction": false
    },
    "cudaHostUnregister": {
      "cuda": "cudaHostUnregister",
      "hip": "hipHostUnregister",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaHostUnregister",
        "args": "  void* ptr ",
        "types": [
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga4c9e1810b9f5858d36c4d28c91c86924",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostUnregister"
        ],
        "argsstring": [
          "(void *hostPtr)"
        ],
        "name": [
          "hipHostUnregister"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "hostPtr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Un-register host pointer. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hostPtr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              {
                                "_": "Host pointer previously registered with  ",
                                "ref": [
                                  {
                                    "_": "hipHostRegister",
                                    "$": {
                                      "refid": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
                                      "kindref": "member"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      "Error code"
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipHostRegister",
                            "$": {
                              "refid": "group___memory_1gab8258f051e1a1f7385f794a15300e674",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3792",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3792",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaHostUnregister (  void* ptr )",
      "hipLine": "hipError_t hipHostUnregister (void *hostPtr)",
      "graft": "// cudaError_t cudaHostUnregister (  void* ptr ) using hipError_t hipHostUnregister (void *hostPtr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostUnregister (  void* ptr ) using hipError_t hipHostUnregister (void *hostPtr)\nextern \"C\"  cudaError_t cudaHostUnregister (  void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostUnregister call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostUnregister(ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int flags ) using hipError_t hipHostRegister (void *hostPtr, size_t sizeBytes, unsigned int flags)\nextern \"C\" cudaError_t cudaHostRegister (  void* ptr, size_t size, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaHostRegister call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostRegister(ptr, size, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaHostGetDevicePointer (  void** devicePtr, void* hostPtr, unsigned int flags ) using hipError_t hipHostGetDevice",
      "forcePrediction": false
    },
    "cudaMalloc3D": {
      "cuda": "cudaMalloc3D",
      "hip": "hipMalloc3D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMalloc3D",
        "args": "  cudaPitchedPtr* pitchedDevPtr, cudaExtent extent ",
        "types": [
          "cudaPitchedPtrundefined",
          "cudaExtent",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMalloc3D"
        ],
        "argsstring": [
          "(hipPitchedPtr *pitchedDevPtr, hipExtent extent)"
        ],
        "name": [
          "hipMalloc3D"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipPitchedPtr",
                    "$": {
                      "refid": "structhip_pitched_ptr",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pitchedDevPtr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipExtent",
                    "$": {
                      "refid": "structhip_extent",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extent"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Create a 3D memory pointer on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pitchedDevPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the 3D memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extent",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested extent"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipMallocPitch",
                            "$": {
                              "refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemGetInfo",
                            "$": {
                              "refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4425",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4425",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipPitchedPtr",
          "hipExtent",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMalloc3D (  cudaPitchedPtr* pitchedDevPtr, cudaExtent extent )",
      "hipLine": "hipError_t hipMalloc3D (hipPitchedPtr *pitchedDevPtr, hipExtent extent)",
      "graft": "// cudaError_t cudaMalloc3D (  cudaPitchedPtr* pitchedDevPtr, cudaExtent extent ) using hipError_t hipMalloc3D (hipPitchedPtr *pitchedDevPtr, hipExtent extent)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n\n// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipPitchedPtr to cudaPitchedPtr\ncudaPitchedPtr hipPitchedPtr_TO_cudaPitchedPtr(hipPitchedPtr);\n\n// cudaPitchedPtr to hipPitchedPtr\nhipPitchedPtr cudaPitchedPtr_TO_hipPitchedPtr(cudaPitchedPtr);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3D (  cudaPitchedPtr* pitchedDevPtr, cudaExtent extent ) using hipError_t hipMalloc3D (hipPitchedPtr *pitchedDevPtr, hipExtent extent)\nextern \"C\"  cudaError_t cudaMalloc3D (  cudaPitchedPtr* pitchedDevPtr, cudaExtent extent )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc3D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc3D (  (hipPitchedPtr*) pitchedDevPtr, hipExtent_TO_cudaExtent(extent) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3DArray ( cudaArray** array, const struct cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags = 0 ) using hipError_t hipMalloc3DArray (hipArray** array, const struct hipChannelFormatDesc* desc, hipExtent extent, unsigned int flags = 0 )\nextern \"C\" cudaError_t cudaMalloc3DArray ( cudaArray** array, const struct cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc3DArray call\" << std",
      "forcePrediction": false
    },
    "cudaMalloc3DArray": {
      "cuda": "cudaMalloc3DArray",
      "hip": "hipMalloc3DArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMalloc3DArray",
        "args": "  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ",
        "types": [
          "cudaArray_tundefined",
          "const",
          "cudaExtent",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMalloc3DArray"
        ],
        "argsstring": [
          "(hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)"
        ],
        "name": [
          "hipMalloc3DArray"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          },
          {
            "type": [
              {
                "_": "const struct  *",
                "ref": [
                  {
                    "_": "hipChannelFormatDesc",
                    "$": {
                      "refid": "structhip_channel_format_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc"
            ]
          },
          {
            "type": [
              {
                "_": "struct ",
                "ref": [
                  {
                    "_": "hipExtent",
                    "$": {
                      "refid": "structhip_extent",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extent"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocate an array on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to allocated array in device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested channel format "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extent",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested array allocation width, height and depth "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested properties of allocated array "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMalloc",
                            "$": {
                              "refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocPitch",
                            "$": {
                              "refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeArray",
                            "$": {
                              "refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostFree",
                            "$": {
                              "refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4446",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4446",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "hipChannelFormatDesc",
          "hipExtent",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 )",
      "hipLine": "hipError_t hipMalloc3DArray (hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)",
      "graft": "// cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ) using hipError_t hipMalloc3DArray (hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n\n// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n\n// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ) using hipError_t hipMalloc3DArray (hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)\nextern \"C\"  cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc3DArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc3DArray (array, cudaChannelFormatDesc_TO_hipChannelFormatDesc(*desc), cudaExtent_TO_hipExtent(extent), flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ) using hipError_t hipMalloc3DArray (hipArray_t *array, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int flags)\nextern \"C\"  cudaError_t cudaMalloc3DArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 )\n",
      "forcePrediction": false
    },
    "cudaMallocArray": {
      "cuda": "cudaMallocArray",
      "hip": "hipMallocArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocArray",
        "args": "  cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int  flags = 0 ",
        "types": [
          "cudaArray_tundefined",
          "const",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga8376a0644463118cd96432365bb470e3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocArray"
        ],
        "argsstring": [
          "(hipArray_t *array, const hipChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)"
        ],
        "name": [
          "hipMallocArray"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipChannelFormatDesc",
                    "$": {
                      "refid": "structhip_channel_format_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocate an array on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to allocated array in device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested channel format "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested array allocation width "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested array allocation height "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested properties of allocated array "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMalloc",
                            "$": {
                              "refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocPitch",
                            "$": {
                              "refid": "group___memory_1ga805c7320498926e444616fe090c727ee",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeArray",
                            "$": {
                              "refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostFree",
                            "$": {
                              "refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4381",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4381",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "hipChannelFormatDesc",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int  flags = 0 )",
      "hipLine": "hipError_t hipMallocArray (hipArray_t *array, const hipChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)",
      "graft": "// cudaError_t cudaMallocArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int  flags = 0 ) using hipError_t hipMallocArray (hipArray_t *array, const hipChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n\n// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int  flags = 0 ) using hipError_t hipMallocArray (hipArray_t *array, const hipChannelFormatDesc *desc, size_t width, size_t height, unsigned int flags)\nextern \"C\"  cudaError_t cudaMallocArray (  cudaArray_t* array, const cudaChannelFormatDesc* desc, size_t width, size_t height = 0, unsigned int  flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocArray (array, desc, width, height, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3DArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ) using hipError_t hipMalloc3DArray (hipArray_t *array, const hipChannelFormatDesc *desc, hipExtent extent, unsigned int flags)\nextern \"C\"  cudaError_t cudaMalloc3DArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc3DArray call\"",
      "forcePrediction": false
    },
    "cudaMallocHost": {
      "cuda": "cudaMallocHost",
      "hip": "hipHostMalloc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocHost",
        "args": "  void** ptr, size_t size, unsigned int  flags ",
        "types": [
          "voidundefined*",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipHostMalloc"
        ],
        "argsstring": [
          "(void **ptr, size_t size, unsigned int flags)"
        ],
        "name": [
          "hipHostMalloc"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocates device accessible page locked (pinned) host memory. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "This API allocates pinned host memory which is mapped into the address space of all GPUs in the system, the memory can be accessed directly by the GPU device, and can be read or written with much higher bandwidth than pageable memory obtained with functions such as malloc().",
              "Using the pinned host memory, applications can implement faster data transfers for HostToDevice and DeviceToHost. The runtime tracks the hipHostMalloc allocations and can avoid some of the setup required for regular unpinned memory.",
              "When the memory accesses are infrequent, zero-copy memory can be a good choice, for coherent allocation. GPU can directly access the host memory over the CPU/GPU interconnect, without need to copy the data.",
              "Currently the allocation granularity is 4KB for the API.",
              "Developers need to choose proper allocation flag with consideration of synchronization.",
              {
                "_": "\nIf no input for flags, it will be the default pinned memory allocation on the host.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the allocated host pinned memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested memory size in bytes If size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of host memory allocation"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSetDeviceFlags",
                            "$": {
                              "refid": "group___device_1ga6e54db382768827e84725632018307aa",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostFree",
                            "$": {
                              "refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3145",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3145",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocHost (  void** ptr, size_t size, unsigned int  flags )",
      "hipLine": "hipError_t hipHostMalloc (void **ptr, size_t size, unsigned int flags)",
      "graft": "// cudaError_t cudaMallocHost (  void** ptr, size_t size, unsigned int  flags ) using hipError_t hipHostMalloc (void **ptr, size_t size, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocHost (  void** ptr, size_t size, unsigned int  flags ) using hipError_t hipHostMalloc (void **ptr, size_t size, unsigned int flags)\nextern \"C\"  cudaError_t cudaMallocHost (  void** ptr, size_t size, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocHost call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostMalloc (ptr, size, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeHost (  void* ptr ) using hipError_t hipHostFree (void *ptr)\nextern \"C\"  cudaError_t cudaFreeHost (  void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeHost call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipHostFree (ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc (  void** devPtr, size_t  size ) using hipError_t hipMalloc (void **devPtr, size_t size)\nextern \"C\"  cudaError_t c",
      "forcePrediction": false
    },
    "cudaMallocManaged": {
      "cuda": "cudaMallocManaged",
      "hip": "hipMallocManaged",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocManaged",
        "args": "  T** devPtr, size_t size, unsigned int  flags = cudaMemAttachGlobal ",
        "types": [
          "Tundefined*",
          "size_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1gaadf4780d920bb6f5cc755880740ef7dc",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocManaged"
        ],
        "argsstring": [
          "(void **dev_ptr, size_t size, unsigned int flags)"
        ],
        "name": [
          "hipMallocManaged"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocates memory that will be automatically managed by HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "This API is used for managed memory, allows data be shared and accessible to both CPU and GPU using a single pointer.",
              "The API returns the allocation pointer, managed by HMM, can be used further to execute kernels on device and fetch data between the host and device as needed.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "It is recommend to do the capability check before call this API."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMemoryAllocation",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to allocated device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- requested allocation size in bytes, it should be granularity of 4KB "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- must be either hipMemAttachGlobal or hipMemAttachHost (defaults to hipMemAttachGlobal)"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3178",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3178",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocManaged (  T** devPtr, size_t size, unsigned int  flags = cudaMemAttachGlobal )",
      "hipLine": "hipError_t hipMallocManaged (void **dev_ptr, size_t size, unsigned int flags)",
      "graft": "// cudaError_t cudaMallocManaged (  T** devPtr, size_t size, unsigned int  flags = cudaMemAttachGlobal ) using hipError_t hipMallocManaged (void **dev_ptr, size_t size, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocManaged (  T** devPtr, size_t size, unsigned int  flags = cudaMemAttachGlobal ) using hipError_t hipMallocManaged (void **dev_ptr, size_t size, unsigned int flags)\nextern \"C\"  cudaError_t cudaMallocManaged (  void** devPtr, size_t size, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocManaged call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocManaged(devPtr, size, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFree ( void* devPtr ) using hipError_t hipFree (void* devPtr)\nextern \"C\" cudaError_t cudaFree ( void* devPtr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFree call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFree(devPtr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy ( void* dst, const void* src, size_t count, enum cudaMemcpyKind kind ) using hipError_t hipMemcpy (void* dst, const void* src, size_t sizeBytes,",
      "forcePrediction": false
    },
    "cudaMallocMipmappedArray": {
      "cuda": "cudaMallocMipmappedArray",
      "hip": "hipMallocMipmappedArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocMipmappedArray",
        "args": "  cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  numLevels, unsigned int  flags = 0 ",
        "types": [
          "cudaMipmappedArray_tundefined",
          "const",
          "cudaExtent",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1gace6d42a4c294a5fe5cb9a383aca7eb36",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocMipmappedArray"
        ],
        "argsstring": [
          "(hipMipmappedArray_t *mipmappedArray, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags)"
        ],
        "name": [
          "hipMallocMipmappedArray"
        ],
        "param": [
          {
            "type": [
              "hipMipmappedArray_t *"
            ],
            "declname": [
              "mipmappedArray"
            ]
          },
          {
            "type": [
              {
                "_": "const struct  *",
                "ref": [
                  {
                    "_": "hipChannelFormatDesc",
                    "$": {
                      "refid": "structhip_channel_format_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc"
            ]
          },
          {
            "type": [
              {
                "_": "struct ",
                "ref": [
                  {
                    "_": "hipExtent",
                    "$": {
                      "refid": "structhip_extent",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extent"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "numLevels"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocate a mipmapped array on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mipmappedArray",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to allocated mipmapped array in device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Requested channel format "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extent",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Requested allocation size (width field in elements) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numLevels",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Number of mipmap levels to allocate "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Flags for extensions"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMemoryAllocation",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Windows, under development on Linux. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5939",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5939",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMipmappedArray_t undefined",
          "hipChannelFormatDesc",
          "hipExtent",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  numLevels, unsigned int  flags = 0 )",
      "hipLine": "hipError_t hipMallocMipmappedArray (hipMipmappedArray_t *mipmappedArray, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags)",
      "graft": "// cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  numLevels, unsigned int  flags = 0 ) using hipError_t hipMallocMipmappedArray (hipMipmappedArray_t *mipmappedArray, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n\n// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\nundefined\n// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n\n// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  numLevels, unsigned int  flags = 0 ) using hipError_t hipMallocMipmappedArray (hipMipmappedArray_t *mipmappedArray, const struct hipChannelFormatDesc *desc, struct hipExtent extent, unsigned int numLevels, unsigned int flags)\nextern \"C\"  cudaError_t cudaMallocMipmappedArray (  cudaMipmappedArray_t* mipmappedArray, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  numLevels, unsigned int  flags = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocMipmappedArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocMipmappedArray (mipmappedArray, desc, hipExtent_TO_cudaExtent(extent), numLevels, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc3DArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent extent, unsigned int  flags = 0 ) using hipError_t hipMalloc3DArray (hipArray** array, const struct hipChannelFormatDesc* desc, struct hipExtent extent, unsigned int flags)\nextern \"C\" cudaError_t cudaMalloc3DArray ( cudaArray_t* array, const cudaChannelFormatDesc* desc, cudaExtent",
      "forcePrediction": false
    },
    "cudaMallocPitch": {
      "cuda": "cudaMallocPitch",
      "hip": "hipMallocPitch",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocPitch",
        "args": "  void** devPtr, size_t* pitch, size_t width, size_t height ",
        "types": [
          "voidundefined*",
          "size_tundefined",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga805c7320498926e444616fe090c727ee",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocPitch"
        ],
        "argsstring": [
          "(void **ptr, size_t *pitch, size_t width, size_t height)"
        ],
        "name": [
          "hipMallocPitch"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "ptr"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "pitch"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          }
        ],
        "briefdescription": [
          "\n        "
        ],
        "detaileddescription": [
          {
            "para": [
              "Allocates at least width (in bytes) * height bytes of linear memory Padding may occur to ensure alighnment requirements are met for the given row The change in width size due to padding will be returned in *pitch. Currently the alignment is set to 128 bytes",
              {
                "_": "\nIf size is 0, no memory is allocated, *ptr returns nullptr, and hipSuccess is returned.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the allocated device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pitch",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch for allocation (in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested pitched allocation width (in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Requested pitched allocation height"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      "Error code"
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMalloc",
                            "$": {
                              "refid": "group___memory_1ga4c6fcfe80010069d2792780d00dcead2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFree",
                            "$": {
                              "refid": "group___memory_1ga740d08da65cae1441ba32f8fedb863d1",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocArray",
                            "$": {
                              "refid": "group___memory_1ga8376a0644463118cd96432365bb470e3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeArray",
                            "$": {
                              "refid": "group___memory_1gad6c25b3106fb47a2a75285ff2bd8cb29",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostFree",
                            "$": {
                              "refid": "group___memory_1ga2e543f58ee4544e317cd695d6d82e0a3",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMalloc3D",
                            "$": {
                              "refid": "group___memory_1gad12f684263bbc92690553af2aa918fd9",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMalloc3DArray",
                            "$": {
                              "refid": "group___memory_1ga3be2acb8c75857958ddd1ab949ed4476",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipHostMalloc",
                            "$": {
                              "refid": "group___memory_1gaad40bc7d97ccc799403ef5a9a8c246e1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3811",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3811",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t undefined",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocPitch (  void** devPtr, size_t* pitch, size_t width, size_t height )",
      "hipLine": "hipError_t hipMallocPitch (void **ptr, size_t *pitch, size_t width, size_t height)",
      "graft": "// cudaError_t cudaMallocPitch (  void** devPtr, size_t* pitch, size_t width, size_t height ) using hipError_t hipMallocPitch (void **ptr, size_t *pitch, size_t width, size_t height)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocPitch (  void** devPtr, size_t* pitch, size_t width, size_t height ) using hipError_t hipMallocPitch (void **ptr, size_t *pitch, size_t width, size_t height)\nextern \"C\"  cudaError_t cudaMallocPitch (  void** devPtr, size_t* pitch, size_t width, size_t height )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocPitch call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocPitch(devPtr, pitch, width, height);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void **ptr, size_t size)\nextern \"C\" cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc(devPtr, size);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFree ( void* devPtr ) using hipError_t hipFree (void *",
      "forcePrediction": false
    },
    "cudaMemAdvise": {
      "cuda": "cudaMemAdvise",
      "hip": "hipMemAdvise",
      "cudaFun": {
        "keyword": "devPtr",
        "return": "cudaError_t",
        "name": "cudaMemAdvise",
        "args": "  T* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location ",
        "types": [
          "Tundefined",
          "size_t",
          "cudaMemoryAdvise",
          "cudaMemLocation",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1ga5c8a3ea8a8702747588082ed39ea51bf",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemAdvise"
        ],
        "argsstring": [
          "(const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)"
        ],
        "name": [
          "hipMemAdvise"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemoryAdvise",
                    "$": {
                      "refid": "group___global_defs_1ga2757323c1ac94b1d71f699fcbd5bdc2f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "advice"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Advise about the usage of a given memory range to HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nThis HIP API advises about the usage to be applied on unified memory allocation in the range starting from the pointer address devPtr, with the size of count bytes. The memory range must refer to managed memory allocated via the API hipMallocManaged, and the range will be handled with proper round down and round up respectively in the driver to be aligned to CPU page size, the same way as corresponding CUDA API behaves in CUDA version 8.0 and afterwards.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to memory to set the advice for "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size in bytes of the memory range, it should be CPU page size alligned. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "advice",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "advice to be applied for the specified memory range "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "device to apply the advice for"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux and is under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3216",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3216",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "size_t",
          "hipMemoryAdvise",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemAdvise (  T* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location )",
      "hipLine": "hipError_t hipMemAdvise (const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)",
      "graft": "// cudaError_t cudaMemAdvise (  T* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location ) using hipError_t hipMemAdvise (const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemoryAdvise to hipMemoryAdvise\nhipMemoryAdvise cudaMemoryAdvise_TO_hipMemoryAdvise(cudaMemoryAdvise);\n\n// hipMemoryAdvise to cudaMemoryAdvise\ncudaMemoryAdvise hipMemoryAdvise_TO_cudaMemoryAdvise(hipMemoryAdvise);\n\n// cudaMemLocation to hipMemLocation\nhipMemLocation cudaMemLocation_TO_hipMemLocation(cudaMemLocation);\n\n// hipMemLocation to cudaMemLocation\ncudaMemLocation hipMemLocation_TO_cudaMemLocation(hipMemLocation);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemAdvise (  T* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location ) using hipError_t hipMemAdvise (const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)\nextern \"C\"  cudaError_t cudaMemAdvise (  void* devPtr, size_t count, cudaMemoryAdvise advice, cudaMemLocation location )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemAdvise call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemAdvise(devPtr, count, cudaMemoryAdvise_TO_hipMemoryAdvise(advice), hipMemLocation_TO_hipMemLocation(location));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPrefetchAsync (  T* devPtr, size_t count, int device, cudaStream_t stream ) using hipError_t hipMemPrefetchAsync (const void *dev_ptr, size_t count, int device, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemPrefetchAsync (  void* devPtr, size_t count, int device, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPrefetchAsync call\" << std::endl;\n    // Trans",
      "forcePrediction": false
    },
    "cudaMemGetInfo": {
      "cuda": "cudaMemGetInfo",
      "hip": "hipMemGetInfo",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemGetInfo",
        "args": "  size_t* free, size_t* total ",
        "types": [
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemGetInfo"
        ],
        "argsstring": [
          "(size_t *free, size_t *total)"
        ],
        "name": [
          "hipMemGetInfo"
        ],
        "param": [
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "free"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "total"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query memory info. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "On ROCM, this function gets the actual free memory left on the current device, so supports the cases while running multi-workload (such as multiple processes, multiple threads, and multiple GPUs).",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      "On Windows, the free memory only accounts for memory allocated by this process and may be optimistic."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "free",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns free memory on the current device in bytes "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "total",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns total allocatable memory on the current device in bytes"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4355",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4355",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemGetInfo (  size_t* free, size_t* total )",
      "hipLine": "hipError_t hipMemGetInfo (size_t *free, size_t *total)",
      "graft": "// cudaError_t cudaMemGetInfo (  size_t* free, size_t* total ) using hipError_t hipMemGetInfo (size_t *free, size_t *total)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemGetInfo (  size_t* free, size_t* total ) using hipError_t hipMemGetInfo (size_t *free, size_t *total)\nextern \"C\"  cudaError_t cudaMemGetInfo (  size_t* free, size_t* total )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemGetInfo call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemGetInfo(free, total);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void** devPtr, size_t size)\nextern \"C\" cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc(devPtr, size);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocManaged ( void** devPtr, size_t size, unsigned int flags ) using hipError_t hipMallocManaged (void** devPtr,",
      "forcePrediction": false
    },
    "cudaMemPrefetchAsync": {
      "cuda": "cudaMemPrefetchAsync",
      "hip": "hipMemPrefetchAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPrefetchAsync",
        "args": "  const void* devPtr, size_t count, int  dstDevice, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "size_t",
          "int",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1ga08ca029eec15591f680c7b19b0fb1d1a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPrefetchAsync"
        ],
        "argsstring": [
          "(const void *dev_ptr, size_t count, int device, hipStream_t stream)"
        ],
        "name": [
          "hipMemPrefetchAsync"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Prefetches memory to the specified destination device using HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to be prefetched "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size in bytes for prefetching "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "destination device to prefetch to "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream to enqueue prefetch operation"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3193",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3193",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "size_t",
          "int",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPrefetchAsync (  const void* devPtr, size_t count, int  dstDevice, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipMemPrefetchAsync (const void *dev_ptr, size_t count, int device, hipStream_t stream)",
      "graft": "// cudaError_t cudaMemPrefetchAsync (  const void* devPtr, size_t count, int  dstDevice, cudaStream_t stream = 0 ) using hipError_t hipMemPrefetchAsync (const void *dev_ptr, size_t count, int device, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPrefetchAsync (  const void* devPtr, size_t count, int  dstDevice, cudaStream_t stream = 0 ) using hipError_t hipMemPrefetchAsync (const void *dev_ptr, size_t count, int device, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemPrefetchAsync (  const void* devPtr, size_t count, int  dstDevice, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPrefetchAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPrefetchAsync (devPtr, count, dstDevice, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemAdvise ( const void* devPtr, size_t count, cudaMemoryAdvise advice, int device ) using hipError_t hipMemAdvise (const void *dev_ptr, size_t count, hipMemoryAdvise advice, int device)\nextern \"C\" cudaError_t cudaMemAdvise ( const void* devPtr, size_t count, cudaMemoryAdvise advice, int device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemAdvise call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hip",
      "forcePrediction": false
    },
    "cudaMemRangeGetAttribute": {
      "cuda": "cudaMemRangeGetAttribute",
      "hip": "hipMemRangeGetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemRangeGetAttribute",
        "args": "  void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count ",
        "types": [
          "voidundefined",
          "size_t",
          "cudaMemRangeAttribute",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1gaad1ddb8bc3e1905a5f116dbcdc842ea3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemRangeGetAttribute"
        ],
        "argsstring": [
          "(void *data, size_t data_size, hipMemRangeAttribute attribute, const void *dev_ptr, size_t count)"
        ],
        "name": [
          "hipMemRangeGetAttribute"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "data"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "data_size"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemRangeAttribute",
                    "$": {
                      "refid": "group___global_defs_1ga1e8d4a7cf5d1844fa34e4f9ac3bfcc63",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attribute"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query an attribute of a given memory range in HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "data",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "a pointer to a memory location where the result of each attribute query will be written to "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "data_size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "the size of data "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attribute",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "the attribute to query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "start of the range to query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size of the range to query"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3234",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3234",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "hipMemRangeAttribute",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemRangeGetAttribute (  void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count )",
      "hipLine": "hipError_t hipMemRangeGetAttribute (void *data, size_t data_size, hipMemRangeAttribute attribute, const void *dev_ptr, size_t count)",
      "graft": "// cudaError_t cudaMemRangeGetAttribute (  void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttribute (void *data, size_t data_size, hipMemRangeAttribute attribute, const void *dev_ptr, size_t count)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemRangeAttribute to hipMemRangeAttribute\nhipMemRangeAttribute cudaMemRangeAttribute_TO_hipMemRangeAttribute(cudaMemRangeAttribute);\n\n// hipMemRangeAttribute to cudaMemRangeAttribute\ncudaMemRangeAttribute hipMemRangeAttribute_TO_cudaMemRangeAttribute(hipMemRangeAttribute);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemRangeGetAttribute (  void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttribute (void *data, size_t data_size, hipMemRangeAttribute attribute, const void *dev_ptr, size_t count)\nextern \"C\"  cudaError_t cudaMemRangeGetAttribute (  void* data, size_t dataSize, cudaMemRangeAttribute attribute, const void* devPtr, size_t count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemRangeGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemRangeGetAttribute (data, dataSize, cudaMemRangeAttribute_TO_hipMemRangeAttribute(attribute), devPtr, count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemRangeGetAttributes ( void* data, size_t dataSize, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttributes (void *data, size_t data_size, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)\nextern \"C\"  cudaError_t cudaMemRangeGetAttributes ( void* data, size_t dataSize, cudaMemRangeAttribute* attributes, size_t numAttributes, const void* devPtr, size_t count )\n",
      "forcePrediction": false
    },
    "cudaMemRangeGetAttributes": {
      "cuda": "cudaMemRangeGetAttributes",
      "hip": "hipMemRangeGetAttributes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemRangeGetAttributes",
        "args": "  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count ",
        "types": [
          "voidundefined*",
          "size_tundefined",
          "cudaMemRangeAttribute",
          "size_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_m_1ga4a37d3eac6147dcaa3d0cd3de3268121",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemRangeGetAttributes"
        ],
        "argsstring": [
          "(void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)"
        ],
        "name": [
          "hipMemRangeGetAttributes"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "data"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "data_sizes"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemRangeAttribute",
                    "$": {
                      "refid": "group___global_defs_1ga1e8d4a7cf5d1844fa34e4f9ac3bfcc63",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attributes"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "num_attributes"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query attributes of a given memory range in HIP. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "data",
                                "$": {
                                  "direction": "inout"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "a two-dimensional array containing pointers to memory locations where the result of each attribute query will be written to "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "data_sizes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "an array, containing the sizes of each result "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attributes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "the attribute to query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "num_attributes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "an array of attributes to query (numAttributes and the number of attributes in this array should match) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "start of the range to query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size of the range to query"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3255",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3255",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t undefined",
          "hipMemRangeAttribute",
          "size_t",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count )",
      "hipLine": "hipError_t hipMemRangeGetAttributes (void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)",
      "graft": "// cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttributes (void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemRangeAttribute to hipMemRangeAttribute\nhipMemRangeAttribute cudaMemRangeAttribute_TO_hipMemRangeAttribute(cudaMemRangeAttribute);\n\n// hipMemRangeAttribute to cudaMemRangeAttribute\ncudaMemRangeAttribute hipMemRangeAttribute_TO_cudaMemRangeAttribute(hipMemRangeAttribute);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttributes (void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)\nextern \"C\"  cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemRangeGetAttributes call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemRangeGetAttributes (data, dataSizes, attributes, numAttributes, devPtr, count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* devPtr, size_t count ) using hipError_t hipMemRangeGetAttributes (void **data, size_t *data_sizes, hipMemRangeAttribute *attributes, size_t num_attributes, const void *dev_ptr, size_t count)\nextern \"C\"  cudaError_t cudaMemRangeGetAttributes (  void** data, size_t* dataSizes, cudaMemRangeAttribute ** attributes, size_t numAttributes, const void* dev",
      "forcePrediction": false
    },
    "cudaMemcpy": {
      "cuda": "cudaMemcpy",
      "hip": "hipMemcpy",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy",
        "args": "  void* dst, const void* src, size_t count, cudaMemcpyKind kind ",
        "types": [
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy"
        ],
        "argsstring": [
          "(void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpy"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copy data from src to dst. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "It supports memory from host to device, device to host, device to device and host to host The src and dst must not overlap.",
              "For hipMemcpy, the copy is always performed by the current device (set by hipSetDevice). For multi-gpu or peer-to-peer configurations, it is recommended to set the current device to the device where the src data is physically located. For optimal peer-to-peer copies, the copy device must be able to access the src and dst pointers (by calling hipDeviceEnablePeerAccess with copy agent as the current device and src/dest as the peerDevice argument. if this is not done, the hipMemcpy will still work, but will perform the copy using a staging buffer on the host. Calling hipMemcpy with dst and src pointers that do not match the hipMemcpyKind results in undefined behavior.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data being copy to "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data being copy from "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data size in bytes "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Kind of transfer "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorUnknown",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , hipMemAlloc, , , , , hipMemcpy2DUnaligned, hipMemcpyAtoA, hipMemcpyAtoD, , hipMemcpyAtoHAsync, hipMemcpyDtoA, , , , , , hipMemcpyHtoAAsync, , hipMemFree, hipMemFreeHost, , , hipMemHostAlloc, hipMemHostGetDevicePointer ",
                        "ref": [
                          {
                            "_": "hipArrayCreate",
                            "$": {
                              "refid": "group___memory_1ga3befa5c6aee5b18728e2d96ebc1374b8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipArrayDestroy",
                            "$": {
                              "refid": "group___memory_1gafeb20479f2c8bd50f311b0bdc8869b24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipArrayGetDescriptor",
                            "$": {
                              "refid": "group___memory_1ga6e64255c46778f5839711fe730cc7abc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemAllocHost",
                            "$": {
                              "refid": "group___memory_1gaefab023bb8ec9b13a95b5362ab7c62d2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemAllocPitch",
                            "$": {
                              "refid": "group___memory_1gad44d400532df8e67a6db45027cd05405",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2DAsync",
                            "$": {
                              "refid": "group___memory_1ga6b9eaa58bc332346cb8ed956f8b590ac",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAtoH",
                            "$": {
                              "refid": "group___memory_1gabf833a230a7883199514e3fe7face896",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyDtoD",
                            "$": {
                              "refid": "group___memory_1ga814f245b8918f173c1f2f8c1480f7f93",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyDtoDAsync",
                            "$": {
                              "refid": "group___memory_1gad3bba6016cba62f0e933cdfb4c312d27",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyDtoH",
                            "$": {
                              "refid": "group___memory_1gae61f4e35ff1b9643c6328bc45d091c3f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyDtoHAsync",
                            "$": {
                              "refid": "group___memory_1gad69da1994a646b843fb1fa465dbeb623",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyHtoA",
                            "$": {
                              "refid": "group___memory_1gaaa6b5a61fa58239bb36344b219ed7e2c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyHtoDAsync",
                            "$": {
                              "refid": "group___memory_1gae3e76acb34bed5e3b19b4c1822975bcd",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemGetAddressRange",
                            "$": {
                              "refid": "group___peer_to_peer_1gac7d9132f6e3d102e9b512020e5654f38",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemGetInfo",
                            "$": {
                              "refid": "group___memory_1ga311c3e246a21590de14478b8bd063be2",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3905",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3905",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy (  void* dst, const void* src, size_t count, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipMemcpy (void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpy (  void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipMemcpy (void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy (  void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipMemcpy (void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpy (  void* dst, const void* src, size_t count, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy(dst, src, count, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyAsync (  void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream ) using hipError_t hipMemcpyAsync (void *dst, const void *src, size_t sizeBytes, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpyAsync (  void* dst, const void* src, size_t count, cudaMemcpyKind kind, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpyAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart",
      "forcePrediction": false
    },
    "cudaMemcpy2D": {
      "cuda": "cudaMemcpy2D",
      "hip": "hipMemcpy2D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy2D",
        "args": "  void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ",
        "types": [
          "voidundefined",
          "size_t",
          "const",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy2D"
        ],
        "argsstring": [
          "(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpy2D"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dpitch"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "spitch"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dpitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of destination memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "spitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of source memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Width of matrix transfer (columns in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Height of matrix transfer (rows) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of transfer "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToArray",
                            "$": {
                              "refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2DToArray",
                            "$": {
                              "refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4514",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4514",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "const void undefined",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy2D (  void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipMemcpy2D (void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpy2D (  void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2D (void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2D (  void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2D (void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpy2D (  void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy2D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy2D (dst, dpitch, src, spitch, width, height, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArray ( cudaArray* dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DToArray (hipArray* dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpy2",
      "forcePrediction": false
    },
    "cudaMemcpy2DFromArray": {
      "cuda": "cudaMemcpy2DFromArray",
      "hip": "hipMemcpy2DFromArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy2DFromArray",
        "args": "  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind ",
        "types": [
          "voidundefined",
          "size_t",
          "cudaArray_const_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga9c5763233c9803b8e964881487fc4e60",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy2DFromArray"
        ],
        "argsstring": [
          "(void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpy2DFromArray"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dpitch"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_const_t",
                    "$": {
                      "refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "wOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "hOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dpitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of destination memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "wOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source starting X offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source starting Y offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Width of matrix transfer (columns in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Height of matrix transfer (rows) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of transfer "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2DToArray",
                            "$": {
                              "refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4651",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4651",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "hipArray_const_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy2DFromArray (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipMemcpy2DFromArray (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpy2DFromArray (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DFromArray (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaArray_const_t to hipArray_const_t\nhipArray_const_t cudaArray_const_t_TO_hipArray_const_t(cudaArray_const_t);\n\n// hipArray_const_t to cudaArray_const_t\ncudaArray_const_t hipArray_const_t_TO_cudaArray_const_t(hipArray_const_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DFromArray (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DFromArray (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpy2DFromArray (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy2DFromArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy2DFromArray (dst, dpitch, hipArray_const_t_TO_cudaArray_const_t(src), wOffset, hOffset, width, height, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArray ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DToArray (hipArray_t dst, size_t wOffset, size_t hOffset, const void* src, size",
      "forcePrediction": false
    },
    "cudaMemcpy2DFromArrayAsync": {
      "cuda": "cudaMemcpy2DFromArrayAsync",
      "hip": "hipMemcpy2DFromArrayAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy2DFromArrayAsync",
        "args": "  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ",
        "types": [
          "voidundefined",
          "size_t",
          "cudaArray_const_t",
          "cudaMemcpyKind",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga946fe29e78ce1580cb95fa2210389263",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy2DFromArrayAsync"
        ],
        "argsstring": [
          "(void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)"
        ],
        "name": [
          "hipMemcpy2DFromArrayAsync"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "dpitch"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_const_t",
                    "$": {
                      "refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "wOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "hOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device asynchronously. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dpitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of destination memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "wOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source starting X offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source starting Y offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Width of matrix transfer (columns in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Height of matrix transfer (rows) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of transfer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Accelerator view which the copy is being enqueued "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2DToArray",
                            "$": {
                              "refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4670",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4670",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "hipArray_const_t",
          "hipMemcpyKind",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy2DFromArrayAsync (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipMemcpy2DFromArrayAsync (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)",
      "graft": "// cudaError_t cudaMemcpy2DFromArrayAsync (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ) using hipError_t hipMemcpy2DFromArrayAsync (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaArray_const_t to hipArray_const_t\nhipArray_const_t cudaArray_const_t_TO_hipArray_const_t(cudaArray_const_t);\n\n// hipArray_const_t to cudaArray_const_t\ncudaArray_const_t hipArray_const_t_TO_cudaArray_const_t(hipArray_const_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DFromArrayAsync (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ) using hipError_t hipMemcpy2DFromArrayAsync (void *dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpy2DFromArrayAsync (  void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy2DFromArrayAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy2DFromArrayAsync (dst, dpitch, hipArray_const_t_TO_cudaArray_const_t(src), wOffset, hOffset, width, height, cudaMemcpyKind_TO_hipMemcpyKind(kind), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArrayAsync ( cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ) using",
      "forcePrediction": false
    },
    "cudaMemcpy2DToArray": {
      "cuda": "cudaMemcpy2DToArray",
      "hip": "hipMemcpy2DToArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy2DToArray",
        "args": "  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ",
        "types": [
          "cudaArray_t",
          "size_t",
          "const",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy2DToArray"
        ],
        "argsstring": [
          "(hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpy2DToArray"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "wOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "hOffset"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "spitch"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "wOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination starting X offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination starting Y offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "spitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of source memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Width of matrix transfer (columns in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Height of matrix transfer (rows) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of transfer "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToArray",
                            "$": {
                              "refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4573",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4573",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "size_t",
          "const void undefined",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy2DToArray (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipMemcpy2DToArray (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpy2DToArray (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DToArray (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArray (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DToArray (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpy2DToArray (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy2DToArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy2DToArray(hipArray_t_TO_cudaArray_t(dst), wOffset, hOffset, src, spitch, width, height, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DFromArray ( void* dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DFromArray (void* dst, size_t dpitch, hipArray_const_t src, size_t wOffset, size_t h",
      "forcePrediction": false
    },
    "cudaMemcpy2DToArrayAsync": {
      "cuda": "cudaMemcpy2DToArrayAsync",
      "hip": "hipMemcpy2DToArrayAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy2DToArrayAsync",
        "args": "  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ",
        "types": [
          "cudaArray_t",
          "size_t",
          "const",
          "cudaMemcpyKind",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gab6953ee5f575d0324c19ffc51a72f8fb",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy2DToArrayAsync"
        ],
        "argsstring": [
          "(hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)"
        ],
        "name": [
          "hipMemcpy2DToArrayAsync"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "wOffset"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "hOffset"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "spitch"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "wOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination starting X offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hOffset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Destination starting Y offset "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Source memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "spitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pitch of source memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Width of matrix transfer (columns in bytes) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Height of matrix transfer (rows) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of transfer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Accelerator view which the copy is being enqueued "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToArray",
                            "$": {
                              "refid": "group___memory_1ga835954048fd6cf0b4de065ada300d8ef",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4593",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4593",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "size_t",
          "const void undefined",
          "hipMemcpyKind",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy2DToArrayAsync (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipMemcpy2DToArrayAsync (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)",
      "graft": "// cudaError_t cudaMemcpy2DToArrayAsync (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ) using hipError_t hipMemcpy2DToArrayAsync (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArrayAsync (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0 ) using hipError_t hipMemcpy2DToArrayAsync (hipArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpy2DToArrayAsync (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy2DToArrayAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy2DToArrayAsync (hipArray_t_TO_cudaArray_t(dst), wOffset, hOffset, src, spitch, width, height, cudaMemcpyKind_TO_hipMemcpyKind(kind), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy2DToArray (  cudaArray_t dst, size_t wOffset, size_t hOffset, const void* src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind ) using hipError_t hipMemcpy2DToArray (hipArray_t dst",
      "forcePrediction": false
    },
    "cudaMemcpy3D": {
      "cuda": "cudaMemcpy3D",
      "hip": "hipMemcpy3D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpy3D",
        "args": "  const cudaMemcpy3DParms* p ",
        "types": [
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga38facb98eb1ae8206376c3c48bf5c444",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpy3D"
        ],
        "argsstring": [
          "(const struct hipMemcpy3DParms *p)"
        ],
        "name": [
          "hipMemcpy3D"
        ],
        "param": [
          {
            "type": [
              {
                "_": "const struct  *",
                "ref": [
                  {
                    "_": "hipMemcpy3DParms",
                    "$": {
                      "refid": "structhip_memcpy3_d_parms",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "p"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data between host and device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "p",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "3D memory copy parameters "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidPitchValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3e430f069904db0f8aefdaeb67effa22",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevicePointer",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a12c0c3939a86d4cf25df0e00abca9a6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidMemcpyDirection",
                            "$": {
                              "refid": "hip__runtime__api_8h_1afaf16f46f53d8dc4b42ddcf896f40c14",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , ,  ",
                        "ref": [
                          {
                            "_": "hipMemcpy",
                            "$": {
                              "refid": "group___memory_1gac1a055d288302edd641c6d7416858e1e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2DToArray",
                            "$": {
                              "refid": "group___memory_1gaccf359cb35ce1887e6250c09e115e9a2",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpy2D",
                            "$": {
                              "refid": "group___memory_1ga8af4597ff0cd17247d8a857c4d8bfa8a",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyFromArray",
                            "$": {
                              "refid": "group___memory_1ga8c39c67c4ba098c6e6e116a9a4839a24",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyToSymbol",
                            "$": {
                              "refid": "group___memory_1gac0d988981c8535af1712f1f57436869b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemcpyAsync",
                            "$": {
                              "refid": "group___memory_1gad55fa9f5980b711bc93c52820149ba18",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4709",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4709",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemcpy3DParms",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpy3D (  const cudaMemcpy3DParms* p )",
      "hipLine": "hipError_t hipMemcpy3D (const struct hipMemcpy3DParms *p)",
      "graft": "// cudaError_t cudaMemcpy3D (  const cudaMemcpy3DParms* p ) using hipError_t hipMemcpy3D (const struct hipMemcpy3DParms *p)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemcpy3DParms to cudaMemcpy3DParms\ncudaMemcpy3DParms hipMemcpy3DParms_TO_cudaMemcpy3DParms(hipMemcpy3DParms);\n\n// cudaMemcpy3DParms to hipMemcpy3DParms\nhipMemcpy3DParms cudaMemcpy3DParms_TO_hipMemcpy3DParms(cudaMemcpy3DParms);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy3D (  const cudaMemcpy3DParms* p ) using hipError_t hipMemcpy3D (const struct hipMemcpy3DParms *p)\nextern \"C\"  cudaError_t cudaMemcpy3D (  const cudaMemcpy3DParms* p )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy3D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy3D(cudaMemcpy3DParms_TO_hipMemcpy3DParms(*p));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpy3DAsync (  const cudaMemcpy3DParms* p, cudaStream_t stream ) using hipError_t hipMemcpy3DAsync (const struct hipMemcpy3DParms *p, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpy3DAsync (  const cudaMemcpy3DParms* p, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy3DAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpy3DAsync(cudaMemcpy3D",
      "forcePrediction": false
    },
    "cudaMemcpyFromSymbol": {
      "cuda": "cudaMemcpyFromSymbol",
      "hip": "hipMemcpyFromSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpyFromSymbol",
        "args": "  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost ",
        "types": [
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga5e06c171bb33ac109bf9e642bea57314",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpyFromSymbol"
        ],
        "argsstring": [
          "(void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpyFromSymbol"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data from the given symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns pointer to destinition memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the symbole address on the device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Size in bytes to copy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Offset in bytes from the start of symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Type of memory transfer"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4140",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4140",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpyFromSymbol (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost )",
      "hipLine": "hipError_t hipMemcpyFromSymbol (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpyFromSymbol (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost ) using hipError_t hipMemcpyFromSymbol (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyFromSymbol (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost ) using hipError_t hipMemcpyFromSymbol (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpyFromSymbol (  void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpyFromSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpyFromSymbol (dst, symbol, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyToSymbol (  void* symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice ) using hipError_t hipMemcpyToSymbol (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpyToSymbol (  void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cuda",
      "forcePrediction": false
    },
    "cudaMemcpyFromSymbolAsync": {
      "cuda": "cudaMemcpyFromSymbolAsync",
      "hip": "hipMemcpyFromSymbolAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpyFromSymbolAsync",
        "args": "  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0 ",
        "types": [
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga50a9366e07b89172e140203a744a80c5",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpyFromSymbolAsync"
        ],
        "argsstring": [
          "(void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)"
        ],
        "name": [
          "hipMemcpyFromSymbolAsync"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data from the given symbol on the device asynchronously. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns pointer to destinition memory address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the symbole address on the device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size in bytes to copy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "offset in bytes from the start of symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "type of memory transfer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream identifier"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4157",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4157",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpyFromSymbolAsync (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipMemcpyFromSymbolAsync (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)",
      "graft": "// cudaError_t cudaMemcpyFromSymbolAsync (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0 ) using hipError_t hipMemcpyFromSymbolAsync (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyFromSymbolAsync (  void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0 ) using hipError_t hipMemcpyFromSymbolAsync (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpyFromSymbolAsync (  void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpyFromSymbolAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpyFromSymbolAsync (dst, symbol, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyToSymbolAsync (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0 ) using hipError_t hipMemcpyToSymbolAsync (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpyToSymbolAsync (  const",
      "forcePrediction": false
    },
    "cudaMemcpyToSymbol": {
      "cuda": "cudaMemcpyToSymbol",
      "hip": "hipMemcpyToSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpyToSymbol",
        "args": "  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice ",
        "types": [
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gac0d988981c8535af1712f1f57436869b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpyToSymbol"
        ],
        "argsstring": [
          "(const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipMemcpyToSymbol"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              {
                "_": "Copies data to the given symbol on the device. Symbol HIP APIs allow a kernel to define a device-side data symbol which can be accessed on the host side. The symbol can be in __constant or device space. Note that the symbol name needs to be encased in the HIP_SYMBOL macro. This also applies to hipMemcpyFromSymbol, hipGetSymbolAddress, and hipGetSymbolSize. For detail usage, see the example at . ",
                "ulink": [
                  {
                    "_": "https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-5.0.x/docs/markdown/hip_porting_guide.md",
                    "$": {
                      "url": "https://github.com/ROCm-Developer-Tools/HIP/blob/rocm-5.0.x/docs/markdown/hip_porting_guide.md"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the device symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the source address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size in bytes to copy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "offset in bytes from start of symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "type of memory transfer"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4107",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4107",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpyToSymbol (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice )",
      "hipLine": "hipError_t hipMemcpyToSymbol (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaMemcpyToSymbol (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice ) using hipError_t hipMemcpyToSymbol (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyToSymbol (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice ) using hipError_t hipMemcpyToSymbol (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpyToSymbol (  const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpyToSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpyToSymbol(symbol, src, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyFromSymbol ( void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost ) using hipError_t hipMemcpyFromSymbol (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaMemcpyFromSymbol ( void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpy",
      "forcePrediction": false
    },
    "cudaMemcpyToSymbolAsync": {
      "cuda": "cudaMemcpyToSymbolAsync",
      "hip": "hipMemcpyToSymbolAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemcpyToSymbolAsync",
        "args": "  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0 ",
        "types": [
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gaaceb6e89fb822d3a8e387b526b718478",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemcpyToSymbolAsync"
        ],
        "argsstring": [
          "(const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)"
        ],
        "name": [
          "hipMemcpyToSymbolAsync"
        ],
        "param": [
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies data to the given symbol on the device asynchronously. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the device symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the source address "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "size in bytes to copy "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "offset in bytes from start of symbole "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "type of memory transfer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "stream identifier"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4124",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4124",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemcpyToSymbolAsync (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipMemcpyToSymbolAsync (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)",
      "graft": "// cudaError_t cudaMemcpyToSymbolAsync (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0 ) using hipError_t hipMemcpyToSymbolAsync (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyToSymbolAsync (  const T& symbol, const void* src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice, cudaStream_t stream = 0 ) using hipError_t hipMemcpyToSymbolAsync (const void *symbol, const void *src, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpyToSymbolAsync (  const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemcpyToSymbolAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemcpyToSymbolAsync (symbol, src, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemcpyFromSymbolAsync ( void* dst, const T& symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost, cudaStream_t stream = 0 ) using hipError_t hipMemcpyFromSymbolAsync (void *dst, const void *symbol, size_t sizeBytes, size_t offset, hipMemcpyKind kind, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMemcpyFromSymbolAsync ( void* dst,",
      "forcePrediction": false
    },
    "cudaMemset": {
      "cuda": "cudaMemset",
      "hip": "hipMemset",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemset",
        "args": "  void* devPtr, int  value, size_t count ",
        "types": [
          "voidundefined",
          "int",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gac7441e74affcce4b8b69dba996c5ebc4",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemset"
        ],
        "argsstring": [
          "(void *dst, int value, size_t sizeBytes)"
        ],
        "name": [
          "hipMemset"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "value"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "sizeBytes"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Fills the first sizeBytes bytes of the memory area pointed to by dest with the constant byte value value. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data being filled "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Value to be set "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "sizeBytes",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data size in bytes "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4201",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4201",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "int",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemset (  void* devPtr, int  value, size_t count )",
      "hipLine": "hipError_t hipMemset (void *dst, int value, size_t sizeBytes)",
      "graft": "// cudaError_t cudaMemset (  void* devPtr, int  value, size_t count ) using hipError_t hipMemset (void *dst, int value, size_t sizeBytes)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemset (  void* devPtr, int  value, size_t count ) using hipError_t hipMemset (void *dst, int value, size_t sizeBytes)\nextern \"C\"  cudaError_t cudaMemset (  void* devPtr, int  value, size_t count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemset (devPtr, value, count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMalloc ( void** devPtr, size_t size ) using hipError_t hipMalloc (void** devPtr, size_t size)\nextern \"C\" cudaError_t cudaMalloc ( void** devPtr, size_t size )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMalloc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMalloc (devPtr, size);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFree ( void* devPtr ) using hipError_t hipFree (void* devPtr)\nextern \"C\" cudaError_t",
      "forcePrediction": false
    },
    "cudaMemset2D": {
      "cuda": "cudaMemset2D",
      "hip": "hipMemset2D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemset2D",
        "args": "  void* devPtr, size_t pitch, int  value, size_t width, size_t height ",
        "types": [
          "voidundefined",
          "size_t",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1gae1e7b4c740cc02611ea8122bec376201",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemset2D"
        ],
        "argsstring": [
          "(void *dst, size_t pitch, int value, size_t width, size_t height)"
        ],
        "name": [
          "hipMemset2D"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "pitch"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "value"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "width"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "height"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Fills the memory area pointed to by dst with the constant value. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pitch",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data size in bytes "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Constant value to be set "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "width",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              ""
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "height",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              ""
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4307",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4307",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "size_t",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemset2D (  void* devPtr, size_t pitch, int  value, size_t width, size_t height )",
      "hipLine": "hipError_t hipMemset2D (void *dst, size_t pitch, int value, size_t width, size_t height)",
      "graft": "// cudaError_t cudaMemset2D (  void* devPtr, size_t pitch, int  value, size_t width, size_t height ) using hipError_t hipMemset2D (void *dst, size_t pitch, int value, size_t width, size_t height)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemset2D (  void* devPtr, size_t pitch, int  value, size_t width, size_t height ) using hipError_t hipMemset2D (void *dst, size_t pitch, int value, size_t width, size_t height)\nextern \"C\"  cudaError_t cudaMemset2D (  void* devPtr, size_t pitch, int  value, size_t width, size_t height )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemset2D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemset2D (devPtr, pitch, value, width, height);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemset ( void* devPtr, int value, size_t count ) using hipError_t hipMemset (void *dst, int value, size_t sizeBytes)\nextern \"C\"  cudaError_t cudaMemset ( void* devPtr, int value, size_t count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemset (devPtr, value, count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t c",
      "forcePrediction": false
    },
    "cudaMemset3D": {
      "cuda": "cudaMemset3D",
      "hip": "hipMemset3D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemset3D",
        "args": "  cudaPitchedPtr pitchedDevPtr, int  value, cudaExtent extent ",
        "types": [
          "cudaPitchedPtr",
          "int",
          "cudaExtent",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga3c04a21c9de9c55b3e47d8c87a0b0593",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemset3D"
        ],
        "argsstring": [
          "(hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)"
        ],
        "name": [
          "hipMemset3D"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipPitchedPtr",
                    "$": {
                      "refid": "structhip_pitched_ptr",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pitchedDevPtr"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "value"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipExtent",
                    "$": {
                      "refid": "structhip_extent",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "extent"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Fills synchronously the memory area pointed to by pitchedDevPtr with the constant value. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pitchedDevPtr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to pitched device memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Value to set for each byte of specified memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "extent",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Size parameters for width field in bytes in device memory "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4328",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4328",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipPitchedPtr",
          "int",
          "hipExtent",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemset3D (  cudaPitchedPtr pitchedDevPtr, int  value, cudaExtent extent )",
      "hipLine": "hipError_t hipMemset3D (hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)",
      "graft": "// cudaError_t cudaMemset3D (  cudaPitchedPtr pitchedDevPtr, int  value, cudaExtent extent ) using hipError_t hipMemset3D (hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaPitchedPtr to hipPitchedPtr\nhipPitchedPtr cudaPitchedPtr_TO_hipPitchedPtr(cudaPitchedPtr);\n\n// hipPitchedPtr to cudaPitchedPtr\ncudaPitchedPtr hipPitchedPtr_TO_cudaPitchedPtr(hipPitchedPtr);\n\n// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n\n// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemset3D (  cudaPitchedPtr pitchedDevPtr, int  value, cudaExtent extent ) using hipError_t hipMemset3D (hipPitchedPtr pitchedDevPtr, int value, hipExtent extent)\nextern \"C\"  cudaError_t cudaMemset3D (  cudaPitchedPtr pitchedDevPtr, int  value, cudaExtent extent )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemset3D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemset3D (  hipPitchedPtr_TO_cudaPitchedPtr(pitchedDevPtr), value, hipExtent_TO_cudaExtent(extent));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemset ( void* devPtr, int  value, size_t  count ) using hipError_t hipMemset ( void* devPtr, int value, size_t count )\nextern \"C\" cudaError_t cudaMemset ( void* devPtr, int  value, size_t  count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemset call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemset ( devPtr, value, count );\n\n    return",
      "forcePrediction": false
    },
    "cudaFreeAsync": {
      "cuda": "cudaFreeAsync",
      "hip": "hipFreeAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaFreeAsync",
        "args": "  void* devPtr, cudaStream_t hStream ",
        "types": [
          "voidundefined",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipFreeAsync"
        ],
        "argsstring": [
          "(void *dev_ptr, hipStream_t stream)"
        ],
        "name": [
          "hipFreeAsync"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Frees memory with stream ordered semantics. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Inserts a free operation into . The allocation must not be used after stream execution reaches the free. After this API returns, accessing the memory from any subsequent work launched on the GPU or querying its pointer attributes results in undefined behavior.",
                "computeroutput": [
                  "stream"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "During stream capture, this function results in the creation of a free node and must therefore be passed the address of a graph allocation."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to device memory to free "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The stream, where the destruciton will occur according to the execution order"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3364",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3364",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaFreeAsync (  void* devPtr, cudaStream_t hStream )",
      "hipLine": "hipError_t hipFreeAsync (void *dev_ptr, hipStream_t stream)",
      "graft": "// cudaError_t cudaFreeAsync (  void* devPtr, cudaStream_t hStream ) using hipError_t hipFreeAsync (void *dev_ptr, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeAsync (  void* devPtr, cudaStream_t hStream ) using hipError_t hipFreeAsync (void *dev_ptr, hipStream_t stream)\nextern \"C\"  cudaError_t cudaFreeAsync (  void* devPtr, cudaStream_t hStream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFreeAsync (devPtr, cudaStream_t_TO_hipStream_t(hStream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocAsync (  void** devPtr, size_t size, cudaStream_t hStream ) using hipError_t hipMallocAsync (void **dev_ptr, size_t size, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMallocAsync (  void** devPtr, size_t size, cudaStream_t hStream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocAsync (devPtr, size, cudaStream_t_TO_hipStream_t(hStream));\n\n    return hip",
      "forcePrediction": false
    },
    "cudaMallocAsync": {
      "cuda": "cudaMallocAsync",
      "hip": "hipMallocAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocAsync",
        "args": "  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ",
        "types": [
          "voidundefined*",
          "size_t",
          "cudaMemPool_t",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocAsync"
        ],
        "argsstring": [
          "(void **dev_ptr, size_t size, hipStream_t stream)"
        ],
        "name": [
          "hipMallocAsync"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocates memory with stream ordered semantics. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Inserts a memory allocation operation into . A pointer to the allocated memory is returned immediately in *dptr. The allocation must not be accessed until the the allocation operation completes. The allocation comes from the memory pool associated with the stream's device.",
                "computeroutput": [
                  "stream"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "The default memory pool of a device contains device memory from that device. "
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "Basic stream ordering allows future work submitted into the same stream to use the allocation. Stream query, stream synchronize, and HIP events can be used to guarantee that the allocation operation completes before work submitted in a separate stream runs. "
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "During stream capture, this function results in the creation of an allocation node. In this case, the allocation is owned by the graph instead of the memory pool. The memory pool's properties are used to set the node's creation parameters."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned device pointer of memory allocation "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Number of bytes to allocate "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The stream establishing the stream ordering contract and the memory pool to allocate from"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3339",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3339",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream )",
      "hipLine": "hipError_t hipMallocAsync (void **dev_ptr, size_t size, hipStream_t stream)",
      "graft": "// cudaError_t cudaMallocAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ) using hipError_t hipMallocAsync (void **dev_ptr, size_t size, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ) using hipError_t hipMallocAsync (void **dev_ptr, size_t size, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMallocAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocAsync (ptr, size, hipStream_t_TO_cudaStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeAsync (  void* ptr, cudaMemPool_t memPool, cudaStream_t stream ) using hipError_t hipFreeAsync (void *dev_ptr, hipStream_t stream)\nextern \"C\"  cudaError_t cudaFreeAsync (  void* ptr, cudaMemPool_t memPool, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFreeAsync (ptr, hipStream_t_TO_cudaStream_t(stream));",
      "forcePrediction": false
    },
    "cudaMallocFromPoolAsync": {
      "cuda": "cudaMallocFromPoolAsync",
      "hip": "hipMallocFromPoolAsync",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMallocFromPoolAsync",
        "args": "  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ",
        "types": [
          "voidundefined*",
          "size_t",
          "cudaMemPool_t",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMallocFromPoolAsync"
        ],
        "argsstring": [
          "(void **dev_ptr, size_t size, hipMemPool_t mem_pool, hipStream_t stream)"
        ],
        "name": [
          "hipMallocFromPoolAsync"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Allocates memory from a specified pool with stream ordered semantics. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Inserts an allocation operation into . A pointer to the allocated memory is returned immediately in . The allocation must not be accessed until the the allocation operation completes. The allocation comes from the specified memory pool.",
                "computeroutput": [
                  "stream",
                  "dev_ptr"
                ]
              },
              {
                "_": "\nBasic stream ordering allows future work submitted into the same stream to use the allocation. Stream query, stream synchronize, and HIP events can be used to guarantee that the allocation operation completes before work submitted in a separate stream runs.",
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "The specified memory pool may be from a device different than that of the specified .",
                        "computeroutput": [
                          "stream"
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "During stream capture, this function results in the creation of an allocation node. In this case, the allocation is owned by the graph instead of the memory pool. The memory pool's properties are used to set the node's creation parameters."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , ,  , , , , ,",
                        "ref": [
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolCreate",
                            "$": {
                              "refid": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned device pointer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Number of bytes to allocate "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The pool to allocate from "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The stream establishing the stream ordering semantic"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3593",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3593",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t",
          "hipMemPool_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMallocFromPoolAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream )",
      "hipLine": "hipError_t hipMallocFromPoolAsync (void **dev_ptr, size_t size, hipMemPool_t mem_pool, hipStream_t stream)",
      "graft": "// cudaError_t cudaMallocFromPoolAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ) using hipError_t hipMallocFromPoolAsync (void **dev_ptr, size_t size, hipMemPool_t mem_pool, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMallocFromPoolAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream ) using hipError_t hipMallocFromPoolAsync (void **dev_ptr, size_t size, hipMemPool_t mem_pool, hipStream_t stream)\nextern \"C\"  cudaError_t cudaMallocFromPoolAsync (  void** ptr, size_t size, cudaMemPool_t memPool, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMallocFromPoolAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMallocFromPoolAsync (ptr, size, cudaMemPool_t_TO_hipMemPool_t(memPool), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaFreeAsync ( void* ptr, cudaStream_t stream ) using hipError_t hipFreeAsync (void* dev_ptr, hipStream_t stream)\nextern \"C\" cudaError_t cudaFreeAsync ( void* ptr, cudaStream_t stream )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaFreeAsync call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipFreeAsync (ptr, cudaStream_t_TO_hipStream_t",
      "forcePrediction": false
    },
    "cudaMemPoolCreate": {
      "cuda": "cudaMemPoolCreate",
      "hip": "hipMemPoolCreate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolCreate",
        "args": "  cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps ",
        "types": [
          "cudaMemPool_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolCreate"
        ],
        "argsstring": [
          "(hipMemPool_t *mem_pool, const hipMemPoolProps *pool_props)"
        ],
        "name": [
          "hipMemPoolCreate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemPoolProps",
                    "$": {
                      "refid": "structhip_mem_pool_props",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pool_props"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memory pool. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Creates a HIP memory pool and returns the handle in . The  determines the properties of the pool such as the backing device and IPC capabilities.",
                "computeroutput": [
                  "mem_pool",
                  "pool_props"
                ]
              },
              "By default, the memory pool will be accessible from the device it is allocated on.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Contains createed memory pool "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pool_props",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool properties"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "Specifying hipMemHandleTypeNone creates a memory pool that will not support IPC."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolDestroy",
                            "$": {
                              "refid": "group___stream_o_1ga80b27ec04a2c1884bb8faf882cd9298e",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3532",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3532",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "hipMemPoolProps",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolCreate (  cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps )",
      "hipLine": "hipError_t hipMemPoolCreate (hipMemPool_t *mem_pool, const hipMemPoolProps *pool_props)",
      "graft": "// cudaError_t cudaMemPoolCreate (  cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps ) using hipError_t hipMemPoolCreate (hipMemPool_t *mem_pool, const hipMemPoolProps *pool_props)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPoolProps to cudaMemPoolProps\ncudaMemPoolProps hipMemPoolProps_TO_cudaMemPoolProps(hipMemPoolProps);\n\n// cudaMemPoolProps to hipMemPoolProps\nhipMemPoolProps cudaMemPoolProps_TO_hipMemPoolProps(cudaMemPoolProps);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolCreate (  cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps ) using hipError_t hipMemPoolCreate (hipMemPool_t *mem_pool, const hipMemPoolProps *pool_props)\nextern \"C\"  cudaError_t cudaMemPoolCreate (  cudaMemPool_t* memPool, const cudaMemPoolProps* poolProps )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolCreate (  (hipMemPool_t*)memPool, (const hipMemPoolProps*)poolProps );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool ) using hipError_t hipMemPoolDestroy (hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolDestroy (  (hipMemPool_t)memPool );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n",
      "forcePrediction": false
    },
    "cudaMemPoolDestroy": {
      "cuda": "cudaMemPoolDestroy",
      "hip": "hipMemPoolDestroy",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolDestroy",
        "args": "  cudaMemPool_t memPool ",
        "types": [
          "cudaMemPool_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga80b27ec04a2c1884bb8faf882cd9298e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolDestroy"
        ],
        "argsstring": [
          "(hipMemPool_t mem_pool)"
        ],
        "name": [
          "hipMemPoolDestroy"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys the specified memory pool. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "If any pointers obtained from this pool haven't been freed or the pool has free operations that haven't completed when  is invoked, the function will return immediately and the resources associated with the pool will be released automatically once there are no more outstanding allocations.",
                "computeroutput": [
                  "hipMemPoolDestroy"
                ]
              },
              "Destroying the current mempool of a device sets the default mempool of that device as the current mempool for that device.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool for destruction"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "A device's default memory pool cannot be destroyed."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , ,  , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolCreate",
                            "$": {
                              "refid": "group___stream_o_1ga58beb2a7c65ecfaede1029844920f429",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3559",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3559",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool )",
      "hipLine": "hipError_t hipMemPoolDestroy (hipMemPool_t mem_pool)",
      "graft": "// cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool ) using hipError_t hipMemPoolDestroy (hipMemPool_t mem_pool)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool ) using hipError_t hipMemPoolDestroy (hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaMemPoolDestroy (  cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolDestroy(cudaMemPool_t_TO_hipMemPool_t(memPool));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAttribute (  void* value,  cudaMemPoolAttr attr,  cudaMemPool_t memPool ) using hipError_t hipMemPoolGetAttribute (void* value, hipMemPoolAttr attr, hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaMemPoolGetAttribute (  void* value,  cudaMemPoolAttr attr,  cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolGetAttribute(value, attr, cudaMemPool_t",
      "forcePrediction": false
    },
    "cudaMemPoolExportPointer": {
      "cuda": "cudaMemPoolExportPointer",
      "hip": "hipMemPoolExportPointer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolExportPointer",
        "args": "  cudaMemPoolPtrExportData* exportData, void* ptr ",
        "types": [
          "cudaMemPoolPtrExportDataundefined",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1gaafb76a90d8609a1736e9b1944ef09090",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolExportPointer"
        ],
        "argsstring": [
          "(hipMemPoolPtrExportData *export_data, void *dev_ptr)"
        ],
        "name": [
          "hipMemPoolExportPointer"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPoolPtrExportData",
                    "$": {
                      "refid": "structhip_mem_pool_ptr_export_data",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "export_data"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Export data to share a memory pool allocation between processes. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Constructs  for sharing a specific allocation from an already shared memory pool. The recipient process can import the allocation with the  api. The data is not a handle and may be shared through any IPC mechanism.",
                "computeroutput": [
                  "export_data",
                  "hipMemPoolImportPointer"
                ]
              },
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "export_data",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned export data "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to memory being exported"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipMemPoolImportPointer",
                            "$": {
                              "refid": "group___stream_o_1ga1fdd9ab4e5d5bac53d96d053697ddc33",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3672",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3672",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPoolPtrExportData",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolExportPointer (  cudaMemPoolPtrExportData* exportData, void* ptr )",
      "hipLine": "hipError_t hipMemPoolExportPointer (hipMemPoolPtrExportData *export_data, void *dev_ptr)",
      "graft": "// cudaError_t cudaMemPoolExportPointer (  cudaMemPoolPtrExportData* exportData, void* ptr ) using hipError_t hipMemPoolExportPointer (hipMemPoolPtrExportData *export_data, void *dev_ptr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPoolPtrExportData to cudaMemPoolPtrExportData\ncudaMemPoolPtrExportData hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData(hipMemPoolPtrExportData);\n\n// cudaMemPoolPtrExportData to hipMemPoolPtrExportData\nhipMemPoolPtrExportData cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData(cudaMemPoolPtrExportData);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolExportPointer (  cudaMemPoolPtrExportData* exportData, void* ptr ) using hipError_t hipMemPoolExportPointer (hipMemPoolPtrExportData *export_data, void *dev_ptr)\nextern \"C\"  cudaError_t cudaMemPoolExportPointer (  cudaMemPoolPtrExportData* exportData, void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolExportPointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolExportPointer (exportData, ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolImportPointer (  cudaMemPoolPtrExportData* exportData, void** ptr ) using hipError_t hipMemPoolImportPointer (hipMemPoolPtrExportData *export_data, void **dev_ptr)\nextern \"C\"  cudaError_t cudaMemPoolImportPointer (  cudaMemPoolPtrExportData* exportData, void** ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolImportPointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolImportPointer (exportData, ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError",
      "forcePrediction": false
    },
    "cudaMemPoolExportToShareableHandle": {
      "cuda": "cudaMemPoolExportToShareableHandle",
      "hip": "hipMemPoolExportToShareableHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolExportToShareableHandle",
        "args": "  void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int  flags ",
        "types": [
          "voidundefined",
          "cudaMemPool_t",
          "cudaMemAllocationHandleType",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga929b2b894b051dec2d5df7fbad157a1f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolExportToShareableHandle"
        ],
        "argsstring": [
          "(void *shared_handle, hipMemPool_t mem_pool, hipMemAllocationHandleType handle_type, unsigned int flags)"
        ],
        "name": [
          "hipMemPoolExportToShareableHandle"
        ],
        "param": [
          {
            "type": [
              "void *"
            ],
            "declname": [
              "shared_handle"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemAllocationHandleType",
                    "$": {
                      "refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle_type"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Exports a memory pool to the requested handle type. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Given an IPC capable mempool, create an OS handle to share the pool with another process. A recipient process can convert the shareable handle into a mempool with . Individual pointers can then be shared with the  and  APIs. The implementation of what the shareable handle is and how it can be transferred is defined by the requested handle type.",
                "computeroutput": [
                  "hipMemPoolImportFromShareableHandle",
                  "hipMemPoolExportPointer",
                  "hipMemPoolImportPointer"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": ": To create an IPC capable mempool, create a mempool with a  other than .",
                        "computeroutput": [
                          "hipMemAllocationHandleType",
                          "hipMemHandleTypeNone"
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipMemPoolImportFromShareableHandle",
                            "$": {
                              "refid": "group___stream_o_1ga2008b5a98ecec44ecebb3618692aa894",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "shared_handle",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the location in which to store the requested handle "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pool to export "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "handle_type",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The type of handle to create "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Must be 0"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3620",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3620",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined",
          "hipMemPool_t",
          "hipMemAllocationHandleType",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolExportToShareableHandle (  void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int  flags )",
      "hipLine": "hipError_t hipMemPoolExportToShareableHandle (void *shared_handle, hipMemPool_t mem_pool, hipMemAllocationHandleType handle_type, unsigned int flags)",
      "graft": "// cudaError_t cudaMemPoolExportToShareableHandle (  void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int  flags ) using hipError_t hipMemPoolExportToShareableHandle (void *shared_handle, hipMemPool_t mem_pool, hipMemAllocationHandleType handle_type, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemAllocationHandleType to hipMemAllocationHandleType\nhipMemAllocationHandleType cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(cudaMemAllocationHandleType);\n\n// hipMemAllocationHandleType to cudaMemAllocationHandleType\ncudaMemAllocationHandleType hipMemAllocationHandleType_TO_cudaMemAllocationHandleType(hipMemAllocationHandleType);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolExportToShareableHandle (  void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int  flags ) using hipError_t hipMemPoolExportToShareableHandle (void *shared_handle, hipMemPool_t mem_pool, hipMemAllocationHandleType handle_type, unsigned int flags)\nextern \"C\"  cudaError_t cudaMemPoolExportToShareableHandle (  void* shareableHandle, cudaMemPool_t memPool, cudaMemAllocationHandleType handleType, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolExportToShareableHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolExportToShareableHandle (shareableHandle, hipMemPool_t_TO_cudaMemPool_t(memPool), cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(handleType), flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolImportFromShareableHandle ( cudaMemPool_t* memPool, cudaMemAllocationHandleType* handleType, void* shareableHandle, unsigned int  flags ) using hipError_t hipMemPoolImportFromShareableHandle (hipMemPool_t *mem_pool, hipMemAllocationHandleType *handle_type, void *shared_handle, unsigned int flags)\nextern \"C\"  cudaError_t cudaMemPoolImportFromShareableHandle (",
      "forcePrediction": false
    },
    "cudaMemPoolGetAccess": {
      "cuda": "cudaMemPoolGetAccess",
      "hip": "hipMemPoolGetAccess",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolGetAccess",
        "args": "  cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location ",
        "types": [
          "cudaMemAccessFlags",
          "cudaMemPool_t",
          "cudaMemLocationundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolGetAccess"
        ],
        "argsstring": [
          "(hipMemAccessFlags *flags, hipMemPool_t mem_pool, hipMemLocation *location)"
        ],
        "name": [
          "hipMemPoolGetAccess"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemAccessFlags",
                    "$": {
                      "refid": "group___global_defs_1gac20e3511da42142b23285e557e43facd",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "flags"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemLocation",
                    "$": {
                      "refid": "structhip_mem_location",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "location"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns the accessibility of a pool from a device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Returns the accessibility of the pool's memory from the specified location.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Accessibility of the memory pool from the specified location/device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool being queried "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "location",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Location/device for memory pool access"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3508",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3508",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemAccessFlags",
          "hipMemPool_t",
          "hipMemLocation",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolGetAccess (  cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location )",
      "hipLine": "hipError_t hipMemPoolGetAccess (hipMemAccessFlags *flags, hipMemPool_t mem_pool, hipMemLocation *location)",
      "graft": "// cudaError_t cudaMemPoolGetAccess (  cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location ) using hipError_t hipMemPoolGetAccess (hipMemAccessFlags *flags, hipMemPool_t mem_pool, hipMemLocation *location)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemAccessFlags to hipMemAccessFlags\nhipMemAccessFlags cudaMemAccessFlags_TO_hipMemAccessFlags(cudaMemAccessFlags);\n\n// hipMemAccessFlags to cudaMemAccessFlags\ncudaMemAccessFlags hipMemAccessFlags_TO_cudaMemAccessFlags(hipMemAccessFlags);\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemLocation to cudaMemLocation\ncudaMemLocation hipMemLocation_TO_cudaMemLocation(hipMemLocation);\n\n// cudaMemLocation to hipMemLocation\nhipMemLocation cudaMemLocation_TO_hipMemLocation(cudaMemLocation);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAccess (  cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location ) using hipError_t hipMemPoolGetAccess (hipMemAccessFlags *flags, hipMemPool_t mem_pool, hipMemLocation *location)\nextern \"C\"  cudaError_t cudaMemPoolGetAccess (  cudaMemAccessFlags ** flags, cudaMemPool_t memPool, cudaMemLocation* location )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolGetAccess (flags, hipMemPool_t_TO_cudaMemPool_t(memPool), location);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAccess ( cudaMemPool_t memPool, cudaMemLocation* location, cudaMemAccessFlags flags ) using hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, hipMemLocation *location, hipMemAccessFlags flags)\nextern \"C\"  cudaError_t cudaMemPoolSetAccess ( cudaMemPool_t memPool, cudaMemLocation* location, cudaMemAccessFlags flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolSetAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError",
      "forcePrediction": false
    },
    "cudaMemPoolGetAttribute": {
      "cuda": "cudaMemPoolGetAttribute",
      "hip": "hipMemPoolGetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolGetAttribute",
        "args": "  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ",
        "types": [
          "cudaMemPool_t",
          "cudaMemPoolAttr",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolGetAttribute"
        ],
        "argsstring": [
          "(hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)"
        ],
        "name": [
          "hipMemPoolGetAttribute"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPoolAttr",
                    "$": {
                      "refid": "group___global_defs_1ga987c8e7a7e8171832a6647150854ca2e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets attributes of a memory pool. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Supported attributes are:\n",
                "itemizedlist": [
                  {
                    "listitem": [
                      {
                        "para": [
                          {
                            "_": " (value type = cuuint64_t) Amount of reserved memory in bytes to hold onto before trying to release memory back to the OS. When more than the release threshold bytes of memory are held by the memory pool, the allocator will try to release memory back to the OS on the next call to stream, event or context synchronize. (default 0)",
                            "computeroutput": [
                              "hipMemPoolAttrReleaseThreshold:"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow  to use memory asynchronously freed in another stream as long as a stream ordering dependency of the allocating stream on the free action exists. HIP events and null stream interactions can create the required stream ordered dependencies. (default enabled)",
                            "computeroutput": [
                              "hipMemPoolReuseFollowEventDependencies:",
                              "hipMallocAsync"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow reuse of already completed frees when there is no dependency between the free and allocation. (default enabled)",
                            "computeroutput": [
                              "hipMemPoolReuseAllowOpportunistic:"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow  to insert new stream dependencies in order to establish the stream ordering required to reuse a piece of memory released by  (default enabled).",
                            "computeroutput": [
                              "hipMemPoolReuseAllowInternalDependencies:",
                              "hipMallocAsync",
                              "hipFreeAsync"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The memory pool to get attributes of "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The attribute to get "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Retrieved value"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3470",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3470",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "hipMemPoolAttr",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )",
      "hipLine": "hipError_t hipMemPoolGetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)",
      "graft": "// cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolGetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPoolAttr to hipMemPoolAttr\nhipMemPoolAttr cudaMemPoolAttr_TO_hipMemPoolAttr(cudaMemPoolAttr);\n\n// hipMemPoolAttr to cudaMemPoolAttr\ncudaMemPoolAttr hipMemPoolAttr_TO_cudaMemPoolAttr(hipMemPoolAttr);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolGetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\"  cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolGetAttribute (hipMemPool_t_TO_cudaMemPool_t(memPool), cudaMemPoolAttr_TO_hipMemPoolAttr(attr), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolSetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\"  cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolSetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n",
      "forcePrediction": false
    },
    "cudaMemPoolImportFromShareableHandle": {
      "cuda": "cudaMemPoolImportFromShareableHandle",
      "hip": "hipMemPoolImportFromShareableHandle",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolImportFromShareableHandle",
        "args": "  cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int  flags ",
        "types": [
          "cudaMemPool_tundefined",
          "voidundefined",
          "cudaMemAllocationHandleType",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga2008b5a98ecec44ecebb3618692aa894",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolImportFromShareableHandle"
        ],
        "argsstring": [
          "(hipMemPool_t *mem_pool, void *shared_handle, hipMemAllocationHandleType handle_type, unsigned int flags)"
        ],
        "name": [
          "hipMemPoolImportFromShareableHandle"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "shared_handle"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemAllocationHandleType",
                    "$": {
                      "refid": "group___global_defs_1ga07b4aea600602a99d135dd2ca87faa92",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "handle_type"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Imports a memory pool from a shared handle. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Specific allocations can be imported from the imported pool with .",
                "computeroutput": [
                  "hipMemPoolImportPointer"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "Imported memory pools do not support creating new allocations. As such imported memory pools may not be used in  or  calls.",
                        "computeroutput": [
                          "hipDeviceSetMemPool",
                          "hipMallocFromPoolAsync"
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipMemPoolExportToShareableHandle",
                            "$": {
                              "refid": "group___stream_o_1ga929b2b894b051dec2d5df7fbad157a1f",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returned memory pool "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "shared_handle",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "OS handle of the pool to open "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "handle_type",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The type of handle being imported "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Must be 0"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3648",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3648",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "void undefined",
          "hipMemAllocationHandleType",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolImportFromShareableHandle (  cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int  flags )",
      "hipLine": "hipError_t hipMemPoolImportFromShareableHandle (hipMemPool_t *mem_pool, void *shared_handle, hipMemAllocationHandleType handle_type, unsigned int flags)",
      "graft": "// cudaError_t cudaMemPoolImportFromShareableHandle (  cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int  flags ) using hipError_t hipMemPoolImportFromShareableHandle (hipMemPool_t *mem_pool, void *shared_handle, hipMemAllocationHandleType handle_type, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaMemAllocationHandleType to hipMemAllocationHandleType\nhipMemAllocationHandleType cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(cudaMemAllocationHandleType);\n\n// hipMemAllocationHandleType to cudaMemAllocationHandleType\ncudaMemAllocationHandleType hipMemAllocationHandleType_TO_cudaMemAllocationHandleType(hipMemAllocationHandleType);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolImportFromShareableHandle (  cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int  flags ) using hipError_t hipMemPoolImportFromShareableHandle (hipMemPool_t *mem_pool, void *shared_handle, hipMemAllocationHandleType handle_type, unsigned int flags)\nextern \"C\"  cudaError_t cudaMemPoolImportFromShareableHandle (  cudaMemPool_t* memPool, void* shareableHandle, cudaMemAllocationHandleType handleType, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolImportFromShareableHandle call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolImportFromShareableHandle (memPool, shareableHandle, cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(handleType), flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const void* devPtr, cudaMemPoolAccessDesc* desc, size_t count ) using hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, const void* dev_ptr, hipMemPoolAccessDesc* desc, size_t count)\nextern \"C\"  cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const void* devPtr, cudaMemPoolAccessDesc* desc, size_t count )",
      "forcePrediction": false
    },
    "cudaMemPoolImportPointer": {
      "cuda": "cudaMemPoolImportPointer",
      "hip": "hipMemPoolImportPointer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolImportPointer",
        "args": "  void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData ",
        "types": [
          "voidundefined*",
          "cudaMemPool_t",
          "cudaMemPoolPtrExportDataundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga1fdd9ab4e5d5bac53d96d053697ddc33",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolImportPointer"
        ],
        "argsstring": [
          "(void **dev_ptr, hipMemPool_t mem_pool, hipMemPoolPtrExportData *export_data)"
        ],
        "name": [
          "hipMemPoolImportPointer"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "dev_ptr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemPoolPtrExportData",
                    "$": {
                      "refid": "structhip_mem_pool_ptr_export_data",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "export_data"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Import a memory pool allocation from another process. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Returns in  a pointer to the imported memory. The imported memory must not be accessed before the allocation operation completes in the exporting process. The imported memory must be freed from all importing processes before being freed in the exporting process. The pointer may be freed with  or . If  is used, the free must be completed on the importing process before the free operation on the exporting process.",
                "computeroutput": [
                  "dev_ptr",
                  "hipFree",
                  "hipFreeAsync",
                  "hipFreeAsync"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "The  api may be used in the exporting process before the  operation completes in its stream as long as the  in the exporting process specifies a stream with a stream dependency on the importing process's .",
                        "computeroutput": [
                          "hipFreeAsync",
                          "hipFreeAsync",
                          "hipFreeAsync",
                          "hipFreeAsync"
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotInitialized",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d05c67d55c8aa7f82639a2f5f829be7",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipMemPoolExportPointer",
                            "$": {
                              "refid": "group___stream_o_1gaafb76a90d8609a1736e9b1944ef09090",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to imported memory "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool from which to import a pointer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "export_data",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Data specifying the memory to import"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3701",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3701",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "hipMemPool_t",
          "hipMemPoolPtrExportData",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolImportPointer (  void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData )",
      "hipLine": "hipError_t hipMemPoolImportPointer (void **dev_ptr, hipMemPool_t mem_pool, hipMemPoolPtrExportData *export_data)",
      "graft": "// cudaError_t cudaMemPoolImportPointer (  void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData ) using hipError_t hipMemPoolImportPointer (void **dev_ptr, hipMemPool_t mem_pool, hipMemPoolPtrExportData *export_data)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemPoolPtrExportData to cudaMemPoolPtrExportData\ncudaMemPoolPtrExportData hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData(hipMemPoolPtrExportData);\n\n// cudaMemPoolPtrExportData to hipMemPoolPtrExportData\nhipMemPoolPtrExportData cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData(cudaMemPoolPtrExportData);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolImportPointer (  void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData ) using hipError_t hipMemPoolImportPointer (void **dev_ptr, hipMemPool_t mem_pool, hipMemPoolPtrExportData *export_data)\nextern \"C\"  cudaError_t cudaMemPoolImportPointer (  void** ptr, cudaMemPool_t memPool, cudaMemPoolPtrExportData* exportData )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolImportPointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolImportPointer (ptr, hipMemPool_t_TO_cudaMemPool_t(memPool), cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData(exportData));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAccess ( cudaMemPool_t memPool, const void* const* ptrs, int count, int flags ) using hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, const void* const* dev_ptr, int count, int flags)\nextern \"C\" cudaError_t cudaMemPoolSetAccess ( cudaMemPool_t memPool, const void* const* ptrs, int count, int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolSetAccess call\" << std",
      "forcePrediction": false
    },
    "cudaMemPoolSetAccess": {
      "cuda": "cudaMemPoolSetAccess",
      "hip": "hipMemPoolSetAccess",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolSetAccess",
        "args": "  cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count ",
        "types": [
          "cudaMemPool_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolSetAccess"
        ],
        "argsstring": [
          "(hipMemPool_t mem_pool, const hipMemAccessDesc *desc_list, size_t count)"
        ],
        "name": [
          "hipMemPoolSetAccess"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemAccessDesc",
                    "$": {
                      "refid": "structhip_mem_access_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc_list"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Controls visibility of the specified pool between devices. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Memory pool for acccess change "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc_list",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Array of access descriptors. Each descriptor instructs the access to enable for a single gpu "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Number of descriptors in the map array."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3488",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3488",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "hipMemAccessDesc",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count )",
      "hipLine": "hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, const hipMemAccessDesc *desc_list, size_t count)",
      "graft": "// cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count ) using hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, const hipMemAccessDesc *desc_list, size_t count)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemAccessDesc to cudaMemAccessDesc\ncudaMemAccessDesc hipMemAccessDesc_TO_cudaMemAccessDesc(hipMemAccessDesc);\n\n// cudaMemAccessDesc to hipMemAccessDesc\nhipMemAccessDesc cudaMemAccessDesc_TO_hipMemAccessDesc(cudaMemAccessDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count ) using hipError_t hipMemPoolSetAccess (hipMemPool_t mem_pool, const hipMemAccessDesc *desc_list, size_t count)\nextern \"C\"  cudaError_t cudaMemPoolSetAccess (  cudaMemPool_t memPool, const cudaMemAccessDesc* descList, size_t count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolSetAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolSetAccess (hipMemPool_t_TO_cudaMemPool_t(memPool), descList, count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAccess (  cudaMemPool_t memPool, cudaMemAccessDesc* descList, size_t* count ) using hipError_t hipMemPoolGetAccess (hipMemPool_t mem_pool, hipMemAccessDesc *desc_list, size_t *count)\nextern \"C\"  cudaError_t cudaMemPoolGetAccess (  cudaMemPool_t memPool, cudaMemAccessDesc* descList, size_t* count )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAccess call\" << std::endl;\n    // Translate the call to its",
      "forcePrediction": false
    },
    "cudaMemPoolSetAttribute": {
      "cuda": "cudaMemPoolSetAttribute",
      "hip": "hipMemPoolSetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolSetAttribute",
        "args": "  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ",
        "types": [
          "cudaMemPool_t",
          "cudaMemPoolAttr",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolSetAttribute"
        ],
        "argsstring": [
          "(hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)"
        ],
        "name": [
          "hipMemPoolSetAttribute"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPoolAttr",
                    "$": {
                      "refid": "group___global_defs_1ga987c8e7a7e8171832a6647150854ca2e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets attributes of a memory pool. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Supported attributes are:\n",
                "itemizedlist": [
                  {
                    "listitem": [
                      {
                        "para": [
                          {
                            "_": " (value type = cuuint64_t) Amount of reserved memory in bytes to hold onto before trying to release memory back to the OS. When more than the release threshold bytes of memory are held by the memory pool, the allocator will try to release memory back to the OS on the next call to stream, event or context synchronize. (default 0)",
                            "computeroutput": [
                              "hipMemPoolAttrReleaseThreshold:"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow  to use memory asynchronously freed in another stream as long as a stream ordering dependency of the allocating stream on the free action exists. HIP events and null stream interactions can create the required stream ordered dependencies. (default enabled)",
                            "computeroutput": [
                              "hipMemPoolReuseFollowEventDependencies:",
                              "hipMallocAsync"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow reuse of already completed frees when there is no dependency between the free and allocation. (default enabled)",
                            "computeroutput": [
                              "hipMemPoolReuseAllowOpportunistic:"
                            ]
                          }
                        ]
                      },
                      {
                        "para": [
                          {
                            "_": " (value type = int) Allow  to insert new stream dependencies in order to establish the stream ordering required to reuse a piece of memory released by  (default enabled).",
                            "computeroutput": [
                              "hipMemPoolReuseAllowInternalDependencies:",
                              "hipMallocAsync",
                              "hipFreeAsync"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The memory pool to modify "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The attribute to modify "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer to the value to assign"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolTrimTo",
                            "$": {
                              "refid": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3431",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3431",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "hipMemPoolAttr",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )",
      "hipLine": "hipError_t hipMemPoolSetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)",
      "graft": "// cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolSetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaMemPoolAttr to hipMemPoolAttr\nhipMemPoolAttr cudaMemPoolAttr_TO_hipMemPoolAttr(cudaMemPoolAttr);\n\n// hipMemPoolAttr to cudaMemPoolAttr\ncudaMemPoolAttr hipMemPoolAttr_TO_cudaMemPoolAttr(hipMemPoolAttr);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolSetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\"  cudaError_t cudaMemPoolSetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolSetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolSetAttribute ( hipMemPool_t_TO_hipMemPool_t(memPool), hipMemPoolAttr_TO_hipMemPoolAttr(attr), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value ) using hipError_t hipMemPoolGetAttribute (hipMemPool_t mem_pool, hipMemPoolAttr attr, void *value)\nextern \"C\"  cudaError_t cudaMemPoolGetAttribute (  cudaMemPool_t memPool, cudaMemPoolAttr attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hip",
      "forcePrediction": false
    },
    "cudaMemPoolTrimTo": {
      "cuda": "cudaMemPoolTrimTo",
      "hip": "hipMemPoolTrimTo",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaMemPoolTrimTo",
        "args": "  cudaMemPool_t memPool, size_t minBytesToKeep ",
        "types": [
          "cudaMemPool_t",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___stream_o_1ga4cd76526312084a115c6007d41ba9b96",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipMemPoolTrimTo"
        ],
        "argsstring": [
          "(hipMemPool_t mem_pool, size_t min_bytes_to_hold)"
        ],
        "name": [
          "hipMemPoolTrimTo"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemPool_t",
                    "$": {
                      "refid": "group___global_defs_1gaf61ebfa5ef0825fb2a763ae42daa20f0",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "mem_pool"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "min_bytes_to_hold"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Releases freed memory back to the OS. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "Releases memory back to the OS until the pool contains fewer than  reserved bytes, or there is no more memory that the allocator can safely release. The allocator cannot release OS allocations that back outstanding asynchronous allocations. The OS allocations may happen at different granularity from the user allocations.",
                "computeroutput": [
                  "min_bytes_to_keep"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      ": Allocations that have not been freed count as outstanding. "
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      ": Allocations that have been asynchronously freed but whose completion has not been observed on the host (eg. by a synchronize) can count as outstanding."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "_": ", , , , , , , ",
                        "ref": [
                          {
                            "_": "hipMallocFromPoolAsync",
                            "$": {
                              "refid": "group___stream_o_1ga24cab3e20805d8df79a06db1bb0d9938",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMallocAsync",
                            "$": {
                              "refid": "group___stream_o_1gab9b9031bb65f8f9e54487ff8b726591f",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipFreeAsync",
                            "$": {
                              "refid": "group___stream_o_1ga42543ee2625b87cfd4f6ec29ae11c3d8",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga8ac80ed79a85f4e7a9ce33abfbd8f136",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipDeviceSetMemPool",
                            "$": {
                              "refid": "group___device_1ga29fd231db3cb31fde8f776d5b073e407",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAttribute",
                            "$": {
                              "refid": "group___stream_o_1ga89006d354ee6e0428a432d6f2e76c8bf",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolSetAccess",
                            "$": {
                              "refid": "group___stream_o_1ga6198235d5ae856c21f8507fc218e5c0c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipMemPoolGetAccess",
                            "$": {
                              "refid": "group___stream_o_1gabefabb7f014dac6b6f646a517c8dd0a6",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues."
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "This API is implemented on Linux, under development on Windows. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mem_pool",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "The memory pool to trim allocations "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "min_bytes_to_hold",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "If the pool has less than min_bytes_to_hold reserved, then the TrimTo operation is a no-op. Otherwise the memory pool will contain at least min_bytes_to_hold bytes reserved after the operation."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "3392",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "3392",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipMemPool_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaMemPoolTrimTo (  cudaMemPool_t memPool, size_t minBytesToKeep )",
      "hipLine": "hipError_t hipMemPoolTrimTo (hipMemPool_t mem_pool, size_t min_bytes_to_hold)",
      "graft": "// cudaError_t cudaMemPoolTrimTo (  cudaMemPool_t memPool, size_t minBytesToKeep ) using hipError_t hipMemPoolTrimTo (hipMemPool_t mem_pool, size_t min_bytes_to_hold)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n\n// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolTrimTo (  cudaMemPool_t memPool, size_t minBytesToKeep ) using hipError_t hipMemPoolTrimTo (hipMemPool_t mem_pool, size_t min_bytes_to_hold)\nextern \"C\"  cudaError_t cudaMemPoolTrimTo (  cudaMemPool_t memPool, size_t minBytesToKeep )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolTrimTo call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMemPoolTrimTo ( hipMemPool_t_TO_cudaMemPool_t(memPool), minBytesToKeep );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaMemPoolGetAttribute (  void* value, cudaMemPoolAttr attr, cudaMemPool_t memPool ) using hipError_t hipMemPoolGetAttribute (void* value, hipMemPoolAttr attr, hipMemPool_t mem_pool)\nextern \"C\"  cudaError_t cudaMemPoolGetAttribute (  void* value, cudaMemPoolAttr attr, cudaMemPool_t memPool )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaMemPoolGetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipMem",
      "forcePrediction": false
    },
    "cudaPointerGetAttributes": {
      "cuda": "cudaPointerGetAttributes",
      "hip": "hipPointerGetAttributes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaPointerGetAttributes",
        "args": "  cudaPointerAttributes* attributes, const void* ptr ",
        "types": [
          "cudaPointerAttributesundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___memory_1ga7c3e8663feebb7be9fd3a1e5139bcefc",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipPointerGetAttributes"
        ],
        "argsstring": [
          "(hipPointerAttribute_t *attributes, const void *ptr)"
        ],
        "name": [
          "hipPointerGetAttributes"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipPointerAttribute_t",
                    "$": {
                      "refid": "structhip_pointer_attribute__t",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attributes"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "ptr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns attributes for the specified pointer. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nThe output parameter 'attributes' has a member named 'type' that describes what memory the pointer is associated with, such as device memory, host memory, managed memory, and others. Otherwise, the API cannot handle the pointer and returns .",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attributes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "attributes for the specified pointer "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to get attributes for"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "ref": [
                  {
                    "_": "hipErrorInvalidValue",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                      "kindref": "member"
                    }
                  }
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "The unrecognized memory type is unsupported to keep the HIP functionality backward compatibility due to  enum values.",
                        "ref": [
                          {
                            "_": "hipMemoryType",
                            "$": {
                              "refid": "group___global_defs_1gaea86e91d3cd65992d787b39b218435a3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "The current behavior of this HIP API corresponds to the CUDA API before version 11.0."
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipPointerGetAttribute",
                            "$": {
                              "refid": "group___memory_1gaf147601f5094423a9810db112ef8ef07",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "2902",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "2902",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipPointerAttribute_t",
          "const void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaPointerGetAttributes (  cudaPointerAttributes* attributes, const void* ptr )",
      "hipLine": "hipError_t hipPointerGetAttributes (hipPointerAttribute_t *attributes, const void *ptr)",
      "graft": "// cudaError_t cudaPointerGetAttributes (  cudaPointerAttributes* attributes, const void* ptr ) using hipError_t hipPointerGetAttributes (hipPointerAttribute_t *attributes, const void *ptr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipPointerAttribute_t to cudaPointerAttributes\ncudaPointerAttributes hipPointerAttribute_t_TO_cudaPointerAttributes(hipPointerAttribute_t);\n\n// cudaPointerAttributes to hipPointerAttribute_t\nhipPointerAttribute_t cudaPointerAttributes_TO_hipPointerAttribute_t(cudaPointerAttributes);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaPointerGetAttributes (  cudaPointerAttributes* attributes, const void* ptr ) using hipError_t hipPointerGetAttributes (hipPointerAttribute_t *attributes, const void *ptr)\nextern \"C\"  cudaError_t cudaPointerGetAttributes (  cudaPointerAttributes* attributes, const void* ptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaPointerGetAttributes call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipPointerGetAttributes ( (hipPointerAttribute_t*) attributes, ptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t* prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties ( (hipDeviceProp_t*) prop, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice ( int* device ) using hipError_",
      "forcePrediction": false
    },
    "cudaDeviceCanAccessPeer": {
      "cuda": "cudaDeviceCanAccessPeer",
      "hip": "hipDeviceCanAccessPeer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceCanAccessPeer",
        "args": "  int* canAccessPeer, int  device, int  peerDevice ",
        "types": [
          "intundefined",
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___peer_to_peer_1ga0a1c9ccd775758d9d7d5b5a1f525b719",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceCanAccessPeer"
        ],
        "argsstring": [
          "(int *canAccessPeer, int deviceId, int peerDeviceId)"
        ],
        "name": [
          "hipDeviceCanAccessPeer"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "canAccessPeer"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "deviceId"
            ]
          },
          {
            "type": [
              "int"
            ],
            "declname": [
              "peerDeviceId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Determine if a device can access a peer's memory. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\nReturns \"1\" in  if the specified  is capable of directly accessing memory physically located on peerDevice , or \"0\" if not.",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "canAccessPeer",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Returns the peer access capability (0 or 1) "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "deviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- device from where memory may be accessed. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "peerDeviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- device where memory is physically located"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "computeroutput": [
                  "canAccessPeer",
                  "device"
                ]
              },
              {
                "_": "Returns \"0\" in  if deviceId == peerDeviceId, and both are valid devices : a device is not a peer of itself.",
                "computeroutput": [
                  "canAccessPeer"
                ]
              },
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": " if deviceId or peerDeviceId are not valid devices ",
                        "ref": [
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4773",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4773",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceCanAccessPeer (  int* canAccessPeer, int  device, int  peerDevice )",
      "hipLine": "hipError_t hipDeviceCanAccessPeer (int *canAccessPeer, int deviceId, int peerDeviceId)",
      "graft": "// cudaError_t cudaDeviceCanAccessPeer (  int* canAccessPeer, int  device, int  peerDevice ) using hipError_t hipDeviceCanAccessPeer (int *canAccessPeer, int deviceId, int peerDeviceId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceCanAccessPeer (  int* canAccessPeer, int  device, int  peerDevice ) using hipError_t hipDeviceCanAccessPeer (int *canAccessPeer, int deviceId, int peerDeviceId)\nextern \"C\"  cudaError_t cudaDeviceCanAccessPeer (  int* canAccessPeer, int  device, int  peerDevice )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceCanAccessPeer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceCanAccessPeer (canAccessPeer, device, peerDevice);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags ) using hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned int flags)\nextern \"C\"  cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t c",
      "forcePrediction": false
    },
    "cudaDeviceDisablePeerAccess": {
      "cuda": "cudaDeviceDisablePeerAccess",
      "hip": "hipDeviceDisablePeerAccess",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceDisablePeerAccess",
        "args": "  int  peerDevice ",
        "types": [
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___peer_to_peer_1ga85030c72824fb60aaddc7374ab60481b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceDisablePeerAccess"
        ],
        "argsstring": [
          "(int peerDeviceId)"
        ],
        "name": [
          "hipDeviceDisablePeerAccess"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "peerDeviceId"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Disable direct access from current device's virtual address space to memory allocations physically located on a peer device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Returns hipErrorPeerAccessNotEnabled if direct access to memory on peerDevice has not yet been enabled from the current device.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "peerDeviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Peer device to disable direct access to"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorPeerAccessNotEnabled",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a5605bce676c6a2b37d04a21971f0d596",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4802",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4802",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice )",
      "hipLine": "hipError_t hipDeviceDisablePeerAccess (int peerDeviceId)",
      "graft": "// cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice ) using hipError_t hipDeviceDisablePeerAccess (int peerDeviceId)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice ) using hipError_t hipDeviceDisablePeerAccess (int peerDeviceId)\nextern \"C\"  cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceDisablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceDisablePeerAccess (peerDevice);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice,  unsigned  flags ) using hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned flags)\nextern \"C\"  cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice,  unsigned  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetAttribute (  int* value,  enum cudaDevice",
      "forcePrediction": false
    },
    "cudaDeviceEnablePeerAccess": {
      "cuda": "cudaDeviceEnablePeerAccess",
      "hip": "hipDeviceEnablePeerAccess",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceEnablePeerAccess",
        "args": "  int  peerDevice, unsigned int  flags ",
        "types": [
          "int",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___peer_to_peer_1ga0caca59034134d7a7bb893cc1caa653e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceEnablePeerAccess"
        ],
        "argsstring": [
          "(int peerDeviceId, unsigned int flags)"
        ],
        "name": [
          "hipDeviceEnablePeerAccess"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "peerDeviceId"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Enable direct access from current device's virtual address space to memory allocations physically located on a peer device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Memory which already allocated on peer device will be mapped into the address space of the current device. In addition, all future memory allocations on peerDeviceId will be mapped into the address space of the current device when the memory is allocated. The peer memory remains accessible from the current device until a call to hipDeviceDisablePeerAccess or hipDeviceReset.",
              {
                "_": "\nReturns , , , \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "peerDeviceId",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Peer device to enable direct access to from the current device "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Reserved for future use, must be zero"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "ref": [
                  {
                    "_": "hipSuccess",
                    "$": {
                      "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorInvalidDevice",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                      "kindref": "member"
                    }
                  },
                  {
                    "_": "hipErrorInvalidValue",
                    "$": {
                      "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                      "kindref": "member"
                    }
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": " if peer access is already enabled for this device. ",
                        "ref": [
                          {
                            "_": "hipErrorPeerAccessAlreadyEnabled",
                            "$": {
                              "refid": "hip__runtime__api_8h_1acf78b2ed8f41d21e8f23eaa084c75349",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "4790",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "4790",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags )",
      "hipLine": "hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned int flags)",
      "graft": "// cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags ) using hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags ) using hipError_t hipDeviceEnablePeerAccess (int peerDeviceId, unsigned int flags)\nextern \"C\"  cudaError_t cudaDeviceEnablePeerAccess (  int  peerDevice, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceEnablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceEnablePeerAccess (peerDevice, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice ) using hipError_t hipDeviceDisablePeerAccess (int peerDeviceId)\nextern \"C\"  cudaError_t cudaDeviceDisablePeerAccess (  int  peerDevice )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceDisablePeerAccess call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceDisablePeerAccess (peerDevice);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceCanAccessPeer (  int* canAccessPeer, int  device, int ",
      "forcePrediction": false
    },
    "cudaGraphicsMapResources": {
      "cuda": "cudaGraphicsMapResources",
      "hip": "hipGraphicsMapResources",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphicsMapResources",
        "args": "  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ",
        "types": [
          "int",
          "cudaGraphicsResource_tundefined",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___g_l_1gac625a73bf06d50c6554c08cb28e63aa6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphicsMapResources"
        ],
        "argsstring": [
          "(int count, hipGraphicsResource_t *resources, hipStream_t stream)"
        ],
        "name": [
          "hipGraphicsMapResources"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphicsResource_t",
                    "$": {
                      "refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "resources"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Maps a graphics resource for access. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Number of resources to map. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "resources",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer of resources to map. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream for synchronization."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorUnknown",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidResourceHandle",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3d3fd8119e311ec4c028e74225d5edc2",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8309",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8309",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipGraphicsResource_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphicsMapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipGraphicsMapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)",
      "graft": "// cudaError_t cudaGraphicsMapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ) using hipError_t hipGraphicsMapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n\n// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsMapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ) using hipError_t hipGraphicsMapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)\nextern \"C\"  cudaError_t cudaGraphicsMapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsMapResources call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsMapResources (count, resources, cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ) using hipError_t hipGraphicsUnmapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)\nextern \"C\"  cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsUnmapResources call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsUnmap",
      "forcePrediction": false
    },
    "cudaGraphicsResourceGetMappedPointer": {
      "cuda": "cudaGraphicsResourceGetMappedPointer",
      "hip": "hipGraphicsResourceGetMappedPointer",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphicsResourceGetMappedPointer",
        "args": "  void** devPtr, size_t* size, cudaGraphicsResource_t resource ",
        "types": [
          "voidundefined*",
          "size_tundefined",
          "cudaGraphicsResource_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___g_l_1gac06c5fe793213a7cc4047c2ae42fd915",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphicsResourceGetMappedPointer"
        ],
        "argsstring": [
          "(void **devPtr, size_t *size, hipGraphicsResource_t resource)"
        ],
        "name": [
          "hipGraphicsResourceGetMappedPointer"
        ],
        "param": [
          {
            "type": [
              "void **"
            ],
            "declname": [
              "devPtr"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "size"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphicsResource_t",
                    "$": {
                      "refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "resource"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets device accessible address of a graphics resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "devPtr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer of device through which graphic resource may be accessed. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "size",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Size of the buffer accessible from devPtr. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "resource",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Mapped resource to access."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8336",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8336",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "void undefined*",
          "size_t undefined",
          "hipGraphicsResource_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphicsResourceGetMappedPointer (  void** devPtr, size_t* size, cudaGraphicsResource_t resource )",
      "hipLine": "hipError_t hipGraphicsResourceGetMappedPointer (void **devPtr, size_t *size, hipGraphicsResource_t resource)",
      "graft": "// cudaError_t cudaGraphicsResourceGetMappedPointer (  void** devPtr, size_t* size, cudaGraphicsResource_t resource ) using hipError_t hipGraphicsResourceGetMappedPointer (void **devPtr, size_t *size, hipGraphicsResource_t resource)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n\n// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsResourceGetMappedPointer (  void** devPtr, size_t* size, cudaGraphicsResource_t resource ) using hipError_t hipGraphicsResourceGetMappedPointer (void **devPtr, size_t *size, hipGraphicsResource_t resource)\nextern \"C\"  cudaError_t cudaGraphicsResourceGetMappedPointer (  void** devPtr, size_t* size, cudaGraphicsResource_t resource )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsResourceGetMappedPointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsResourceGetMappedPointer (devPtr, size, cudaGraphicsResource_t_TO_hipGraphicsResource_t(resource));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsResourceSetMapFlags ( cudaGraphicsResource_t resource, unsigned int flags ) using hipError_t hipGraphicsResourceSetMapFlags (hipGraphicsResource_t resource, unsigned int flags)\nextern \"C\" cudaError_t cudaGraphicsResourceSetMapFlags ( cudaGraphicsResource_t resource, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsResourceSetMapFlags call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsResourceSetMapFlags (cudaGraphicsResource_t_TO_hipGraphicsResource_t(resource",
      "forcePrediction": false
    },
    "cudaGraphicsSubResourceGetMappedArray": {
      "cuda": "cudaGraphicsSubResourceGetMappedArray",
      "hip": "hipGraphicsSubResourceGetMappedArray",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphicsSubResourceGetMappedArray",
        "args": "  cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int  arrayIndex, unsigned int  mipLevel ",
        "types": [
          "cudaArray_tundefined",
          "cudaGraphicsResource_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___g_l_1ga9051a8bc901816be265c5de8f2202775",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphicsSubResourceGetMappedArray"
        ],
        "argsstring": [
          "(hipArray_t *array, hipGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)"
        ],
        "name": [
          "hipGraphicsSubResourceGetMappedArray"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipArray_t",
                    "$": {
                      "refid": "driver__types_8h_1a489732842b8866d0af94040a296299a6",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphicsResource_t",
                    "$": {
                      "refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "resource"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "arrayIndex"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "mipLevel"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Get an array through which to access a subresource of a mapped graphics resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer of array through which a subresource of resource may be accessed. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "resource",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Mapped resource to access. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "arrayIndex",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Array index for the subresource to access. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "mipLevel",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Mipmap level for the subresource to access."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "In this API, the value of arrayIndex higher than zero is currently not supported. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8324",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8324",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipArray_t",
          "hipGraphicsResource_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphicsSubResourceGetMappedArray (  cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int  arrayIndex, unsigned int  mipLevel )",
      "hipLine": "hipError_t hipGraphicsSubResourceGetMappedArray (hipArray_t *array, hipGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)",
      "graft": "// cudaError_t cudaGraphicsSubResourceGetMappedArray (  cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int  arrayIndex, unsigned int  mipLevel ) using hipError_t hipGraphicsSubResourceGetMappedArray (hipArray_t *array, hipGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n\n// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n\n// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsSubResourceGetMappedArray (  cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int  arrayIndex, unsigned int  mipLevel ) using hipError_t hipGraphicsSubResourceGetMappedArray (hipArray_t *array, hipGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel)\nextern \"C\"  cudaError_t cudaGraphicsSubResourceGetMappedArray (  cudaArray_t* array, cudaGraphicsResource_t resource, unsigned int  arrayIndex, unsigned int  mipLevel )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsSubResourceGetMappedArray call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsSubResourceGetMappedArray (array, hipGraphicsResource_t_TO_cudaGraphicsResource_t(resource), arrayIndex, mipLevel);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsUnregisterResource ( cudaGraphicsResource_t resource ) using hipError_t hipGraphicsUnregisterResource (hipGraphicsResource_t resource)\nextern \"C\" cudaError_t cudaGraphicsUnregisterResource ( cudaGraphicsResource_t resource )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsUnregisterResource call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsUnregisterResource (hipGraphicsResource_t_TO_cudaGraphicsResource_t(resource",
      "forcePrediction": false
    },
    "cudaGraphicsUnmapResources": {
      "cuda": "cudaGraphicsUnmapResources",
      "hip": "hipGraphicsUnmapResources",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphicsUnmapResources",
        "args": "  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ",
        "types": [
          "int",
          "cudaGraphicsResource_tundefined",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___g_l_1ga6a14e77207a54c59dea731345e3e6e72",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphicsUnmapResources"
        ],
        "argsstring": [
          "(int count, hipGraphicsResource_t *resources, hipStream_t stream)"
        ],
        "name": [
          "hipGraphicsUnmapResources"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphicsResource_t",
                    "$": {
                      "refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "resources"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Unmaps graphics resources. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Number of resources to unmap. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "resources",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer of resources to unmap. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Stream for synchronization."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorUnknown",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae67bef804631be7d7eeebb93d933958c",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorContextIsDestroyed",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6351a54f4747c7ada9963ca60ec74cf4",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8348",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8348",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipGraphicsResource_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )",
      "hipLine": "hipError_t hipGraphicsUnmapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)",
      "graft": "// cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ) using hipError_t hipGraphicsUnmapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n\n// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n\n// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 ) using hipError_t hipGraphicsUnmapResources (int count, hipGraphicsResource_t *resources, hipStream_t stream)\nextern \"C\"  cudaError_t cudaGraphicsUnmapResources (  int  count, cudaGraphicsResource_t* resources, cudaStream_t stream = 0 )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsUnmapResources call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsUnmapResources (count, cudaGraphicsResource_t_TO_hipGraphicsResource_t(resources), cudaStream_t_TO_hipStream_t(stream));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsResourceGetMappedPointer ( void** devPtr, size_t* size, cudaGraphicsResource_t resource ) using hipError_t hipGraphicsResourceGetMappedPointer (void** devPtr, size_t* size, hipGraphicsResource_t resource)\nextern \"C\" cudaError_t cudaGraphicsResourceGetMappedPointer ( void** devPtr, size_t* size, cudaGraphicsResource_t resource )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsResourceGetMappedPointer call\" << std::endl;\n    // Translate the call to its H",
      "forcePrediction": false
    },
    "cudaGraphicsUnregisterResource": {
      "cuda": "cudaGraphicsUnregisterResource",
      "hip": "hipGraphicsUnregisterResource",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphicsUnregisterResource",
        "args": "  cudaGraphicsResource_t resource ",
        "types": [
          "cudaGraphicsResource_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___g_l_1ga48344c780768da2002fcfe3395c6a0c0",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphicsUnregisterResource"
        ],
        "argsstring": [
          "(hipGraphicsResource_t resource)"
        ],
        "name": [
          "hipGraphicsUnregisterResource"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphicsResource_t",
                    "$": {
                      "refid": "group___global_defs_1ga0844c3ebc78e5c8d91dca7379b3e0930",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "resource"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Unregisters a graphics resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "resource",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Graphics resources to unregister."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8358",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8358",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphicsResource_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphicsUnregisterResource (  cudaGraphicsResource_t resource )",
      "hipLine": "hipError_t hipGraphicsUnregisterResource (hipGraphicsResource_t resource)",
      "graft": "// cudaError_t cudaGraphicsUnregisterResource (  cudaGraphicsResource_t resource ) using hipError_t hipGraphicsUnregisterResource (hipGraphicsResource_t resource)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n\n// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsUnregisterResource (  cudaGraphicsResource_t resource ) using hipError_t hipGraphicsUnregisterResource (hipGraphicsResource_t resource)\nextern \"C\"  cudaError_t cudaGraphicsUnregisterResource (  cudaGraphicsResource_t resource )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsUnregisterResource call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsUnregisterResource (  cudaGraphicsResource_t_TO_hipGraphicsResource_t(resource) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphicsResourceGetMappedPointer ( void** devPtr, size_t* size, cudaGraphicsResource_t resource ) using hipError_t hipGraphicsResourceGetMappedPointer (void** devPtr, size_t* size, hipGraphicsResource_t resource)\nextern \"C\"  cudaError_t cudaGraphicsResourceGetMappedPointer ( void** devPtr, size_t* size, cudaGraphicsResource_t resource )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphicsResourceGetMappedPointer call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphicsResourceGetMappedPointer ( devPtr, size, cudaGraphicsResource",
      "forcePrediction": false
    },
    "cudaCreateTextureObject": {
      "cuda": "cudaCreateTextureObject",
      "hip": "hipCreateTextureObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaCreateTextureObject",
        "args": "  cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc ",
        "types": [
          "cudaTextureObject_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1ga8118c199ca3f347b5b5fd919bb624801",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipCreateTextureObject"
        ],
        "argsstring": [
          "(hipTextureObject_t *pTexObject, const hipResourceDesc *pResDesc, const hipTextureDesc *pTexDesc, const struct hipResourceViewDesc *pResViewDesc)"
        ],
        "name": [
          "hipCreateTextureObject"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipTextureObject_t",
                    "$": {
                      "refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pTexObject"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipResourceDesc",
                    "$": {
                      "refid": "structhip_resource_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pResDesc"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipTextureDesc",
                    "$": {
                      "refid": "structhip_texture_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pTexDesc"
            ]
          },
          {
            "type": [
              {
                "_": "const struct  *",
                "ref": [
                  {
                    "_": "hipResourceViewDesc",
                    "$": {
                      "refid": "structhip_resource_view_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pResViewDesc"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a texture object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pTexObject",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to the texture object to create "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pResDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to resource descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pTexDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to texture descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pResViewDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to resource view descriptor"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorNotSupported",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ad037fb0b0de6155067a1a561070008cc",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      {
                        "_": "3D liner filter isn't supported on GFX90A boards, on which the API  will return hipErrorNotSupported. ",
                        "computeroutput": [
                          "hipCreateTextureObject"
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5790",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5790",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipTextureObject_t",
          "hipResourceDesc",
          "hipTextureDesc",
          "hipResourceViewDesc",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaCreateTextureObject (  cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc )",
      "hipLine": "hipError_t hipCreateTextureObject (hipTextureObject_t *pTexObject, const hipResourceDesc *pResDesc, const hipTextureDesc *pTexDesc, const struct hipResourceViewDesc *pResViewDesc)",
      "graft": "// cudaError_t cudaCreateTextureObject (  cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc ) using hipError_t hipCreateTextureObject (hipTextureObject_t *pTexObject, const hipResourceDesc *pResDesc, const hipTextureDesc *pTexDesc, const struct hipResourceViewDesc *pResViewDesc)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n\n// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n\n// hipResourceDesc to cudaResourceDesc\ncudaResourceDesc hipResourceDesc_TO_cudaResourceDesc(hipResourceDesc);\n\n// cudaResourceDesc to hipResourceDesc\nhipResourceDesc cudaResourceDesc_TO_hipResourceDesc(cudaResourceDesc);\n\n// hipTextureDesc to cudaTextureDesc\ncudaTextureDesc hipTextureDesc_TO_cudaTextureDesc(hipTextureDesc);\n\n// cudaTextureDesc to hipTextureDesc\nhipTextureDesc cudaTextureDesc_TO_hipTextureDesc(cudaTextureDesc);\n\n// hipResourceViewDesc to cudaResourceViewDesc\ncudaResourceViewDesc hipResourceViewDesc_TO_cudaResourceViewDesc(hipResourceViewDesc);\n\n// cudaResourceViewDesc to hipResourceViewDesc\nhipResourceViewDesc cudaResourceViewDesc_TO_hipResourceViewDesc(cudaResourceViewDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaCreateTextureObject (  cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc ) using hipError_t hipCreateTextureObject (hipTextureObject_t *pTexObject, const hipResourceDesc *pResDesc, const hipTextureDesc *pTexDesc, const struct hipResourceViewDesc *pResViewDesc)\nextern \"C\"  cudaError_t cudaCreateTextureObject (  cudaTextureObject_t* pTexObject, const cudaResourceDesc* pResDesc, const cudaTextureDesc* pTexDesc, const cudaResourceViewDesc* pResViewDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaCreateTextureObject call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipCreateTextureObject (pTexObject, cudaResourceDesc_TO_hipResourceDesc(*pResDesc), cudaTextureDesc_TO_hipTextureDesc(*pTexDesc), cudaResourceViewDesc_TO_hipResourceViewDesc(*pResViewDesc));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroyTextureObject ( cudaTextureObject_t texObject ) using hipError_t hipDestroyTextureObject (hipTextureObject_t texObject)\nextern \"C\" cudaError_t cudaDestroyTextureObject ( cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroyTextureObject call\" << std::endl;\n    // Translate the call to its HIP counterpart",
      "forcePrediction": false
    },
    "cudaDestroyTextureObject": {
      "cuda": "cudaDestroyTextureObject",
      "hip": "hipDestroyTextureObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDestroyTextureObject",
        "args": "  cudaTextureObject_t texObject ",
        "types": [
          "cudaTextureObject_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1gad62c874fe1ae049c9e93a83623b3a82f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDestroyTextureObject"
        ],
        "argsstring": [
          "(hipTextureObject_t textureObject)"
        ],
        "name": [
          "hipDestroyTextureObject"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipTextureObject_t",
                    "$": {
                      "refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "textureObject"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys a texture object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "textureObject",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "texture object to destroy"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5804",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5804",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipTextureObject_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDestroyTextureObject (  cudaTextureObject_t texObject )",
      "hipLine": "hipError_t hipDestroyTextureObject (hipTextureObject_t textureObject)",
      "graft": "// cudaError_t cudaDestroyTextureObject (  cudaTextureObject_t texObject ) using hipError_t hipDestroyTextureObject (hipTextureObject_t textureObject)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n\n// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroyTextureObject (  cudaTextureObject_t texObject ) using hipError_t hipDestroyTextureObject (hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaDestroyTextureObject (  cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroyTextureObject call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDestroyTextureObject (  hipTextureObject_t_TO_cudaTextureObject_t(texObject) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceDesc ( hipResourceDesc* pResDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectResourceDesc ( pResDesc, hipTextureObject_t_TO_cudaTextureObject",
      "forcePrediction": false
    },
    "cudaGetChannelDesc": {
      "cuda": "cudaGetChannelDesc",
      "hip": "hipGetChannelDesc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetChannelDesc",
        "args": "  cudaChannelFormatDesc* desc, cudaArray_const_t array ",
        "types": [
          "cudaChannelFormatDescundefined",
          "cudaArray_const_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1gab87485da6ded39aed13c062a4570f316",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetChannelDesc"
        ],
        "argsstring": [
          "(hipChannelFormatDesc *desc, hipArray_const_t array)"
        ],
        "name": [
          "hipGetChannelDesc"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipChannelFormatDesc",
                    "$": {
                      "refid": "structhip_channel_format_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "desc"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipArray_const_t",
                    "$": {
                      "refid": "driver__types_8h_1a9f60656acb28958101d89192f365babc",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "array"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets the channel descriptor in an array. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "desc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to channel format descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "array",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "memory array on the device"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5815",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5815",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipChannelFormatDesc",
          "hipArray_const_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetChannelDesc (  cudaChannelFormatDesc* desc, cudaArray_const_t array )",
      "hipLine": "hipError_t hipGetChannelDesc (hipChannelFormatDesc *desc, hipArray_const_t array)",
      "graft": "// cudaError_t cudaGetChannelDesc (  cudaChannelFormatDesc* desc, cudaArray_const_t array ) using hipError_t hipGetChannelDesc (hipChannelFormatDesc *desc, hipArray_const_t array)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaArray_const_t to hipArray_const_t\nhipArray_const_t cudaArray_const_t_TO_hipArray_const_t(cudaArray_const_t);\n\n// hipArray_const_t to cudaArray_const_t\ncudaArray_const_t hipArray_const_t_TO_cudaArray_const_t(hipArray_const_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n\n// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetChannelDesc (  cudaChannelFormatDesc* desc, cudaArray_const_t array ) using hipError_t hipGetChannelDesc (hipChannelFormatDesc *desc, hipArray_const_t array)\nextern \"C\"  cudaError_t cudaGetChannelDesc (  cudaChannelFormatDesc* desc, cudaArray_const_t array )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetChannelDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetChannelDesc (desc, hipArray_const_t_TO_cudaArray_const_t(array));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties (hipDeviceProp_t* prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties (prop, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice (",
      "forcePrediction": false
    },
    "cudaGetTextureObjectResourceDesc": {
      "cuda": "cudaGetTextureObjectResourceDesc",
      "hip": "hipGetTextureObjectResourceDesc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetTextureObjectResourceDesc",
        "args": "  cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ",
        "types": [
          "cudaResourceDescundefined",
          "cudaTextureObject_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1ga5eb7e8f8a486500243cb43b0a3d11d06",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetTextureObjectResourceDesc"
        ],
        "argsstring": [
          "(hipResourceDesc *pResDesc, hipTextureObject_t textureObject)"
        ],
        "name": [
          "hipGetTextureObjectResourceDesc"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipResourceDesc",
                    "$": {
                      "refid": "structhip_resource_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pResDesc"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipTextureObject_t",
                    "$": {
                      "refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "textureObject"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets resource descriptor for the texture object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pResDesc",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to resource descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "textureObject",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "texture object"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5828",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5828",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipResourceDesc",
          "hipTextureObject_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetTextureObjectResourceDesc (  cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )",
      "hipLine": "hipError_t hipGetTextureObjectResourceDesc (hipResourceDesc *pResDesc, hipTextureObject_t textureObject)",
      "graft": "// cudaError_t cudaGetTextureObjectResourceDesc (  cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceDesc (hipResourceDesc *pResDesc, hipTextureObject_t textureObject)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n\n// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipResourceDesc to cudaResourceDesc\ncudaResourceDesc hipResourceDesc_TO_cudaResourceDesc(hipResourceDesc);\n\n// cudaResourceDesc to hipResourceDesc\nhipResourceDesc cudaResourceDesc_TO_hipResourceDesc(cudaResourceDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceDesc (  cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceDesc (hipResourceDesc *pResDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectResourceDesc (  cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectResourceDesc (pResDesc, texObject_TO_hipTextureObject_t(texObject));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceViewDesc (hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceViewDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hip",
      "forcePrediction": false
    },
    "cudaGetTextureObjectResourceViewDesc": {
      "cuda": "cudaGetTextureObjectResourceViewDesc",
      "hip": "hipGetTextureObjectResourceViewDesc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetTextureObjectResourceViewDesc",
        "args": "  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject ",
        "types": [
          "cudaResourceViewDescundefined",
          "cudaTextureObject_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1ga748e53ac1b10eb11d41efab0de154966",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetTextureObjectResourceViewDesc"
        ],
        "argsstring": [
          "(struct hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)"
        ],
        "name": [
          "hipGetTextureObjectResourceViewDesc"
        ],
        "param": [
          {
            "type": [
              {
                "_": "struct  *",
                "ref": [
                  {
                    "_": "hipResourceViewDesc",
                    "$": {
                      "refid": "structhip_resource_view_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pResViewDesc"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipTextureObject_t",
                    "$": {
                      "refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "textureObject"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets resource view descriptor for the texture object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pResViewDesc",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to resource view descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "textureObject",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "texture object"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5841",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5841",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipResourceViewDesc",
          "hipTextureObject_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject )",
      "hipLine": "hipError_t hipGetTextureObjectResourceViewDesc (struct hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)",
      "graft": "// cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceViewDesc (struct hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n\n// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipResourceViewDesc to cudaResourceViewDesc\ncudaResourceViewDesc hipResourceViewDesc_TO_cudaResourceViewDesc(hipResourceViewDesc);\n\n// cudaResourceViewDesc to hipResourceViewDesc\nhipResourceViewDesc cudaResourceViewDesc_TO_hipResourceViewDesc(cudaResourceViewDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceViewDesc (struct hipResourceViewDesc *pResViewDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectResourceViewDesc (  cudaResourceViewDesc* pResViewDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceViewDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectResourceViewDesc (pResViewDesc, texObject_TO_hipTextureObject_t(texObject));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceDesc (struct hipResourceDesc *pResDesc, hipTextureObject_t textureObject)\nextern \"C\" cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectResourceDesc (",
      "forcePrediction": false
    },
    "cudaGetTextureObjectTextureDesc": {
      "cuda": "cudaGetTextureObjectTextureDesc",
      "hip": "hipGetTextureObjectTextureDesc",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGetTextureObjectTextureDesc",
        "args": "  cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject ",
        "types": [
          "cudaTextureDescundefined",
          "cudaTextureObject_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___texture_1gaf14cf44212e7191a2553d4d09e4fd665",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGetTextureObjectTextureDesc"
        ],
        "argsstring": [
          "(hipTextureDesc *pTexDesc, hipTextureObject_t textureObject)"
        ],
        "name": [
          "hipGetTextureObjectTextureDesc"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipTextureDesc",
                    "$": {
                      "refid": "structhip_texture_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pTexDesc"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipTextureObject_t",
                    "$": {
                      "refid": "texture__types_8h_1a07af918dca6a01cdc94cb4efddee708f",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "textureObject"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets texture descriptor for the texture object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pTexDesc",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "pointer to texture descriptor "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "textureObject",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "texture object"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "5854",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "5854",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipTextureDesc",
          "hipTextureObject_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGetTextureObjectTextureDesc (  cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject )",
      "hipLine": "hipError_t hipGetTextureObjectTextureDesc (hipTextureDesc *pTexDesc, hipTextureObject_t textureObject)",
      "graft": "// cudaError_t cudaGetTextureObjectTextureDesc (  cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectTextureDesc (hipTextureDesc *pTexDesc, hipTextureObject_t textureObject)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n\n// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipTextureDesc to cudaTextureDesc\ncudaTextureDesc hipTextureDesc_TO_cudaTextureDesc(hipTextureDesc);\n\n// cudaTextureDesc to hipTextureDesc\nhipTextureDesc cudaTextureDesc_TO_hipTextureDesc(cudaTextureDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectTextureDesc (  cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectTextureDesc (hipTextureDesc *pTexDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectTextureDesc (  cudaTextureDesc* pTexDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectTextureDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectTextureDesc (pTexDesc, texObject_TO_hipTextureObject_t(texObject));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject ) using hipError_t hipGetTextureObjectResourceDesc (hipResourceDesc *pResDesc, hipTextureObject_t textureObject)\nextern \"C\"  cudaError_t cudaGetTextureObjectResourceDesc ( cudaResourceDesc* pResDesc, cudaTextureObject_t texObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetTextureObjectResourceDesc call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetTextureObjectResourceDesc (pResDesc, texObject",
      "forcePrediction": false
    },
    "cudaCreateSurfaceObject": {
      "cuda": "cudaCreateSurfaceObject",
      "hip": "hipCreateSurfaceObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaCreateSurfaceObject",
        "args": "  cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc ",
        "types": [
          "cudaSurfaceObject_tundefined",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___surface_1gaa06a02200e471cedeed33b9d326e9dd6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipCreateSurfaceObject"
        ],
        "argsstring": [
          "(hipSurfaceObject_t *pSurfObject, const hipResourceDesc *pResDesc)"
        ],
        "name": [
          "hipCreateSurfaceObject"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipSurfaceObject_t",
                    "$": {
                      "refid": "surface__types_8h_1ae5007dccf589cfddbd3c36b4dbf0d61b",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pSurfObject"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipResourceDesc",
                    "$": {
                      "refid": "structhip_resource_desc",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pResDesc"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Create a surface object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pSurfObject",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of surface object to be created. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pResDesc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Pointer of suface object descriptor."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8385",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8385",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipSurfaceObject_t",
          "hipResourceDesc",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaCreateSurfaceObject (  cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc )",
      "hipLine": "hipError_t hipCreateSurfaceObject (hipSurfaceObject_t *pSurfObject, const hipResourceDesc *pResDesc)",
      "graft": "// cudaError_t cudaCreateSurfaceObject (  cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc ) using hipError_t hipCreateSurfaceObject (hipSurfaceObject_t *pSurfObject, const hipResourceDesc *pResDesc)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipSurfaceObject_t to cudaSurfaceObject_t\ncudaSurfaceObject_t hipSurfaceObject_t_TO_cudaSurfaceObject_t(hipSurfaceObject_t);\n\n// cudaSurfaceObject_t to hipSurfaceObject_t\nhipSurfaceObject_t cudaSurfaceObject_t_TO_hipSurfaceObject_t(cudaSurfaceObject_t);\n\n// hipResourceDesc to cudaResourceDesc\ncudaResourceDesc hipResourceDesc_TO_cudaResourceDesc(hipResourceDesc);\n\n// cudaResourceDesc to hipResourceDesc\nhipResourceDesc cudaResourceDesc_TO_hipResourceDesc(cudaResourceDesc);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaCreateSurfaceObject (  cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc ) using hipError_t hipCreateSurfaceObject (hipSurfaceObject_t *pSurfObject, const hipResourceDesc *pResDesc)\nextern \"C\"  cudaError_t cudaCreateSurfaceObject (  cudaSurfaceObject_t* pSurfObject, const cudaResourceDesc* pResDesc )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaCreateSurfaceObject call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipCreateSurfaceObject (pSurfObject, pResDesc);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroySurfaceObject ( cudaSurfaceObject_t surfaceObject ) using hipError_t hipDestroySurfaceObject (hipSurfaceObject_t surfaceObject)\nextern \"C\" cudaError_t cudaDestroySurfaceObject ( cudaSurfaceObject_t surfaceObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroySurfaceObject call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDestroySurfaceObject (surfaceObject);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGet",
      "forcePrediction": false
    },
    "cudaDestroySurfaceObject": {
      "cuda": "cudaDestroySurfaceObject",
      "hip": "hipDestroySurfaceObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDestroySurfaceObject",
        "args": "  cudaSurfaceObject_t surfObject ",
        "types": [
          "cudaSurfaceObject_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___surface_1ga1cbf692fdb56b251d7b6d4e4d3bb2006",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDestroySurfaceObject"
        ],
        "argsstring": [
          "(hipSurfaceObject_t surfaceObject)"
        ],
        "name": [
          "hipDestroySurfaceObject"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipSurfaceObject_t",
                    "$": {
                      "refid": "surface__types_8h_1ae5007dccf589cfddbd3c36b4dbf0d61b",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "surfaceObject"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroy a surface object. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "surfaceObject",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "Surface object to be destroyed."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "8393",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "8393",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipSurfaceObject_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDestroySurfaceObject (  cudaSurfaceObject_t surfObject )",
      "hipLine": "hipError_t hipDestroySurfaceObject (hipSurfaceObject_t surfaceObject)",
      "graft": "// cudaError_t cudaDestroySurfaceObject (  cudaSurfaceObject_t surfObject ) using hipError_t hipDestroySurfaceObject (hipSurfaceObject_t surfaceObject)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaSurfaceObject_t to hipSurfaceObject_t\nhipSurfaceObject_t cudaSurfaceObject_t_TO_hipSurfaceObject_t(cudaSurfaceObject_t);\n\n// hipSurfaceObject_t to cudaSurfaceObject_t\ncudaSurfaceObject_t hipSurfaceObject_t_TO_cudaSurfaceObject_t(hipSurfaceObject_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDestroySurfaceObject (  cudaSurfaceObject_t surfObject ) using hipError_t hipDestroySurfaceObject (hipSurfaceObject_t surfaceObject)\nextern \"C\"  cudaError_t cudaDestroySurfaceObject (  cudaSurfaceObject_t surfObject )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDestroySurfaceObject call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDestroySurfaceObject(cudaSurfaceObject_t_TO_hipSurfaceObject_t(surfObject));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device ) using hipError_t hipGetDeviceProperties ( hipDeviceProp_t* prop, int  device )\nextern \"C\" cudaError_t cudaGetDeviceProperties ( cudaDeviceProp* prop, int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceProperties call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceProperties(prop, device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDevice (",
      "forcePrediction": false
    },
    "cudaDriverGetVersion": {
      "cuda": "cudaDriverGetVersion",
      "hip": "hipDriverGetVersion",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDriverGetVersion",
        "args": "  int* driverVersion ",
        "types": [
          "intundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___driver_1gaf6c342f52d2a29a0aca5cdd89b4dd47c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDriverGetVersion"
        ],
        "argsstring": [
          "(int *driverVersion)"
        ],
        "name": [
          "hipDriverGetVersion"
        ],
        "param": [
          {
            "type": [
              "int *"
            ],
            "declname": [
              "driverVersion"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns the approximate HIP driver version. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "driverVersion",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "driver version"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      "The HIP feature set does not correspond to an exact CUDA SDK driver revision. This function always set *driverVersion to 4 as an approximation though HIP supports some features which were introduced in later CUDA SDK revisions. HIP apps code should not rely on the driver revision number here and should use arch feature flags to test device capabilities or conditional compilation."
                    ]
                  },
                  {
                    "$": {
                      "kind": "see"
                    },
                    "para": [
                      {
                        "ref": [
                          {
                            "_": "hipRuntimeGetVersion",
                            "$": {
                              "refid": "group___driver_1gae8b7ba34d2e11e334650aa51a4dd87ee",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "1661",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "1661",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDriverGetVersion (  int* driverVersion )",
      "hipLine": "hipError_t hipDriverGetVersion (int *driverVersion)",
      "graft": "// cudaError_t cudaDriverGetVersion (  int* driverVersion ) using hipError_t hipDriverGetVersion (int *driverVersion)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDriverGetVersion (  int* driverVersion ) using hipError_t hipDriverGetVersion (int *driverVersion)\nextern \"C\"  cudaError_t cudaDriverGetVersion (  int* driverVersion )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDriverGetVersion call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDriverGetVersion(driverVersion);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaRuntimeGetVersion (  int* runtimeVersion ) using hipError_t hipRuntimeGetVersion (int *runtimeVersion)\nextern \"C\"  cudaError_t cudaRuntimeGetVersion (  int* runtimeVersion )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaRuntimeGetVersion call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipRuntimeGetVersion(runtimeVersion);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGetDeviceProperties (  cudaDeviceProp* prop, int  device ) using hipError_t hipDeviceGetAttribute (int* prop, hipDeviceAttribute_t device)\nextern \"C\"  cudaError_t c",
      "forcePrediction": false
    },
    "cudaDeviceGetGraphMemAttribute": {
      "cuda": "cudaDeviceGetGraphMemAttribute",
      "hip": "hipDeviceGetGraphMemAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGetGraphMemAttribute",
        "args": "  int  device, cudaGraphMemAttributeType attr, void* value ",
        "types": [
          "int",
          "cudaGraphMemAttributeType",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5eb353becf0e5a38a376dd7aa13677c0",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGetGraphMemAttribute"
        ],
        "argsstring": [
          "(int device, hipGraphMemAttributeType attr, void *value)"
        ],
        "name": [
          "hipDeviceGetGraphMemAttribute"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphMemAttributeType",
                    "$": {
                      "refid": "group___global_defs_1ga920ab2073b2ff77f37ae672d376ffe7e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Get the mem attribute for graphs. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- device the attr is get for. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- attr to get. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- value for specific attr. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7725",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7725",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipGraphMemAttributeType",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )",
      "hipLine": "hipError_t hipDeviceGetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)",
      "graft": "// cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceGetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphMemAttributeType to hipGraphMemAttributeType\nhipGraphMemAttributeType cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(cudaGraphMemAttributeType);\n\n// hipGraphMemAttributeType to cudaGraphMemAttributeType\ncudaGraphMemAttributeType hipGraphMemAttributeType_TO_cudaGraphMemAttributeType(hipGraphMemAttributeType);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceGetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\"  cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetGraphMemAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetGraphMemAttribute (device, cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(attr), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceSetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\"  cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetGraphMemAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetGraphMemAttribute (device, cudaGraphMemAttributeType_",
      "forcePrediction": false
    },
    "cudaDeviceGraphMemTrim": {
      "cuda": "cudaDeviceGraphMemTrim",
      "hip": "hipDeviceGraphMemTrim",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceGraphMemTrim",
        "args": "  int  device ",
        "types": [
          "int",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf637d203d43c5df6d44a1c509bd43f4d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceGraphMemTrim"
        ],
        "argsstring": [
          "(int device)"
        ],
        "name": [
          "hipDeviceGraphMemTrim"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Free unused memory on specific device used for graph back to OS. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- device the memory is used for graphs "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7748",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7748",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceGraphMemTrim (  int  device )",
      "hipLine": "hipError_t hipDeviceGraphMemTrim (int device)",
      "graft": "// cudaError_t cudaDeviceGraphMemTrim (  int  device ) using hipError_t hipDeviceGraphMemTrim (int device)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGraphMemTrim (  int  device ) using hipError_t hipDeviceGraphMemTrim (int device)\nextern \"C\"  cudaError_t cudaDeviceGraphMemTrim (  int  device )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGraphMemTrim call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGraphMemTrim (device);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGraphMemSetAttribute (  int  device, cudaDeviceGraphMemAttribute attribute, const void* value, size_t valueSize ) using hipError_t hipDeviceGraphMemSetAttribute (int device, hipDeviceGraphMemAttribute attribute, const void* value, size_t valueSize )\nextern \"C\"  cudaError_t cudaDeviceGraphMemSetAttribute (  int  device, cudaDeviceGraphMemAttribute attribute, const void* value, size_t valueSize )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGraphMemSetAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGraphMemSetAttribute (device, attribute, value, valueSize);\n\n    return hipError_t_TO",
      "forcePrediction": false
    },
    "cudaDeviceSetGraphMemAttribute": {
      "cuda": "cudaDeviceSetGraphMemAttribute",
      "hip": "hipDeviceSetGraphMemAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaDeviceSetGraphMemAttribute",
        "args": "  int  device, cudaGraphMemAttributeType attr, void* value ",
        "types": [
          "int",
          "cudaGraphMemAttributeType",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga0921c547b41f9124bb4aec6d5f7dab46",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipDeviceSetGraphMemAttribute"
        ],
        "argsstring": [
          "(int device, hipGraphMemAttributeType attr, void *value)"
        ],
        "name": [
          "hipDeviceSetGraphMemAttribute"
        ],
        "param": [
          {
            "type": [
              "int"
            ],
            "declname": [
              "device"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphMemAttributeType",
                    "$": {
                      "refid": "group___global_defs_1ga920ab2073b2ff77f37ae672d376ffe7e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Set the mem attribute for graphs. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "device",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- device the attr is set for. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- attr to set. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- value for specific attr. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDevice",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a6f9140865b70074d26b28b72b5b832b5",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7737",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7737",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "int",
          "hipGraphMemAttributeType",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )",
      "hipLine": "hipError_t hipDeviceSetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)",
      "graft": "// cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceSetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphMemAttributeType to hipGraphMemAttributeType\nhipGraphMemAttributeType cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(cudaGraphMemAttributeType);\n\n// hipGraphMemAttributeType to cudaGraphMemAttributeType\ncudaGraphMemAttributeType hipGraphMemAttributeType_TO_cudaGraphMemAttributeType(hipGraphMemAttributeType);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceSetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\"  cudaError_t cudaDeviceSetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceSetGraphMemAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceSetGraphMemAttribute (device, cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(attr), value);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value ) using hipError_t hipDeviceGetGraphMemAttribute (int device, hipGraphMemAttributeType attr, void *value)\nextern \"C\"  cudaError_t cudaDeviceGetGraphMemAttribute (  int  device, cudaGraphMemAttributeType attr, void* value )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaDeviceGetGraphMemAttribute call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipDeviceGetGraphMemAttribute (device, cudaGraphMemAttributeType_",
      "forcePrediction": false
    },
    "cudaGraphAddChildGraphNode": {
      "cuda": "cudaGraphAddChildGraphNode",
      "hip": "hipGraphAddChildGraphNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddChildGraphNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga215a83cccf00cc4b6a6e43415b68bf4a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddChildGraphNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraph_t childGraph)"
        ],
        "name": [
          "hipGraphAddChildGraphNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "childGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a child graph node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memset execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "childGraph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the graph to clone into this node "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7517",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7517",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddChildGraphNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph )",
      "hipLine": "hipError_t hipGraphAddChildGraphNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraph_t childGraph)",
      "graft": "// cudaError_t cudaGraphAddChildGraphNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph ) using hipError_t hipGraphAddChildGraphNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraph_t childGraph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddChildGraphNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph ) using hipError_t hipGraphAddChildGraphNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipGraph_t childGraph)\nextern \"C\"  cudaError_t cudaGraphAddChildGraphNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaGraph_t childGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddChildGraphNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddChildGraphNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, hipGraph_t_TO_cudaGraph_t(childGraph));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEmptyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies ) using hipError_t hipGraphAddEmptyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)\nextern \"C\" cudaError_t cudaGraphAddEmptyNode (",
      "forcePrediction": false
    },
    "cudaGraphAddDependencies": {
      "cuda": "cudaGraphAddDependencies",
      "hip": "hipGraphAddDependencies",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddDependencies",
        "args": "  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies ",
        "types": [
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga55de501ca624e30d33a58722b97ab119",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddDependencies"
        ],
        "argsstring": [
          "(hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)"
        ],
        "name": [
          "hipGraphAddDependencies"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "from"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "to"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Adds dependency edges to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "from",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph nodes with dependenties to add from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "to",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph nodes to add dependenties to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of dependencies to add. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6776",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6776",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipGraphNode_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies )",
      "hipLine": "hipError_t hipGraphAddDependencies (hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)",
      "graft": "// cudaError_t cudaGraphAddDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies ) using hipError_t hipGraphAddDependencies (hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies ) using hipError_t hipGraphAddDependencies (hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)\nextern \"C\"  cudaError_t cudaGraphAddDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddDependencies call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddDependencies(hipGraph_t_TO_cudaGraph_t(graph), cudaGraphNode_t_TO_hipGraphNode_t(from), cudaGraphNode_t_TO_hipGraphNode_t(to), numDependencies);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEmptyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* dependencies, size_t numDependencies ) using hipError_t hipGraphAddEmptyNode ( hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *dependencies, size_t numDependencies )\nextern \"C\" cudaError_t cudaGraphAddEmptyNode ( cudaGraphNode_t* p",
      "forcePrediction": false
    },
    "cudaGraphAddEmptyNode": {
      "cuda": "cudaGraphAddEmptyNode",
      "hip": "hipGraphAddEmptyNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddEmptyNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gadb06da0ec43f0dd73672d9dcd351df61",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddEmptyNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)"
        ],
        "name": [
          "hipGraphAddEmptyNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates an empty node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create and add to the graph. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the graph the node is add to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the node dependenties. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of dependencies. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7556",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7556",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddEmptyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies )",
      "hipLine": "hipError_t hipGraphAddEmptyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)",
      "graft": "// cudaError_t cudaGraphAddEmptyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies ) using hipError_t hipGraphAddEmptyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEmptyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies ) using hipError_t hipGraphAddEmptyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies)\nextern \"C\"  cudaError_t cudaGraphAddEmptyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddEmptyNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddEmptyNode (  hipGraphNode_t_TO_cudaGraphNode_t(pGraphNode), hipGraph_t_TO_cudaGraph_t(graph), hipGraphNode_t_TO_cudaGraphNode_t(pDependencies), numDependencies );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEventRecordNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventRecordNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event",
      "forcePrediction": false
    },
    "cudaGraphAddEventRecordNode": {
      "cuda": "cudaGraphAddEventRecordNode",
      "hip": "hipGraphAddEventRecordNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddEventRecordNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga74dca46f970bafa279ec9af41ceca7a9",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddEventRecordNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)"
        ],
        "name": [
          "hipGraphAddEventRecordNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates an event record node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create and add to the graph. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the graph the node to be added. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the node dependenties. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Event for the node. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7572",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7572",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddEventRecordNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphAddEventRecordNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphAddEventRecordNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventRecordNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEventRecordNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventRecordNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphAddEventRecordNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddEventRecordNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddEventRecordNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, cudaEvent_t_TO_hipEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEventWaitNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C",
      "forcePrediction": false
    },
    "cudaGraphAddEventWaitNode": {
      "cuda": "cudaGraphAddEventWaitNode",
      "hip": "hipGraphAddEventWaitNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddEventWaitNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga1756a144a9ca0b596f81773befdcbc67",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddEventWaitNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)"
        ],
        "name": [
          "hipGraphAddEventWaitNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates an event wait node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create and add to the graph. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the graph the node to be added. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the node dependenties. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Event for the node. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7623",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7623",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddEventWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphAddEventWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphAddEventWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEventWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphAddEventWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddEventWaitNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddEventWaitNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, cudaEvent_t_TO_hipEvent_t(event));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddEventRecordNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaEvent_t event ) using hipError_t hipGraphAddEventRecordNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipEvent_t event)\nextern \"C",
      "forcePrediction": false
    },
    "cudaGraphAddExternalSemaphoresSignalNode": {
      "cuda": "cudaGraphAddExternalSemaphoresSignalNode",
      "hip": "hipGraphAddExternalSemaphoresSignalNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddExternalSemaphoresSignalNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga49886f3a676840be5b5eea99af87d4bf",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddExternalSemaphoresSignalNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphAddExternalSemaphoresSignalNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreSignalNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_signal_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a external semaphor signal node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memset execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "-pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7917",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7917",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipExternalSemaphoreSignalNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddExternalSemaphoresSignalNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphAddExternalSemaphoresSignalNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreSignalNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphAddExternalSemaphoresSignalNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSemaphoresSignalNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreSignalNodeParams *nodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipExternalSemaphoreSignalNodeParams to cudaExternalSemaphoreSignalNodeParamsV2\ncudaExternalSemaphoreSignalNodeParamsV2 hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(hipExternalSemaphoreSignalNodeParams);\n\n// cudaExternalSemaphoreSignalNodeParamsV2 to hipExternalSemaphoreSignalNodeParams\nhipExternalSemaphoreSignalNodeParams cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams(cudaExternalSemaphoreSignalNodeParamsV2);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddExternalSemaphoresSignalNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSemaphoresSignalNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreSignalNodeParams *nodeParams)\nextern \"C\"  cudaError_t cudaGraphAddExternalSemaphoresSignalNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddExternalSemaphoresSignalNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddExternalSemaphoresSignalNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, &cudaExternalSemaphoreSignalNodeParams_TO_hipExternalSemaphoreSignalNodeParams(*nodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddExternalSemaphoresWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSem",
      "forcePrediction": false
    },
    "cudaGraphAddExternalSemaphoresWaitNode": {
      "cuda": "cudaGraphAddExternalSemaphoresWaitNode",
      "hip": "hipGraphAddExternalSemaphoresWaitNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddExternalSemaphoresWaitNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gac086da9e2ee7561a7b47ce4f7276faf2",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddExternalSemaphoresWaitNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphAddExternalSemaphoresWaitNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreWaitNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_wait_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a external semaphor wait node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memset execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "-pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7901",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7901",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipExternalSemaphoreWaitNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddExternalSemaphoresWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphAddExternalSemaphoresWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreWaitNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphAddExternalSemaphoresWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSemaphoresWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreWaitNodeParams *nodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipExternalSemaphoreWaitNodeParams to cudaExternalSemaphoreWaitNodeParamsV2\ncudaExternalSemaphoreWaitNodeParamsV2 hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2(hipExternalSemaphoreWaitNodeParams);\n\n// cudaExternalSemaphoreWaitNodeParamsV2 to hipExternalSemaphoreWaitNodeParams\nhipExternalSemaphoreWaitNodeParams cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams(cudaExternalSemaphoreWaitNodeParamsV2);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddExternalSemaphoresWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSemaphoresWaitNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipExternalSemaphoreWaitNodeParams *nodeParams)\nextern \"C\"  cudaError_t cudaGraphAddExternalSemaphoresWaitNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreWaitNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddExternalSemaphoresWaitNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddExternalSemaphoresWaitNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, &cudaExternalSemaphoreWaitNodeParams_TO_hipExternalSemaphoreWaitNodeParams(*nodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddExternalSemaphoresSignalNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphAddExternalSemaphoresSign",
      "forcePrediction": false
    },
    "cudaGraphAddHostNode": {
      "cuda": "cudaGraphAddHostNode",
      "hip": "hipGraphAddHostNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddHostNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaeb6a31dddbc88f6c565edf541de788fa",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddHostNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipHostNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphAddHostNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipHostNodeParams",
                    "$": {
                      "refid": "structhip_host_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a host execution node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memset execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "-pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7466",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7466",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipHostNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddHostNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphAddHostNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipHostNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphAddHostNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphAddHostNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipHostNodeParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipHostNodeParams to cudaHostNodeParams\ncudaHostNodeParams hipHostNodeParams_TO_cudaHostNodeParams(hipHostNodeParams);\n\n// cudaHostNodeParams to hipHostNodeParams\nhipHostNodeParams cudaHostNodeParams_TO_hipHostNodeParams(cudaHostNodeParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddHostNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphAddHostNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipHostNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphAddHostNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaHostNodeParams* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddHostNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddHostNode (  hipGraphNode_t_TO_cudaGraphNode_t(pGraphNode), hipGraph_t_TO_cudaGraph_t(graph), const_cast<const hipGraphNode_t*>(hipGraphNode_t_TO_cudaGraphNode_t(pDependencies)), numDependencies, const_cast<const hipHostNodeParams*>(cudaHostNodeParams_TO_hipHostNodeParams(pNodeParams)));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddKernelNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const struct cudaKernelNode",
      "forcePrediction": false
    },
    "cudaGraphAddKernelNode": {
      "cuda": "cudaGraphAddKernelNode",
      "hip": "hipGraphAddKernelNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddKernelNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gab5d1eebec77853325f9f9884698b1a67",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddKernelNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipKernelNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphAddKernelNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipKernelNodeParams",
                    "$": {
                      "refid": "structhip_kernel_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a kernel execution node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the dependencies on the kernel execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters to the kernel execution node on the GPU. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidDeviceFunction",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a9f94b582bc6d3780d616e697b9d364c3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7107",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7107",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipKernelNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddKernelNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphAddKernelNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipKernelNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphAddKernelNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphAddKernelNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipKernelNodeParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipKernelNodeParams to cudaKernelNodeParams\ncudaKernelNodeParams hipKernelNodeParams_TO_cudaKernelNodeParams(hipKernelNodeParams);\n\n// cudaKernelNodeParams to hipKernelNodeParams\nhipKernelNodeParams cudaKernelNodeParams_TO_hipKernelNodeParams(cudaKernelNodeParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddKernelNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphAddKernelNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipKernelNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphAddKernelNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaKernelNodeParams* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddKernelNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddKernelNode (  (hipGraphNode_t*)pGraphNode, hipGraph_t_TO_hipGraph_t(graph), (const hipGraphNode_t*)pDependencies, numDependencies, (const hipKernelNodeParams*)pNodeParams );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_",
      "forcePrediction": false
    },
    "cudaGraphAddMemAllocNode": {
      "cuda": "cudaGraphAddMemAllocNode",
      "hip": "hipGraphAddMemAllocNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemAllocNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaMemAllocNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gae9ea0d05ebde492309f77ba0a23b81a9",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemAllocNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipMemAllocNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphAddMemAllocNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemAllocNodeParams",
                    "$": {
                      "refid": "structhip_mem_alloc_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memory allocation node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the graph node to create and add to the graph "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Instane of the graph the node to be added "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Const pointer to the node dependenties "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The number of dependencies "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node parameters for memory allocation "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7675",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7675",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipMemAllocNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemAllocNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphAddMemAllocNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipMemAllocNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphAddMemAllocNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams ) using hipError_t hipGraphAddMemAllocNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipMemAllocNodeParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipMemAllocNodeParams to cudaMemAllocNodeParams\ncudaMemAllocNodeParams hipMemAllocNodeParams_TO_cudaMemAllocNodeParams(hipMemAllocNodeParams);\n\n// cudaMemAllocNodeParams to hipMemAllocNodeParams\nhipMemAllocNodeParams cudaMemAllocNodeParams_TO_hipMemAllocNodeParams(cudaMemAllocNodeParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemAllocNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams ) using hipError_t hipGraphAddMemAllocNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, hipMemAllocNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphAddMemAllocNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, cudaMemAllocNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemAllocNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemAllocNode (  (hipGraphNode_t*)pGraphNode, hipGraph_t_TO_hipGraph_t(graph), (const hipGraphNode_t*)pDependencies, numDependencies, (hipMemAllocNodeParams*)nodeParams );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraph",
      "forcePrediction": false
    },
    "cudaGraphAddMemFreeNode": {
      "cuda": "cudaGraphAddMemFreeNode",
      "hip": "hipGraphAddMemFreeNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemFreeNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga70f6f4924c404883cbc0d7cb6ac38100",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemFreeNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dev_ptr)"
        ],
        "name": [
          "hipGraphAddMemFreeNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memory free node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the graph node to create and add to the graph "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Instane of the graph the node to be added "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Const pointer to the node dependenties "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The number of dependencies "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the memory to be freed "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7701",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7701",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemFreeNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr )",
      "hipLine": "hipError_t hipGraphAddMemFreeNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dev_ptr)",
      "graft": "// cudaError_t cudaGraphAddMemFreeNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr ) using hipError_t hipGraphAddMemFreeNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dev_ptr)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemFreeNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr ) using hipError_t hipGraphAddMemFreeNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dev_ptr)\nextern \"C\"  cudaError_t cudaGraphAddMemFreeNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dptr )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemFreeNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemFreeNode (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, dptr);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, enum cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size",
      "forcePrediction": false
    },
    "cudaGraphAddMemcpyNode": {
      "cuda": "cudaGraphAddMemcpyNode",
      "hip": "hipGraphAddMemcpyNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemcpyNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gafc4759560bef7b96ca3eefccde8dd550",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemcpyNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemcpy3DParms *pCopyParams)"
        ],
        "name": [
          "hipGraphAddMemcpyNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemcpy3DParms",
                    "$": {
                      "refid": "structhip_memcpy3_d_parms",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pCopyParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memcpy node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memcpy execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pCopyParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters for the memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7175",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7175",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipMemcpy3DParms",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams )",
      "hipLine": "hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemcpy3DParms *pCopyParams)",
      "graft": "// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemcpy3DParms *pCopyParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipMemcpy3DParms to cudaMemcpy3DParms\ncudaMemcpy3DParms hipMemcpy3DParms_TO_cudaMemcpy3DParms(hipMemcpy3DParms);\n\n// cudaMemcpy3DParms to hipMemcpy3DParms\nhipMemcpy3DParms cudaMemcpy3DParms_TO_hipMemcpy3DParms(cudaMemcpy3DParms);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemcpy3DParms *pCopyParams)\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemcpyNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemcpyNode (pGraphNode, hipGraph_t_TO_hipGraph_t(graph), pDependencies, numDependencies, cudaMemcpy3DParms_TO_hipMemcpy3DParms(*pCopyParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemsetNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams ) using hipError_t hipGraphAddMemsetNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies",
      "forcePrediction": false
    },
    "cudaGraphAddMemcpyNode1D": {
      "cuda": "cudaGraphAddMemcpyNode1D",
      "hip": "hipGraphAddMemcpyNode1D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemcpyNode1D",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "voidundefined",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga05e51a4f490804536f16f5dc83459ca1",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemcpyNode1D"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphAddMemcpyNode1D"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a 1D memcpy node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memcpy execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the source. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7252",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7252",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "void undefined",
          "const void undefined",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemcpyNode1D (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphAddMemcpyNode1D (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphAddMemcpyNode1D (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNode1D (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode1D (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNode1D (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *src, size_t count, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNode1D (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemcpyNode1D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemcpyNode1D (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, dst, src, count, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_",
      "forcePrediction": false
    },
    "cudaGraphAddMemcpyNodeFromSymbol": {
      "cuda": "cudaGraphAddMemcpyNodeFromSymbol",
      "hip": "hipGraphAddMemcpyNodeFromSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemcpyNodeFromSymbol",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "voidundefined",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga6f3c6ac9b90264dd297f9ee45fdb5a1c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemcpyNodeFromSymbol"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphAddMemcpyNodeFromSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memcpy node to copy from a symbol on the device and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memcpy execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7305",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7305",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "void undefined",
          "const void undefined",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemcpyNodeFromSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphAddMemcpyNodeFromSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphAddMemcpyNodeFromSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNodeFromSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNodeFromSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNodeFromSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNodeFromSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemcpyNodeFromSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemcpyNodeFromSymbol (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, dst, symbol, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNodeFromSymbolAsync (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using",
      "forcePrediction": false
    },
    "cudaGraphAddMemcpyNodeToSymbol": {
      "cuda": "cudaGraphAddMemcpyNodeToSymbol",
      "hip": "hipGraphAddMemcpyNodeToSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemcpyNodeToSymbol",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gadc76882339279fa8c70f9666d2088435",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemcpyNodeToSymbol"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphAddMemcpyNodeToSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memcpy node to copy to a symbol on the device and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memcpy execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address of the src. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7361",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7361",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "const void undefined",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemcpyNodeToSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphAddMemcpyNodeToSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphAddMemcpyNodeToSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNodeToSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNodeToSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphAddMemcpyNodeToSymbol (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNodeToSymbol (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemcpyNodeToSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemcpyNodeToSymbol (pGraphNode, hipGraph_t_TO_cudaGraph_t(graph), pDependencies, numDependencies, symbol, src, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphAddMem",
      "forcePrediction": false
    },
    "cudaGraphAddMemsetNode": {
      "cuda": "cudaGraphAddMemsetNode",
      "hip": "hipGraphAddMemsetNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphAddMemsetNode",
        "args": "  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf195e543467f8b1d313dfb997cb38c58",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphAddMemsetNode"
        ],
        "argsstring": [
          "(hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemsetParams *pMemsetParams)"
        ],
        "name": [
          "hipGraphAddMemsetNode"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemsetParams",
                    "$": {
                      "refid": "structhip_memset_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pMemsetParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a memset node and adds it to a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph node to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add the created node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the dependencies on the memset execution node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pMemsetParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters for the memory set. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7415",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7415",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "size_t",
          "hipMemsetParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphAddMemsetNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams )",
      "hipLine": "hipError_t hipGraphAddMemsetNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemsetParams *pMemsetParams)",
      "graft": "// cudaError_t cudaGraphAddMemsetNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams ) using hipError_t hipGraphAddMemsetNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemsetParams *pMemsetParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipMemsetParams to cudaMemsetParams\ncudaMemsetParams hipMemsetParams_TO_cudaMemsetParams(hipMemsetParams);\n\n// cudaMemsetParams to hipMemsetParams\nhipMemsetParams cudaMemsetParams_TO_hipMemsetParams(cudaMemsetParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemsetNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams ) using hipError_t hipGraphAddMemsetNode (hipGraphNode_t *pGraphNode, hipGraph_t graph, const hipGraphNode_t *pDependencies, size_t numDependencies, const hipMemsetParams *pMemsetParams)\nextern \"C\"  cudaError_t cudaGraphAddMemsetNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemsetParams* pMemsetParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphAddMemsetNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphAddMemsetNode (  hipGraphNode_t_TO_cudaGraphNode_t(pGraphNode), hipGraph_t_TO_cudaGraph_t(graph), const_cast<const hipGraphNode_t*>(hipGraphNode_t_TO_cudaGraphNode_t(pDependencies)), numDependencies, const_cast<const hipMemsetParams*>(cudaMemsetParams_TO_hipMemsetParams(pMemsetParams)));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const",
      "forcePrediction": false
    },
    "cudaGraphChildGraphNodeGetGraph": {
      "cuda": "cudaGraphChildGraphNodeGetGraph",
      "hip": "hipGraphChildGraphNodeGetGraph",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphChildGraphNodeGetGraph",
        "args": "  cudaGraphNode_t node, cudaGraph_t* pGraph ",
        "types": [
          "cudaGraphNode_t",
          "cudaGraph_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaa3a045ef7065eb0dbaaf0c65cdec8565",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphChildGraphNodeGetGraph"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipGraph_t *pGraph)"
        ],
        "name": [
          "hipGraphChildGraphNodeGetGraph"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets a handle to the embedded graph of a child graph node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to get child graph. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraph",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to get the graph. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7530",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7530",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphChildGraphNodeGetGraph (  cudaGraphNode_t node, cudaGraph_t* pGraph )",
      "hipLine": "hipError_t hipGraphChildGraphNodeGetGraph (hipGraphNode_t node, hipGraph_t *pGraph)",
      "graft": "// cudaError_t cudaGraphChildGraphNodeGetGraph (  cudaGraphNode_t node, cudaGraph_t* pGraph ) using hipError_t hipGraphChildGraphNodeGetGraph (hipGraphNode_t node, hipGraph_t *pGraph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphChildGraphNodeGetGraph (  cudaGraphNode_t node, cudaGraph_t* pGraph ) using hipError_t hipGraphChildGraphNodeGetGraph (hipGraphNode_t node, hipGraph_t *pGraph)\nextern \"C\"  cudaError_t cudaGraphChildGraphNodeGetGraph (  cudaGraphNode_t node, cudaGraph_t* pGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphChildGraphNodeGetGraph call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphChildGraphNodeGetGraph (hipGraphNode_t_TO_cudaGraphNode_t(node), pGraph);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphCreate ( cudaGraph_t* pGraph, unsigned int flags ) using hipError_t hipGraphCreate (hipGraph_t *pGraph, unsigned int flags)\nextern \"C\" cudaError_t cudaGraphCreate ( cudaGraph_t* pGraph, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphCreate (pGraph, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cuda",
      "forcePrediction": false
    },
    "cudaGraphClone": {
      "cuda": "cudaGraphClone",
      "hip": "hipGraphClone",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphClone",
        "args": "  cudaGraph_t* pGraphClone, cudaGraph_t originalGraph ",
        "types": [
          "cudaGraph_tundefined",
          "cudaGraph_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf9eec67b896029a35ee31055c247cc77",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphClone"
        ],
        "argsstring": [
          "(hipGraph_t *pGraphClone, hipGraph_t originalGraph)"
        ],
        "name": [
          "hipGraphClone"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphClone"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "originalGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Clones a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphClone",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returns newly created cloned graph. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "originalGraph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- original graph to clone from. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMemoryAllocation",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6927",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6927",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphClone (  cudaGraph_t* pGraphClone, cudaGraph_t originalGraph )",
      "hipLine": "hipError_t hipGraphClone (hipGraph_t *pGraphClone, hipGraph_t originalGraph)",
      "graft": "// cudaError_t cudaGraphClone (  cudaGraph_t* pGraphClone, cudaGraph_t originalGraph ) using hipError_t hipGraphClone (hipGraph_t *pGraphClone, hipGraph_t originalGraph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphClone (  cudaGraph_t* pGraphClone, cudaGraph_t originalGraph ) using hipError_t hipGraphClone (hipGraph_t *pGraphClone, hipGraph_t originalGraph)\nextern \"C\"  cudaError_t cudaGraphClone (  cudaGraph_t* pGraphClone, cudaGraph_t originalGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphClone call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphClone (  hipGraph_t_TO_cudaGraph_t(pGraphClone), cudaGraph_t_TO_hipGraph_t(originalGraph) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphCreate ( cudaGraph_t* pGraph, unsigned int flags ) using hipError_t hipGraphCreate ( hipGraph_t *pGraph, unsigned int flags )\nextern \"C\" cudaError_t cudaGraphCreate ( cudaGraph_t* pGraph, unsigned int flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphCreate ( hipGraph_t_TO_cudaGraph_t(pGraph), flags );\n\n    return hip",
      "forcePrediction": false
    },
    "cudaGraphCreate": {
      "cuda": "cudaGraphCreate",
      "hip": "hipGraphCreate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphCreate",
        "args": "  cudaGraph_t* pGraph, unsigned int  flags ",
        "types": [
          "cudaGraph_tundefined",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga0569a00583e14be02790df5531e905d6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphCreate"
        ],
        "argsstring": [
          "(hipGraph_t *pGraph, unsigned int flags)"
        ],
        "name": [
          "hipGraphCreate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraph"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraph",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph to create. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- flags for graph creation, must be 0."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorMemoryAllocation",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a05eeeb24bcbaf9bce1e70c96406e11d3",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6748",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6748",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphCreate (  cudaGraph_t* pGraph, unsigned int  flags )",
      "hipLine": "hipError_t hipGraphCreate (hipGraph_t *pGraph, unsigned int flags)",
      "graft": "// cudaError_t cudaGraphCreate (  cudaGraph_t* pGraph, unsigned int  flags ) using hipError_t hipGraphCreate (hipGraph_t *pGraph, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphCreate (  cudaGraph_t* pGraph, unsigned int  flags ) using hipError_t hipGraphCreate (hipGraph_t *pGraph, unsigned int flags)\nextern \"C\"  cudaError_t cudaGraphCreate (  cudaGraph_t* pGraph, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphCreate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphCreate ( (hipGraph_t*)pGraph, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode (hipGraphNode_t* pGraphNode, hipGraph_t graph, const hipGraphNode_t* pDependencies, size_t numDependencies, const hipMemcpy3DParms* pCopyParams)\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNode (  cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const c",
      "forcePrediction": false
    },
    "cudaGraphDebugDotPrint": {
      "cuda": "cudaGraphDebugDotPrint",
      "hip": "hipGraphDebugDotPrint",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphDebugDotPrint",
        "args": "  cudaGraph_t graph, const char* path, unsigned int  flags ",
        "types": [
          "cudaGraph_t",
          "const",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaad520a916f418e08e0ca9078a21e244f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphDebugDotPrint"
        ],
        "argsstring": [
          "(hipGraph_t graph, const char *path, unsigned int flags)"
        ],
        "name": [
          "hipGraphDebugDotPrint"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              "const char *"
            ],
            "declname": [
              "path"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Write a DOT file describing graph structure. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- graph object for which DOT file has to be generated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "path",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- path to write the DOT file. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Flags from hipGraphDebugDotFlags to get additional node information. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ,  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOperatingSystem",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a57b7f198b5706b2bc57e39029803bd3a",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7824",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7824",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "const char undefined",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphDebugDotPrint (  cudaGraph_t graph, const char* path, unsigned int  flags )",
      "hipLine": "hipError_t hipGraphDebugDotPrint (hipGraph_t graph, const char *path, unsigned int flags)",
      "graft": "// cudaError_t cudaGraphDebugDotPrint (  cudaGraph_t graph, const char* path, unsigned int  flags ) using hipError_t hipGraphDebugDotPrint (hipGraph_t graph, const char *path, unsigned int flags)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphDebugDotPrint (  cudaGraph_t graph, const char* path, unsigned int  flags ) using hipError_t hipGraphDebugDotPrint (hipGraph_t graph, const char *path, unsigned int flags)\nextern \"C\"  cudaError_t cudaGraphDebugDotPrint (  cudaGraph_t graph, const char* path, unsigned int  flags )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphDebugDotPrint call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphDebugDotPrint (hipGraph_t_TO_cudaGraph_t(graph), path, flags);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphGetNodes (  cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes ) using hipError_t hipGraphGetNodes (hipGraph_t graph, hipGraphNode_t *nodes, size_t *numNodes)\nextern \"C\"  cudaError_t cudaGraphGetNodes (  cudaGraph_t graph, cudaGraphNode_t *nodes, size_t *numNodes )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphGetNodes call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphGetNodes",
      "forcePrediction": false
    },
    "cudaGraphDestroy": {
      "cuda": "cudaGraphDestroy",
      "hip": "hipGraphDestroy",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphDestroy",
        "args": "  cudaGraph_t graph ",
        "types": [
          "cudaGraph_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gadf21ff5ddbe98084e0fe3db592290ca7",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphDestroy"
        ],
        "argsstring": [
          "(hipGraph_t graph)"
        ],
        "name": [
          "hipGraphDestroy"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to destroy."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6761",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6761",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphDestroy (  cudaGraph_t graph )",
      "hipLine": "hipError_t hipGraphDestroy (hipGraph_t graph)",
      "graft": "// cudaError_t cudaGraphDestroy (  cudaGraph_t graph ) using hipError_t hipGraphDestroy (hipGraph_t graph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphDestroy (  cudaGraph_t graph ) using hipError_t hipGraphDestroy (hipGraph_t graph)\nextern \"C\"  cudaError_t cudaGraphDestroy (  cudaGraph_t graph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphDestroy(cudaGraph_t_TO_hipGraph_t(graph));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec ) using hipError_t hipGraphExecDestroy (hipGraphExec_t graphExec)\nextern \"C\"  cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecDestroy(graphExec);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, ",
      "forcePrediction": false
    },
    "cudaGraphDestroyNode": {
      "cuda": "cudaGraphDestroyNode",
      "hip": "hipGraphDestroyNode",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphDestroyNode",
        "args": "  cudaGraphNode_t node ",
        "types": [
          "cudaGraphNode_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga29ce4a5ca318996445984df02b036f01",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphDestroyNode"
        ],
        "argsstring": [
          "(hipGraphNode_t node)"
        ],
        "name": [
          "hipGraphDestroyNode"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Remove a node from the graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- graph node to remove "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6914",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6914",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphDestroyNode (  cudaGraphNode_t node )",
      "hipLine": "hipError_t hipGraphDestroyNode (hipGraphNode_t node)",
      "graft": "// cudaError_t cudaGraphDestroyNode (  cudaGraphNode_t node ) using hipError_t hipGraphDestroyNode (hipGraphNode_t node)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphDestroyNode (  cudaGraphNode_t node ) using hipError_t hipGraphDestroyNode (hipGraphNode_t node)\nextern \"C\"  cudaError_t cudaGraphDestroyNode (  cudaGraphNode_t node )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphDestroyNode call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphDestroyNode ( hipGraphNode_t_TO_cudaGraphNode_t(node) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t numDependencies, const cudaMemcpy3DParms* pCopyParams ) using hipError_t hipGraphAddMemcpyNode ( hipGraphNode_t* pGraphNode, hipGraph_t graph, const hipGraphNode_t* pDependencies, size_t numDependencies, const hipMemcpy3DParms* pCopyParams )\nextern \"C\"  cudaError_t cudaGraphAddMemcpyNode ( cudaGraphNode_t* pGraphNode, cudaGraph_t graph, const cudaGraphNode_t* pDependencies, size_t num",
      "forcePrediction": false
    },
    "cudaGraphEventRecordNodeGetEvent": {
      "cuda": "cudaGraphEventRecordNodeGetEvent",
      "hip": "hipGraphEventRecordNodeGetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphEventRecordNodeGetEvent",
        "args": "  cudaGraphNode_t node, cudaEvent_t* event_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaEvent_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gad5cf984b5b764ca5d715a6673cc5d6cb",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphEventRecordNodeGetEvent"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipEvent_t *event_out)"
        ],
        "name": [
          "hipGraphEventRecordNodeGetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event_out"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns the event associated with an event record node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to get event from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to return the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7585",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7585",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphEventRecordNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out )",
      "hipLine": "hipError_t hipGraphEventRecordNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)",
      "graft": "// cudaError_t cudaGraphEventRecordNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out ) using hipError_t hipGraphEventRecordNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventRecordNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out ) using hipError_t hipGraphEventRecordNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)\nextern \"C\"  cudaError_t cudaGraphEventRecordNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventRecordNodeGetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventRecordNodeGetEvent (hipGraphNode_t_TO_cudaGraphNode_t(node), event_out);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventRecordNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventRecordNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventRecordNodeSetEvent (hipGraph",
      "forcePrediction": false
    },
    "cudaGraphEventRecordNodeSetEvent": {
      "cuda": "cudaGraphEventRecordNodeSetEvent",
      "hip": "hipGraphEventRecordNodeSetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphEventRecordNodeSetEvent",
        "args": "  cudaGraphNode_t node, cudaEvent_t event ",
        "types": [
          "cudaGraphNode_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gac91ec8eb7a374eb1f7cec45e172efe8c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphEventRecordNodeSetEvent"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipEvent_t event)"
        ],
        "name": [
          "hipGraphEventRecordNodeSetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets an event record node's event. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to set event to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7596",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7596",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphEventRecordNodeSetEvent (hipGraphNode_t node, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventRecordNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventRecordNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventRecordNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventRecordNodeSetEvent ( hipGraphNode_t_TO_cudaGraphNode_t(node), cudaEvent_t_TO_hipEvent_t(event) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventRecordNodeSetEventNode (  cudaGraphNode_t node, cudaGraphNode_t eventNode ) using hipError_t hipGraphEventRecordNodeSetEventNode (hipGraphNode_t node, hipGraphNode_t eventNode)\nextern \"C\"  cudaError_t cudaGraphEventRecordNodeSetEventNode (  cudaGraphNode_t node, cudaGraphNode_t eventNode )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventRecordNodeSetEventNode call\" << std::endl;\n    // Translate the call to its HIP counterpart",
      "forcePrediction": false
    },
    "cudaGraphEventWaitNodeGetEvent": {
      "cuda": "cudaGraphEventWaitNodeGetEvent",
      "hip": "hipGraphEventWaitNodeGetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphEventWaitNodeGetEvent",
        "args": "  cudaGraphNode_t node, cudaEvent_t* event_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaEvent_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaccfa3e841e4af4a1897b52f47d75a43d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphEventWaitNodeGetEvent"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipEvent_t *event_out)"
        ],
        "name": [
          "hipGraphEventWaitNodeGetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event_out"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns the event associated with an event wait node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to get event from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to return the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7637",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7637",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphEventWaitNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out )",
      "hipLine": "hipError_t hipGraphEventWaitNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)",
      "graft": "// cudaError_t cudaGraphEventWaitNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out ) using hipError_t hipGraphEventWaitNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventWaitNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out ) using hipError_t hipGraphEventWaitNodeGetEvent (hipGraphNode_t node, hipEvent_t *event_out)\nextern \"C\"  cudaError_t cudaGraphEventWaitNodeGetEvent (  cudaGraphNode_t node, cudaEvent_t* event_out )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventWaitNodeGetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventWaitNodeGetEvent (hipGraphNode_t_TO_hipGraphNode_t(node), event_out);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventWaitNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventWaitNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventWaitNodeSetEvent (hipGraphNode",
      "forcePrediction": false
    },
    "cudaGraphEventWaitNodeSetEvent": {
      "cuda": "cudaGraphEventWaitNodeSetEvent",
      "hip": "hipGraphEventWaitNodeSetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphEventWaitNodeSetEvent",
        "args": "  cudaGraphNode_t node, cudaEvent_t event ",
        "types": [
          "cudaGraphNode_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gac802549bd73126ed736833af7a8c6863",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphEventWaitNodeSetEvent"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipEvent_t event)"
        ],
        "name": [
          "hipGraphEventWaitNodeSetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets an event wait node's event. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to set event to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7648",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7648",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphEventWaitNodeSetEvent (hipGraphNode_t node, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventWaitNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventWaitNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventWaitNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphEventWaitNodeSetEvent ( hipGraphNode_t_TO_cudaGraphNode_t(node), cudaEvent_t_TO_hipEvent_t(event) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphEventWaitNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event ) using hipError_t hipGraphEventWaitNodeSetEvent (hipGraphNode_t node, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphEventRecordNodeSetEvent (  cudaGraphNode_t node, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphEventRecordNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hip",
      "forcePrediction": false
    },
    "cudaGraphExecChildGraphNodeSetParams": {
      "cuda": "cudaGraphExecChildGraphNodeSetParams",
      "hip": "hipGraphExecChildGraphNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecChildGraphNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "cudaGraph_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga532a7a3b938fc5eed6a5d63d409e60a2",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecChildGraphNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, hipGraph_t childGraph)"
        ],
        "name": [
          "hipGraphExecChildGraphNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "childGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Updates node parameters in the child graph node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- node from the graph which was used to instantiate graphExec. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "childGraph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- child graph with updated parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7542",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7542",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecChildGraphNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph )",
      "hipLine": "hipError_t hipGraphExecChildGraphNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipGraph_t childGraph)",
      "graft": "// cudaError_t cudaGraphExecChildGraphNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph ) using hipError_t hipGraphExecChildGraphNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipGraph_t childGraph)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecChildGraphNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph ) using hipError_t hipGraphExecChildGraphNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipGraph_t childGraph)\nextern \"C\"  cudaError_t cudaGraphExecChildGraphNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, cudaGraph_t childGraph )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecChildGraphNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecChildGraphNodeSetParams ( hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), hipGraph_t_TO_cudaGraph_t(childGraph) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecDestroy ( cudaGraphExec_t hGraphExec ) using hipError_t hipGraphExecDestroy ( hipGraphExec_t hGraphExec )\nextern \"C\" cudaError_t cudaGraphExecDestroy ( cudaGraphExec_t hGraphExec )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hip",
      "forcePrediction": false
    },
    "cudaGraphExecDestroy": {
      "cuda": "cudaGraphExecDestroy",
      "hip": "hipGraphExecDestroy",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecDestroy",
        "args": "  cudaGraphExec_t graphExec ",
        "types": [
          "cudaGraphExec_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga4786c0e6cc8c1cd96a346e0d82177a35",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecDestroy"
        ],
        "argsstring": [
          "(hipGraphExec_t graphExec)"
        ],
        "name": [
          "hipGraphExecDestroy"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graphExec"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Destroys an executable graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of executable graph to destry."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ".",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7075",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7075",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec )",
      "hipLine": "hipError_t hipGraphExecDestroy (hipGraphExec_t graphExec)",
      "graft": "// cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec ) using hipError_t hipGraphExecDestroy (hipGraphExec_t graphExec)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec ) using hipError_t hipGraphExecDestroy (hipGraphExec_t graphExec)\nextern \"C\"  cudaError_t cudaGraphExecDestroy (  cudaGraphExec_t graphExec )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecDestroy call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecDestroy(cudaGraphExec_t_TO_hipGraphExec_t(graphExec));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t graphExec,  cudaGraphNode_t node,  const struct cudaKernelNodeParams* nodeParams ) using hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t graphExec, hipGraphNode_t node, const struct hipKernelNodeParams* nodeParams)\nextern \"C\"  cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t graphExec,  cudaGraphNode_t node,  const struct cudaKernelNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecKernelNodeSetParams call\" << std::endl;\n",
      "forcePrediction": false
    },
    "cudaGraphExecEventRecordNodeSetEvent": {
      "cuda": "cudaGraphExecEventRecordNodeSetEvent",
      "hip": "hipGraphExecEventRecordNodeSetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecEventRecordNodeSetEvent",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga9778c1957d72d7ed372a8c2820536066",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecEventRecordNodeSetEvent"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)"
        ],
        "name": [
          "hipGraphExecEventRecordNodeSetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the event for an event record node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- node from the graph which was used to instantiate graphExec. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7608",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7608",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecEventRecordNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphExecEventRecordNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphExecEventRecordNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventRecordNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecEventRecordNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventRecordNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphExecEventRecordNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecEventRecordNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecEventRecordNodeSetEvent ( hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(hNode), hipEvent_t_TO_cudaEvent_t(event) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecEventRecordNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventRecordNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_",
      "forcePrediction": false
    },
    "cudaGraphExecEventWaitNodeSetEvent": {
      "cuda": "cudaGraphExecEventWaitNodeSetEvent",
      "hip": "hipGraphExecEventWaitNodeSetEvent",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecEventWaitNodeSetEvent",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "cudaEvent_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gab7649d14c214d61f24e143c1599be9f0",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecEventWaitNodeSetEvent"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)"
        ],
        "name": [
          "hipGraphExecEventWaitNodeSetEvent"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipEvent_t",
                    "$": {
                      "refid": "group___global_defs_1ga3640952e23c028a87a7db564443948ea",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "event"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the event for an event record node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- node from the graph which was used to instantiate graphExec. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "event",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the event. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7660",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7660",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipEvent_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )",
      "hipLine": "hipError_t hipGraphExecEventWaitNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)",
      "graft": "// cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventWaitNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n\n// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventWaitNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecEventWaitNodeSetEvent call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecEventWaitNodeSetEvent ( hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(hNode), hipEvent_t_TO_cudaEvent_t(event) );\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, cudaEvent_t event ) using hipError_t hipGraphExecEventWaitNodeSetEvent (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, hipEvent_t event)\nextern \"C\"  cudaError_t cudaGraphExecEventWaitNodeSetEvent (  cudaGraphExec_t hGraphExec, cudaGraphNode_",
      "forcePrediction": false
    },
    "cudaGraphExecExternalSemaphoresSignalNodeSetParams": {
      "cuda": "cudaGraphExecExternalSemaphoresSignalNodeSetParams",
      "hip": "hipGraphExecExternalSemaphoresSignalNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecExternalSemaphoresSignalNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga69757fcf41c1939bb698f3e31913803b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphExecExternalSemaphoresSignalNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreSignalNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_signal_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Updates node parameters in the external semaphore signal node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The executable graph in which to set the specified node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the params to be set. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7974",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7974",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipExternalSemaphoreSignalNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphoreSignalNodeParams to cudaExternalSemaphoreSignalNodeParamsV2\ncudaExternalSemaphoreSignalNodeParamsV2 hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(hipExternalSemaphoreSignalNodeParams);\n\n// cudaExternalSemaphoreSignalNodeParamsV2 to hipExternalSemaphoreSignalNodeParams\nhipExternalSemaphoreSignalNodeParams cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams(cudaExternalSemaphoreSignalNodeParamsV2);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)\nextern \"C\"  cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecExternalSemaphoresSignalNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecExternalSemaphoresSignalNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(hNode), &hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(*nodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams (hipGraphExec_t hGraphExec, hip",
      "forcePrediction": false
    },
    "cudaGraphExecExternalSemaphoresWaitNodeSetParams": {
      "cuda": "cudaGraphExecExternalSemaphoresWaitNodeSetParams",
      "hip": "hipGraphExecExternalSemaphoresWaitNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecExternalSemaphoresWaitNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga4a2826775ca03a0302005e81587a634f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphExecExternalSemaphoresWaitNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreWaitNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_wait_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Updates node parameters in the external semaphore wait node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The executable graph in which to set the specified node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the params to be set. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7986",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7986",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipExternalSemaphoreWaitNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphoreWaitNodeParams to cudaExternalSemaphoreWaitNodeParamsV2\ncudaExternalSemaphoreWaitNodeParamsV2 hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2(hipExternalSemaphoreWaitNodeParams);\n\n// cudaExternalSemaphoreWaitNodeParamsV2 to hipExternalSemaphoreWaitNodeParams\nhipExternalSemaphoreWaitNodeParams cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams(cudaExternalSemaphoreWaitNodeParamsV2);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresWaitNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)\nextern \"C\"  cudaError_t cudaGraphExecExternalSemaphoresWaitNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecExternalSemaphoresWaitNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecExternalSemaphoresWaitNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(hNode), &hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2(*nodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecExternalSemaphoresSignalNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphExecExternalSemaphoresSignalNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_",
      "forcePrediction": false
    },
    "cudaGraphExecHostNodeSetParams": {
      "cuda": "cudaGraphExecHostNodeSetParams",
      "hip": "hipGraphExecHostNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecHostNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga4a6f01ac80a51ba37ff0beac10588e61",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecHostNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipHostNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphExecHostNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipHostNodeParams",
                    "$": {
                      "refid": "structhip_host_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a host node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7502",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7502",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipHostNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecHostNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphExecHostNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipHostNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphExecHostNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphExecHostNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipHostNodeParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipHostNodeParams to cudaHostNodeParams\ncudaHostNodeParams hipHostNodeParams_TO_cudaHostNodeParams(hipHostNodeParams);\n\n// cudaHostNodeParams to hipHostNodeParams\nhipHostNodeParams cudaHostNodeParams_TO_hipHostNodeParams(cudaHostNodeParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecHostNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphExecHostNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipHostNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecHostNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecHostNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecHostNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), &cudaHostNodeParams_TO_hipHostNodeParams(*pNodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t",
      "forcePrediction": false
    },
    "cudaGraphExecKernelNodeSetParams": {
      "cuda": "cudaGraphExecKernelNodeSetParams",
      "hip": "hipGraphExecKernelNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecKernelNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5b1918dae65224863b7370e6d4ad3f2a",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecKernelNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphExecKernelNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipKernelNodeParams",
                    "$": {
                      "refid": "structhip_kernel_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a kernel node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the kernel node parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7143",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7143",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipKernelNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipKernelNodeParams to cudaKernelNodeParams\ncudaKernelNodeParams hipKernelNodeParams_TO_cudaKernelNodeParams(hipKernelNodeParams);\n\n// cudaKernelNodeParams to hipKernelNodeParams\nhipKernelNodeParams cudaKernelNodeParams_TO_hipKernelNodeParams(cudaKernelNodeParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecKernelNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecKernelNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), &cudaKernelNodeParams_TO_hipKernelNodeParams(*pNodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecKernelNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphExecKernelNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecKernelNodeSetParams ( ",
      "forcePrediction": false
    },
    "cudaGraphExecMemcpyNodeSetParams": {
      "cuda": "cudaGraphExecMemcpyNodeSetParams",
      "hip": "hipGraphExecMemcpyNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecMemcpyNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga8b2a9b3158e565a1266269fed5f658ae",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecMemcpyNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)"
        ],
        "name": [
          "hipGraphExecMemcpyNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemcpy3DParms",
                    "$": {
                      "refid": "structhip_memcpy3_d_parms",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a memcpy node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the kernel node parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7234",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7234",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipMemcpy3DParms",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams )",
      "hipLine": "hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)",
      "graft": "// cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemcpy3DParms to cudaMemcpy3DParms\ncudaMemcpy3DParms hipMemcpy3DParms_TO_cudaMemcpy3DParms(hipMemcpy3DParms);\n\n// cudaMemcpy3DParms to hipMemcpy3DParms\nhipMemcpy3DParms cudaMemcpy3DParms_TO_hipMemcpy3DParms(cudaMemcpy3DParms);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecMemcpyNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecMemcpyNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), cudaMemcpy3DParms_TO_hipMemcpy3DParms(*pNodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)\nextern \"C\"  cudaError_t cudaGraph",
      "forcePrediction": false
    },
    "cudaGraphExecMemcpyNodeSetParams1D": {
      "cuda": "cudaGraphExecMemcpyNodeSetParams1D",
      "hip": "hipGraphExecMemcpyNodeSetParams1D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecMemcpyNodeSetParams1D",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga456ee94786d7923e4e7968dc19a03563",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecMemcpyNodeSetParams1D"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphExecMemcpyNodeSetParams1D"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a memcpy node in the given graphExec to perform a 1-dimensional copy. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the source. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7285",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7285",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecMemcpyNodeSetParams1D (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphExecMemcpyNodeSetParams1D (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphExecMemcpyNodeSetParams1D (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParams1D (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams1D (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParams1D (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphExecMemcpyNodeSetParams1D (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecMemcpyNodeSetParams1D call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecMemcpyNodeSetParams1D (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), dst, src, count, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams2D (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t width, size_t height, size_t kind ) using hipError_t hipGraphExecMemcpyNodeSetParams2D (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *",
      "forcePrediction": false
    },
    "cudaGraphExecMemcpyNodeSetParamsFromSymbol": {
      "cuda": "cudaGraphExecMemcpyNodeSetParamsFromSymbol",
      "hip": "hipGraphExecMemcpyNodeSetParamsFromSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecMemcpyNodeSetParamsFromSymbol",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gae4d2ca401e05487ff9e9a094abccf792",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphExecMemcpyNodeSetParamsFromSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a memcpy node in the given graphExec to copy from a symbol on the. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "itemizedlist": [
                  {
                    "listitem": [
                      {
                        "para": [
                          "device."
                        ]
                      }
                    ]
                  }
                ]
              },
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7341",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7341",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* symbol, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecMemcpyNodeSetParamsFromSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecMemcpyNodeSetParamsFromSymbol (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), dst, symbol, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, void *",
      "forcePrediction": false
    },
    "cudaGraphExecMemcpyNodeSetParamsToSymbol": {
      "cuda": "cudaGraphExecMemcpyNodeSetParamsToSymbol",
      "hip": "hipGraphExecMemcpyNodeSetParamsToSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecMemcpyNodeSetParamsToSymbol",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga698fb0f0bd392e4f383ee62e9a61d1e0",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecMemcpyNodeSetParamsToSymbol"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphExecMemcpyNodeSetParamsToSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a memcpy node in the given graphExec to copy to a symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address of the src. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7399",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7399",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphExecMemcpyNodeSetParamsToSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParamsToSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n\n// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParamsToSymbol (hipGraphExec_t hGraphExec, hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\"  cudaError_t cudaGraphExecMemcpyNodeSetParamsToSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const void* symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecMemcpyNodeSetParamsToSymbol call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecMemcpyNodeSetParamsToSymbol (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), symbol, src, count, offset, cudaMemcpyKind_TO_hipMemcpyKind(kind));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParamsFromSymbol (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const T& symbol, void* dst, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphExecMemcpyNodeSetParamsFromSymbol (hipGraphExec_t hGraphExec",
      "forcePrediction": false
    },
    "cudaGraphExecMemsetNodeSetParams": {
      "cuda": "cudaGraphExecMemsetNodeSetParams",
      "hip": "hipGraphExecMemsetNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecMemsetNodeSetParams",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaaea31b879fa5eed6a2e12e156020f467",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecMemsetNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemsetParams *pNodeParams)"
        ],
        "name": [
          "hipGraphExecMemsetNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemsetParams",
                    "$": {
                      "refid": "structhip_memset_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets the parameters for a memset node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the executable graph with the node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7451",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7451",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "hipMemsetParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecMemsetNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphExecMemsetNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemsetParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphExecMemsetNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams ) using hipError_t hipGraphExecMemsetNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemsetParams *pNodeParams)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipMemsetParams to cudaMemsetParams\ncudaMemsetParams hipMemsetParams_TO_cudaMemsetParams(hipMemsetParams);\n\n// cudaMemsetParams to hipMemsetParams\nhipMemsetParams cudaMemsetParams_TO_hipMemsetParams(cudaMemsetParams);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemsetNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams ) using hipError_t hipGraphExecMemsetNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemsetParams *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecMemsetNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemsetParams* pNodeParams )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecMemsetNodeSetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExecMemsetNodeSetParams (hipGraphExec_t_TO_hipGraphExec_t(hGraphExec), hipGraphNode_t_TO_hipGraphNode_t(node), cudaMemsetParams_TO_hipMemsetParams(pNodeParams));\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecMemcpyNodeSetParams (  cudaGraphExec_t hGraphExec, cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphExecMemcpyNodeSetParams (hipGraphExec_t hGraphExec, hipGraphNode_t node, const hipMemcpy3DParms *pNodeParams)\nextern \"C\"  cudaError_t cudaGraphExecMemcpyNodeSetParams ( ",
      "forcePrediction": false
    },
    "cudaGraphExecUpdate": {
      "cuda": "cudaGraphExecUpdate",
      "hip": "hipGraphExecUpdate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExecUpdate",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraph_t",
          "cudaGraphExecUpdateResultInfoundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga0fb2ea2d5d6348888b074a7e44738b98",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExecUpdate"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraph_t hGraph, hipGraphNode_t *hErrorNode_out, hipGraphExecUpdateResult *updateResult_out)"
        ],
        "name": [
          "hipGraphExecUpdate"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraph"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hErrorNode_out"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphExecUpdateResult",
                    "$": {
                      "refid": "group___global_defs_1gac79a2b2c0f83ae81c9325978c044892e",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "updateResult_out"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Check whether an executable graph can be updated with a graph and perform the update if * possible. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of executable graph to update. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- graph that contains the updated parameters. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hErrorNode_out",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- node which caused the permissibility check to forbid the update. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "updateResult_out",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Whether the graph update was permitted. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorGraphExecUpdateFailure",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a3aa157043af8a1579eb0d89c05ff5aa1",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7091",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7091",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraph_t",
          "hipGraphNode_t",
          "hipGraphExecUpdateResult",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExecUpdate (  cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo )",
      "hipLine": "hipError_t hipGraphExecUpdate (hipGraphExec_t hGraphExec, hipGraph_t hGraph, hipGraphNode_t *hErrorNode_out, hipGraphExecUpdateResult *updateResult_out)",
      "graft": "// cudaError_t cudaGraphExecUpdate (  cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo ) using hipError_t hipGraphExecUpdate (hipGraphExec_t hGraphExec, hipGraph_t hGraph, hipGraphNode_t *hErrorNode_out, hipGraphExecUpdateResult *updateResult_out)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n\n// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n\n// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n\n// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphExecUpdateResult to cudaGraphExecUpdateResult\ncudaGraphExecUpdateResult hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult(hipGraphExecUpdateResult);\n\n// cudaGraphExecUpdateResult to hipGraphExecUpdateResult\nhipGraphExecUpdateResult cudaGraphExecUpdateResult_TO_hipGraphExecUpdateResult(cudaGraphExecUpdateResult);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExecUpdate (  cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo ) using hipError_t hipGraphExecUpdate (hipGraphExec_t hGraphExec, hipGraph_t hGraph, hipGraphNode_t *hErrorNode_out, hipGraphExecUpdateResult *updateResult_out)\nextern \"C\"  cudaError_t cudaGraphExecUpdate (  cudaGraphExec_t hGraphExec, cudaGraph_t hGraph, cudaGraphExecUpdateResultInfo* resultInfo )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExecUpdate call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipGraphExec_t hipGraphExec = cudaGraphExec_t_TO_hipGraphExec_t(hGraphExec);\n    hipGraph_t hipGraph = cudaGraph_t_TO_hipGraph_t(hGraph);\n    hipGraphNode_t *hErrorNode_out;\n    hipGraphExecUpdateResult *updateResult_out;\n    hipError_t hipError = hipGraphExecUpdate (hipGraphExec, hipGraph, hErrorNode_out, updateResult_out);\n\n    // Translate the result\n    resultInfo->hErrorNode_out = hipGraphNode_t_TO_cudaGraphNode_t(*hErrorNode_out);\n    resultInfo->updateResult_out = hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult(*updateResult_out);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cuda",
      "forcePrediction": false
    },
    "cudaGraphExternalSemaphoresSignalNodeGetParams": {
      "cuda": "cudaGraphExternalSemaphoresSignalNodeGetParams",
      "hip": "hipGraphExternalSemaphoresSignalNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExternalSemaphoresSignalNodeGetParams",
        "args": "  cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaExternalSemaphoreSignalNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5fce7651a7e9333ea23687f346d70c7f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExternalSemaphoresSignalNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, hipExternalSemaphoreSignalNodeParams *params_out)"
        ],
        "name": [
          "hipGraphExternalSemaphoresSignalNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreSignalNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_signal_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "params_out"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns external semaphore signal node params. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "params_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to params. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7951",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7951",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipExternalSemaphoreSignalNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out )",
      "hipLine": "hipError_t hipGraphExternalSemaphoresSignalNodeGetParams (hipGraphNode_t hNode, hipExternalSemaphoreSignalNodeParams *params_out)",
      "graft": "// cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out ) using hipError_t hipGraphExternalSemaphoresSignalNodeGetParams (hipGraphNode_t hNode, hipExternalSemaphoreSignalNodeParams *params_out)\nextern \"C\" ",
      "prediction": "\n#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n#include <cuda_runtime_api.h>\n\n#DEFINE VERBOSE 1\n\n// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n\n// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n\nundefined\n// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n\n// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n\n// hipExternalSemaphoreSignalNodeParams to cudaExternalSemaphoreSignalNodeParamsV2\ncudaExternalSemaphoreSignalNodeParamsV2 hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(hipExternalSemaphoreSignalNodeParams);\n\n// cudaExternalSemaphoreSignalNodeParamsV2 to hipExternalSemaphoreSignalNodeParams\nhipExternalSemaphoreSignalNodeParams cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams(cudaExternalSemaphoreSignalNodeParamsV2);\n\n\n// cudaError_t cudaGetDeviceCount(int* count) using hipGetDeviceCount(int* count)\nextern \"C\" cudaError_t cudaGetDeviceCount(int* count)\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGetDeviceCount call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGetDeviceCount(count);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out ) using hipError_t hipGraphExternalSemaphoresSignalNodeGetParams (hipGraphNode_t hNode, hipExternalSemaphoreSignalNodeParams *params_out)\nextern \"C\"  cudaError_t cudaGraphExternalSemaphoresSignalNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreSignalNodeParams* params_out )\n{\n    if(VERBOSE) std::cout << \"Intercepted cudaGraphExternalSemaphoresSignalNodeGetParams call\" << std::endl;\n    // Translate the call to its HIP counterpart\n    hipError_t hipError = hipGraphExternalSemaphoresSignalNodeGetParams (hipGraphNode_t_TO_cudaGraphNode_t(hNode), params_out);\n\n    return hipError_t_TO_cudaError_t(hipError);\n}\n\n// cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* params ) using hipError_t hipGraphExternalSemaphoresSignalNodeSetParams (hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *params)\nextern \"C\"  cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* params )\n{\n   ",
      "forcePrediction": false
    },
    "cudaGraphExternalSemaphoresSignalNodeSetParams": {
      "cuda": "cudaGraphExternalSemaphoresSignalNodeSetParams",
      "hip": "hipGraphExternalSemaphoresSignalNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExternalSemaphoresSignalNodeSetParams",
        "args": "  cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga25d077916d21a34bf5bfb7f7cc13eaf8",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExternalSemaphoresSignalNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphExternalSemaphoresSignalNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreSignalNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_signal_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Updates node parameters in the external semaphore signal node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the params to be set. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7929",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7929",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipExternalSemaphoreSignalNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphExternalSemaphoresSignalNodeSetParams (hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphExternalSemaphoresSignalNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreSignalNodeParams* nodeParams ) using hipError_t hipGraphExternalSemaphoresSignalNodeSetParams (hipGraphNode_t hNode, const hipExternalSemaphoreSignalNodeParams *nodeParams)\nextern \"C\" "
    },
    "cudaGraphExternalSemaphoresWaitNodeGetParams": {
      "cuda": "cudaGraphExternalSemaphoresWaitNodeGetParams",
      "hip": "hipGraphExternalSemaphoresWaitNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExternalSemaphoresWaitNodeGetParams",
        "args": "  cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaExternalSemaphoreWaitNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf6e73d6a19ca850f395febf4adb46ce7",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExternalSemaphoresWaitNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, hipExternalSemaphoreWaitNodeParams *params_out)"
        ],
        "name": [
          "hipGraphExternalSemaphoresWaitNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreWaitNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_wait_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "params_out"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns external semaphore wait node params. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "params_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to params. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7962",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7962",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipExternalSemaphoreWaitNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out )",
      "hipLine": "hipError_t hipGraphExternalSemaphoresWaitNodeGetParams (hipGraphNode_t hNode, hipExternalSemaphoreWaitNodeParams *params_out)",
      "graft": "// cudaError_t cudaGraphExternalSemaphoresWaitNodeGetParams (  cudaGraphNode_t hNode, cudaExternalSemaphoreWaitNodeParams* params_out ) using hipError_t hipGraphExternalSemaphoresWaitNodeGetParams (hipGraphNode_t hNode, hipExternalSemaphoreWaitNodeParams *params_out)\nextern \"C\" "
    },
    "cudaGraphExternalSemaphoresWaitNodeSetParams": {
      "cuda": "cudaGraphExternalSemaphoresWaitNodeSetParams",
      "hip": "hipGraphExternalSemaphoresWaitNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphExternalSemaphoresWaitNodeSetParams",
        "args": "  cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga993155e50b96e92f383bdcf62aa2d099",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphExternalSemaphoresWaitNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)"
        ],
        "name": [
          "hipGraphExternalSemaphoresWaitNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipExternalSemaphoreWaitNodeParams",
                    "$": {
                      "refid": "structhip_external_semaphore_wait_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Updates node parameters in the external semaphore wait node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Pointer to the params to be set. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7940",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7940",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipExternalSemaphoreWaitNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams )",
      "hipLine": "hipError_t hipGraphExternalSemaphoresWaitNodeSetParams (hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)",
      "graft": "// cudaError_t cudaGraphExternalSemaphoresWaitNodeSetParams (  cudaGraphNode_t hNode, const cudaExternalSemaphoreWaitNodeParams* nodeParams ) using hipError_t hipGraphExternalSemaphoresWaitNodeSetParams (hipGraphNode_t hNode, const hipExternalSemaphoreWaitNodeParams *nodeParams)\nextern \"C\" "
    },
    "cudaGraphGetEdges": {
      "cuda": "cudaGraphGetEdges",
      "hip": "hipGraphGetEdges",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphGetEdges",
        "args": "  cudaGraph_t graph, cudaGraphNode_t* from, cudaGraphNode_t* to, size_t* numEdges ",
        "types": [
          "cudaGraph_t",
          "cudaGraphNode_tundefined",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gab44fc541c62279d674436289d8f504b1",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphGetEdges"
        ],
        "argsstring": [
          "(hipGraph_t graph, hipGraphNode_t *from, hipGraphNode_t *to, size_t *numEdges)"
        ],
        "name": [
          "hipGraphGetEdges"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "from"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "to"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "numEdges"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a graph's dependency edges. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nfrom and to may both be NULL, in which case this function only returns the number of edges in numEdges. Otherwise, numEdges entries will be filled in. If numEdges is higher than the actual number of edges, the remaining entries in from and to will be set to NULL, and the number of edges actually returned will be written to numEdges \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to get the edges from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "from",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph nodes to return edge endpoints. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "to",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the graph nodes to return edge endpoints. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numEdges",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns number of edges. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6812",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6812",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipGraphNode_t",
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphGetEdges (  cudaGraph_t graph, cudaGraphNode_t* from, cudaGraphNode_t* to, size_t* numEdges )",
      "hipLine": "hipError_t hipGraphGetEdges (hipGraph_t graph, hipGraphNode_t *from, hipGraphNode_t *to, size_t *numEdges)",
      "graft": "// cudaError_t cudaGraphGetEdges (  cudaGraph_t graph, cudaGraphNode_t* from, cudaGraphNode_t* to, size_t* numEdges ) using hipError_t hipGraphGetEdges (hipGraph_t graph, hipGraphNode_t *from, hipGraphNode_t *to, size_t *numEdges)\nextern \"C\" "
    },
    "cudaGraphGetNodes": {
      "cuda": "cudaGraphGetNodes",
      "hip": "hipGraphGetNodes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphGetNodes",
        "args": "  cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes ",
        "types": [
          "cudaGraph_t",
          "cudaGraphNode_tundefined",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf006701d98164ed3492755bbb19bab83",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphGetNodes"
        ],
        "argsstring": [
          "(hipGraph_t graph, hipGraphNode_t *nodes, size_t *numNodes)"
        ],
        "name": [
          "hipGraphGetNodes"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "nodes"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "numNodes"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns graph nodes. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nnodes may be NULL, in which case this function will return the number of nodes in numNodes. Otherwise, numNodes entries will be filled in. If numNodes is higher than the actual number of nodes, the remaining entries in nodes will be set to NULL, and the number of nodes actually obtained will be returned in numNodes. \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to get the nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "nodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to return the graph nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numNodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns number of graph nodes. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6831",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6831",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipGraphNode_t",
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphGetNodes (  cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes )",
      "hipLine": "hipError_t hipGraphGetNodes (hipGraph_t graph, hipGraphNode_t *nodes, size_t *numNodes)",
      "graft": "// cudaError_t cudaGraphGetNodes (  cudaGraph_t graph, cudaGraphNode_t* nodes, size_t* numNodes ) using hipError_t hipGraphGetNodes (hipGraph_t graph, hipGraphNode_t *nodes, size_t *numNodes)\nextern \"C\" "
    },
    "cudaGraphGetRootNodes": {
      "cuda": "cudaGraphGetRootNodes",
      "hip": "hipGraphGetRootNodes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphGetRootNodes",
        "args": "  cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes ",
        "types": [
          "cudaGraph_t",
          "cudaGraphNode_tundefined",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gafc3f79160be0a919644835388258bd87",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphGetRootNodes"
        ],
        "argsstring": [
          "(hipGraph_t graph, hipGraphNode_t *pRootNodes, size_t *pNumRootNodes)"
        ],
        "name": [
          "hipGraphGetRootNodes"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pRootNodes"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "pNumRootNodes"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns graph's root nodes. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\npRootNodes may be NULL, in which case this function will return the number of root nodes in pNumRootNodes. Otherwise, pNumRootNodes entries will be filled in. If pNumRootNodes is higher than the actual number of root nodes, the remaining entries in pRootNodes will be set to NULL, and the number of nodes actually obtained will be returned in pNumRootNodes. \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to get the nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pRootNodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to return the graph's root nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNumRootNodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns the number of graph's root nodes. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6849",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6849",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipGraphNode_t",
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphGetRootNodes (  cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes )",
      "hipLine": "hipError_t hipGraphGetRootNodes (hipGraph_t graph, hipGraphNode_t *pRootNodes, size_t *pNumRootNodes)",
      "graft": "// cudaError_t cudaGraphGetRootNodes (  cudaGraph_t graph, cudaGraphNode_t* pRootNodes, size_t* pNumRootNodes ) using hipError_t hipGraphGetRootNodes (hipGraph_t graph, hipGraphNode_t *pRootNodes, size_t *pNumRootNodes)\nextern \"C\" "
    },
    "cudaGraphHostNodeGetParams": {
      "cuda": "cudaGraphHostNodeGetParams",
      "hip": "hipGraphHostNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphHostNodeGetParams",
        "args": "  cudaGraphNode_t node, cudaHostNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "cudaHostNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5ee553eb113a3cf55afc9f279b231989",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphHostNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipHostNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphHostNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipHostNodeParams",
                    "$": {
                      "refid": "structhip_host_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a host node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to get parameters from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7479",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7479",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipHostNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphHostNodeGetParams (  cudaGraphNode_t node, cudaHostNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphHostNodeGetParams (hipGraphNode_t node, hipHostNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphHostNodeGetParams (  cudaGraphNode_t node, cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphHostNodeGetParams (hipGraphNode_t node, hipHostNodeParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphHostNodeSetParams": {
      "cuda": "cudaGraphHostNodeSetParams",
      "hip": "hipGraphHostNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphHostNodeSetParams",
        "args": "  cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga8e51945beaf0b3b27c3b79a0decd3b80",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphHostNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, const hipHostNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphHostNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipHostNodeParams",
                    "$": {
                      "refid": "structhip_host_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a host node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7490",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7490",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipHostNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphHostNodeSetParams (  cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphHostNodeSetParams (hipGraphNode_t node, const hipHostNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphHostNodeSetParams (  cudaGraphNode_t node, const cudaHostNodeParams* pNodeParams ) using hipError_t hipGraphHostNodeSetParams (hipGraphNode_t node, const hipHostNodeParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphInstantiate": {
      "cuda": "cudaGraphInstantiate",
      "hip": "hipGraphInstantiate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphInstantiate",
        "args": "  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize ",
        "types": [
          "cudaGraphExec_tundefined",
          "cudaGraph_t",
          "cudaGraphNode_tundefined",
          "charundefined",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaf5ede92050539e795805f4e2705e6b59",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphInstantiate"
        ],
        "argsstring": [
          "(hipGraphExec_t *pGraphExec, hipGraph_t graph, hipGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize)"
        ],
        "name": [
          "hipGraphInstantiate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pErrorNode"
            ]
          },
          {
            "type": [
              "char *"
            ],
            "declname": [
              "pLogBuffer"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "bufferSize"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates an executable graph from a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphExec",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instantiated executable graph that is created. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to instantiate. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pErrorNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to error node in case error occured in graph instantiation, it could modify the correponding node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pLogBuffer",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to log buffer. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "bufferSize",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of log buffer."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorOutOfMemory",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae23caaaf7a374a9f79db8c0909c83a8d",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6960",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6960",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraph_t",
          "hipGraphNode_t",
          "char undefined",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphInstantiate (  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize )",
      "hipLine": "hipError_t hipGraphInstantiate (hipGraphExec_t *pGraphExec, hipGraph_t graph, hipGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize)",
      "graft": "// cudaError_t cudaGraphInstantiate (  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, cudaGraphNode_t* pErrorNode, char* pLogBuffer, size_t bufferSize ) using hipError_t hipGraphInstantiate (hipGraphExec_t *pGraphExec, hipGraph_t graph, hipGraphNode_t *pErrorNode, char *pLogBuffer, size_t bufferSize)\nextern \"C\" "
    },
    "cudaGraphInstantiateWithFlags": {
      "cuda": "cudaGraphInstantiateWithFlags",
      "hip": "hipGraphInstantiateWithFlags",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphInstantiateWithFlags",
        "args": "  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags = 0 ",
        "types": [
          "cudaGraphExec_tundefined",
          "cudaGraph_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5f8c8f7c3cf2db57908891b715759028",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphInstantiateWithFlags"
        ],
        "argsstring": [
          "(hipGraphExec_t *pGraphExec, hipGraph_t graph, unsigned long long flags)"
        ],
        "name": [
          "hipGraphInstantiateWithFlags"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              "unsigned long long"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Creates an executable graph from a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pGraphExec",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instantiated executable graph that is created. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of graph to instantiate. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Flags to control instantiation. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues.It does not support any of flag and is behaving as hipGraphInstantiate. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6975",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6975",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraph_t",
          "unsigned long long",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphInstantiateWithFlags (  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags = 0 )",
      "hipLine": "hipError_t hipGraphInstantiateWithFlags (hipGraphExec_t *pGraphExec, hipGraph_t graph, unsigned long long flags)",
      "graft": "// cudaError_t cudaGraphInstantiateWithFlags (  cudaGraphExec_t* pGraphExec, cudaGraph_t graph, unsigned long long flags = 0 ) using hipError_t hipGraphInstantiateWithFlags (hipGraphExec_t *pGraphExec, hipGraph_t graph, unsigned long long flags)\nextern \"C\" "
    },
    "cudaGraphKernelNodeCopyAttributes": {
      "cuda": "cudaGraphKernelNodeCopyAttributes",
      "hip": "hipGraphKernelNodeCopyAttributes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphKernelNodeCopyAttributes",
        "args": "  cudaGraphNode_t hSrc, cudaGraphNode_t hDst ",
        "types": [
          "cudaGraphNode_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga6fd9af1ec50bc34c6500fe276d05946f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphKernelNodeCopyAttributes"
        ],
        "argsstring": [
          "(hipGraphNode_t hSrc, hipGraphNode_t hDst)"
        ],
        "name": [
          "hipGraphKernelNodeCopyAttributes"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hSrc"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hDst"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Copies attributes from source node to destination node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Copies attributes from source node to destination node. Both node must have the same context.",
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hDst",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Destination node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hSrc",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              {
                                "_": "- Source node. For list of attributes see .",
                                "ref": [
                                  {
                                    "_": "hipKernelNodeAttrID",
                                    "$": {
                                      "refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
                                      "kindref": "member"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidContext",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a50d78024cb74c593bb51563027f78e97",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7840",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7840",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphKernelNodeCopyAttributes (  cudaGraphNode_t hSrc, cudaGraphNode_t hDst )",
      "hipLine": "hipError_t hipGraphKernelNodeCopyAttributes (hipGraphNode_t hSrc, hipGraphNode_t hDst)",
      "graft": "// cudaError_t cudaGraphKernelNodeCopyAttributes (  cudaGraphNode_t hSrc, cudaGraphNode_t hDst ) using hipError_t hipGraphKernelNodeCopyAttributes (hipGraphNode_t hSrc, hipGraphNode_t hDst)\nextern \"C\" "
    },
    "cudaGraphKernelNodeGetAttribute": {
      "cuda": "cudaGraphKernelNodeGetAttribute",
      "hip": "hipGraphKernelNodeGetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphKernelNodeGetAttribute",
        "args": "  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaKernelNodeAttrID",
          "cudaKernelNodeAttrValueundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gaa3d0f64875d84bea5ddf11b94364d598",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphKernelNodeGetAttribute"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, hipKernelNodeAttrID attr, hipKernelNodeAttrValue *value)"
        ],
        "name": [
          "hipGraphKernelNodeGetAttribute"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipKernelNodeAttrID",
                    "$": {
                      "refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipKernelNodeAttrValue",
                    "$": {
                      "refid": "group___global_defs_1ga34eb9fa298c10a891ed61bea24ed6c19",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets a node attribute. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the attribute node is set to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7222",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7222",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipKernelNodeAttrID",
          "hipKernelNodeAttrValue",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphKernelNodeGetAttribute (  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out )",
      "hipLine": "hipError_t hipGraphKernelNodeGetAttribute (hipGraphNode_t hNode, hipKernelNodeAttrID attr, hipKernelNodeAttrValue *value)",
      "graft": "// cudaError_t cudaGraphKernelNodeGetAttribute (  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, cudaKernelNodeAttrValue* value_out ) using hipError_t hipGraphKernelNodeGetAttribute (hipGraphNode_t hNode, hipKernelNodeAttrID attr, hipKernelNodeAttrValue *value)\nextern \"C\" "
    },
    "cudaGraphKernelNodeGetParams": {
      "cuda": "cudaGraphKernelNodeGetParams",
      "hip": "hipGraphKernelNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphKernelNodeGetParams",
        "args": "  cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "cudaKernelNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga6d46df5efcbfebb98d7b9bfaba4d81b6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphKernelNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipKernelNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphKernelNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipKernelNodeParams",
                    "$": {
                      "refid": "structhip_kernel_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets kernel node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to get parameters from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7120",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7120",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipKernelNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphKernelNodeGetParams (  cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphKernelNodeGetParams (hipGraphNode_t node, hipKernelNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphKernelNodeGetParams (  cudaGraphNode_t node, cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphKernelNodeGetParams (hipGraphNode_t node, hipKernelNodeParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphKernelNodeSetAttribute": {
      "cuda": "cudaGraphKernelNodeSetAttribute",
      "hip": "hipGraphKernelNodeSetAttribute",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphKernelNodeSetAttribute",
        "args": "  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value ",
        "types": [
          "cudaGraphNode_t",
          "cudaKernelNodeAttrID",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gacfa93a3e229d03215c3da71f44d70d56",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphKernelNodeSetAttribute"
        ],
        "argsstring": [
          "(hipGraphNode_t hNode, hipKernelNodeAttrID attr, const hipKernelNodeAttrValue *value)"
        ],
        "name": [
          "hipGraphKernelNodeSetAttribute"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipKernelNodeAttrID",
                    "$": {
                      "refid": "group___global_defs_1gac88b62d1b19899d8611f8b0d81c8aefc",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "attr"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipKernelNodeAttrValue",
                    "$": {
                      "refid": "group___global_defs_1ga34eb9fa298c10a891ed61bea24ed6c19",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "value"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a node attribute. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "attr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the attribute node is set to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "value",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7210",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7210",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipKernelNodeAttrID",
          "hipKernelNodeAttrValue",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphKernelNodeSetAttribute (  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value )",
      "hipLine": "hipError_t hipGraphKernelNodeSetAttribute (hipGraphNode_t hNode, hipKernelNodeAttrID attr, const hipKernelNodeAttrValue *value)",
      "graft": "// cudaError_t cudaGraphKernelNodeSetAttribute (  cudaGraphNode_t hNode, cudaKernelNodeAttrID attr, const cudaKernelNodeAttrValue* value ) using hipError_t hipGraphKernelNodeSetAttribute (hipGraphNode_t hNode, hipKernelNodeAttrID attr, const hipKernelNodeAttrValue *value)\nextern \"C\" "
    },
    "cudaGraphKernelNodeSetParams": {
      "cuda": "cudaGraphKernelNodeSetParams",
      "hip": "hipGraphKernelNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphKernelNodeSetParams",
        "args": "  cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga00c58e917faec3f6d71cbef95336105b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphKernelNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphKernelNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipKernelNodeParams",
                    "$": {
                      "refid": "structhip_kernel_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a kernel node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7131",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7131",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipKernelNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphKernelNodeSetParams (  cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphKernelNodeSetParams (hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphKernelNodeSetParams (  cudaGraphNode_t node, const cudaKernelNodeParams* pNodeParams ) using hipError_t hipGraphKernelNodeSetParams (hipGraphNode_t node, const hipKernelNodeParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphMemAllocNodeGetParams": {
      "cuda": "cudaGraphMemAllocNodeGetParams",
      "hip": "hipGraphMemAllocNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemAllocNodeGetParams",
        "args": "  cudaGraphNode_t node, cudaMemAllocNodeParams* params_out ",
        "types": [
          "cudaGraphNode_t",
          "cudaMemAllocNodeParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga8fbf788fab0247056ab27ce6eccfb20e",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemAllocNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipMemAllocNodeParams *pNodeParams)"
        ],
        "name": [
          "hipGraphMemAllocNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemAllocNodeParams",
                    "$": {
                      "refid": "structhip_mem_alloc_node_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns parameters for memory allocation node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Memory allocation node for a query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Parameters for the specified memory allocation node "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7687",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7687",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipMemAllocNodeParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemAllocNodeGetParams (  cudaGraphNode_t node, cudaMemAllocNodeParams* params_out )",
      "hipLine": "hipError_t hipGraphMemAllocNodeGetParams (hipGraphNode_t node, hipMemAllocNodeParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphMemAllocNodeGetParams (  cudaGraphNode_t node, cudaMemAllocNodeParams* params_out ) using hipError_t hipGraphMemAllocNodeGetParams (hipGraphNode_t node, hipMemAllocNodeParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphMemFreeNodeGetParams": {
      "cuda": "cudaGraphMemFreeNodeGetParams",
      "hip": "hipGraphMemFreeNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemFreeNodeGetParams",
        "args": "  cudaGraphNode_t node, void* dptr_out ",
        "types": [
          "cudaGraphNode_t",
          "voidundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga0173b789bbf238185d90733fe36d9a07",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemFreeNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, void *dev_ptr)"
        ],
        "name": [
          "hipGraphMemFreeNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dev_ptr"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns parameters for memory free node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Memory free node for a query "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dev_ptr",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device pointer for the specified memory free node "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7713",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7713",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "void undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemFreeNodeGetParams (  cudaGraphNode_t node, void* dptr_out )",
      "hipLine": "hipError_t hipGraphMemFreeNodeGetParams (hipGraphNode_t node, void *dev_ptr)",
      "graft": "// cudaError_t cudaGraphMemFreeNodeGetParams (  cudaGraphNode_t node, void* dptr_out ) using hipError_t hipGraphMemFreeNodeGetParams (hipGraphNode_t node, void *dev_ptr)\nextern \"C\" "
    },
    "cudaGraphMemcpyNodeGetParams": {
      "cuda": "cudaGraphMemcpyNodeGetParams",
      "hip": "hipGraphMemcpyNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemcpyNodeGetParams",
        "args": "  cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "cudaMemcpy3DParmsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga72fec822464281fa91a6a3b19556f17d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemcpyNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)"
        ],
        "name": [
          "hipGraphMemcpyNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemcpy3DParms",
                    "$": {
                      "refid": "structhip_memcpy3_d_parms",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets a memcpy node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to get parameters from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7187",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7187",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipMemcpy3DParms",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemcpyNodeGetParams (  cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams )",
      "hipLine": "hipError_t hipGraphMemcpyNodeGetParams (hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)",
      "graft": "// cudaError_t cudaGraphMemcpyNodeGetParams (  cudaGraphNode_t node, cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphMemcpyNodeGetParams (hipGraphNode_t node, hipMemcpy3DParms *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphMemcpyNodeSetParams": {
      "cuda": "cudaGraphMemcpyNodeSetParams",
      "hip": "hipGraphMemcpyNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemcpyNodeSetParams",
        "args": "  cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga098c63fb0fbb57e8d9ee6da0fbfccc70",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemcpyNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, const hipMemcpy3DParms *pNodeParams)"
        ],
        "name": [
          "hipGraphMemcpyNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemcpy3DParms",
                    "$": {
                      "refid": "structhip_memcpy3_d_parms",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a memcpy node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- const pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7198",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7198",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipMemcpy3DParms",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemcpyNodeSetParams (  cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams )",
      "hipLine": "hipError_t hipGraphMemcpyNodeSetParams (hipGraphNode_t node, const hipMemcpy3DParms *pNodeParams)",
      "graft": "// cudaError_t cudaGraphMemcpyNodeSetParams (  cudaGraphNode_t node, const cudaMemcpy3DParms* pNodeParams ) using hipError_t hipGraphMemcpyNodeSetParams (hipGraphNode_t node, const hipMemcpy3DParms *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphMemcpyNodeSetParams1D": {
      "cuda": "cudaGraphMemcpyNodeSetParams1D",
      "hip": "hipGraphMemcpyNodeSetParams1D",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemcpyNodeSetParams1D",
        "args": "  cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_t",
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga3c7686dca4a405d9ec5a8a89615d33a7",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemcpyNodeSetParams1D"
        ],
        "argsstring": [
          "(hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphMemcpyNodeSetParams1D"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a memcpy node's parameters to perform a 1-dimensional copy. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the source. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7268",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7268",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemcpyNodeSetParams1D (  cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphMemcpyNodeSetParams1D (hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphMemcpyNodeSetParams1D (  cudaGraphNode_t node, void* dst, const void* src, size_t count, cudaMemcpyKind kind ) using hipError_t hipGraphMemcpyNodeSetParams1D (hipGraphNode_t node, void *dst, const void *src, size_t count, hipMemcpyKind kind)\nextern \"C\" "
    },
    "cudaGraphMemcpyNodeSetParamsFromSymbol": {
      "cuda": "cudaGraphMemcpyNodeSetParamsFromSymbol",
      "hip": "hipGraphMemcpyNodeSetParamsFromSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemcpyNodeSetParamsFromSymbol",
        "args": "  cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_t",
          "voidundefined",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga2d8fb8cff71140a7183b488dfd5c5642",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemcpyNodeSetParamsFromSymbol"
        ],
        "argsstring": [
          "(hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphMemcpyNodeSetParamsFromSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "dst"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a memcpy node's parameters to copy from a symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "dst",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address to the destination. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7323",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7323",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "void undefined",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol (  cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphMemcpyNodeSetParamsFromSymbol (hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphMemcpyNodeSetParamsFromSymbol (  cudaGraphNode_t node, void* dst, const T& symbol, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphMemcpyNodeSetParamsFromSymbol (hipGraphNode_t node, void *dst, const void *symbol, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" "
    },
    "cudaGraphMemcpyNodeSetParamsToSymbol": {
      "cuda": "cudaGraphMemcpyNodeSetParamsToSymbol",
      "hip": "hipGraphMemcpyNodeSetParamsToSymbol",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemcpyNodeSetParamsToSymbol",
        "args": "  cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "size_t",
          "cudaMemcpyKind",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga1993d843a450078b3a91f82ff4e0ac02",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemcpyNodeSetParamsToSymbol"
        ],
        "argsstring": [
          "(hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)"
        ],
        "name": [
          "hipGraphMemcpyNodeSetParamsToSymbol"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "symbol"
            ]
          },
          {
            "type": [
              "const void *"
            ],
            "declname": [
              "src"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "offset"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipMemcpyKind",
                    "$": {
                      "refid": "driver__types_8h_1a232e222db36b1fc672ba98054d036a18",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "kind"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a memcpy node's parameters to copy to a symbol on the device. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "symbol",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Device symbol address. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "src",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to memory address of the src. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the size of the memory to copy. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "offset",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Offset from start of symbol in bytes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "kind",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the type of memory copy. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7380",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7380",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "const void undefined",
          "size_t",
          "hipMemcpyKind",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol (  cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind )",
      "hipLine": "hipError_t hipGraphMemcpyNodeSetParamsToSymbol (hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)",
      "graft": "// cudaError_t cudaGraphMemcpyNodeSetParamsToSymbol (  cudaGraphNode_t node, const T& symbol, const void* src, size_t count, size_t offset, cudaMemcpyKind kind ) using hipError_t hipGraphMemcpyNodeSetParamsToSymbol (hipGraphNode_t node, const void *symbol, const void *src, size_t count, size_t offset, hipMemcpyKind kind)\nextern \"C\" "
    },
    "cudaGraphMemsetNodeGetParams": {
      "cuda": "cudaGraphMemsetNodeGetParams",
      "hip": "hipGraphMemsetNodeGetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemsetNodeGetParams",
        "args": "  cudaGraphNode_t node, cudaMemsetParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "cudaMemsetParamsundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga9d41c500748b2b774aecb54d7ede5bbd",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemsetNodeGetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipMemsetParams *pNodeParams)"
        ],
        "name": [
          "hipGraphMemsetNodeGetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipMemsetParams",
                    "$": {
                      "refid": "structhip_memset_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Gets a memset node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instane of the node to get parameters from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7428",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7428",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipMemsetParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemsetNodeGetParams (  cudaGraphNode_t node, cudaMemsetParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphMemsetNodeGetParams (hipGraphNode_t node, hipMemsetParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphMemsetNodeGetParams (  cudaGraphNode_t node, cudaMemsetParams* pNodeParams ) using hipError_t hipGraphMemsetNodeGetParams (hipGraphNode_t node, hipMemsetParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphMemsetNodeSetParams": {
      "cuda": "cudaGraphMemsetNodeSetParams",
      "hip": "hipGraphMemsetNodeSetParams",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphMemsetNodeSetParams",
        "args": "  cudaGraphNode_t node, const cudaMemsetParams* pNodeParams ",
        "types": [
          "cudaGraphNode_t",
          "const",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gad5ab6dd1f9d88c3bc662c271c8aff1a3",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphMemsetNodeSetParams"
        ],
        "argsstring": [
          "(hipGraphNode_t node, const hipMemsetParams *pNodeParams)"
        ],
        "name": [
          "hipGraphMemsetNodeSetParams"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipMemsetParams",
                    "$": {
                      "refid": "structhip_memset_params",
                      "kindref": "compound"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNodeParams"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Sets a memset node's parameters. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the node to set parameters to. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNodeParams",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the parameters. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7439",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7439",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipMemsetParams",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphMemsetNodeSetParams (  cudaGraphNode_t node, const cudaMemsetParams* pNodeParams )",
      "hipLine": "hipError_t hipGraphMemsetNodeSetParams (hipGraphNode_t node, const hipMemsetParams *pNodeParams)",
      "graft": "// cudaError_t cudaGraphMemsetNodeSetParams (  cudaGraphNode_t node, const cudaMemsetParams* pNodeParams ) using hipError_t hipGraphMemsetNodeSetParams (hipGraphNode_t node, const hipMemsetParams *pNodeParams)\nextern \"C\" "
    },
    "cudaGraphNodeFindInClone": {
      "cuda": "cudaGraphNodeFindInClone",
      "hip": "hipGraphNodeFindInClone",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeFindInClone",
        "args": "  cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph ",
        "types": [
          "cudaGraphNode_tundefined",
          "cudaGraphNode_t",
          "cudaGraph_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga14d9f4cc7967a4cb06aca0631025495d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeFindInClone"
        ],
        "argsstring": [
          "(hipGraphNode_t *pNode, hipGraphNode_t originalNode, hipGraph_t clonedGraph)"
        ],
        "name": [
          "hipGraphNodeFindInClone"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "originalNode"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "clonedGraph"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Finds a cloned version of a node. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNode",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Returns the cloned node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "originalNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- original node handle. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "clonedGraph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Cloned graph to query. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6941",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6941",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraph_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeFindInClone (  cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph )",
      "hipLine": "hipError_t hipGraphNodeFindInClone (hipGraphNode_t *pNode, hipGraphNode_t originalNode, hipGraph_t clonedGraph)",
      "graft": "// cudaError_t cudaGraphNodeFindInClone (  cudaGraphNode_t* pNode, cudaGraphNode_t originalNode, cudaGraph_t clonedGraph ) using hipError_t hipGraphNodeFindInClone (hipGraphNode_t *pNode, hipGraphNode_t originalNode, hipGraph_t clonedGraph)\nextern \"C\" "
    },
    "cudaGraphNodeGetDependencies": {
      "cuda": "cudaGraphNodeGetDependencies",
      "hip": "hipGraphNodeGetDependencies",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeGetDependencies",
        "args": "  cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies ",
        "types": [
          "cudaGraphNode_t",
          "cudaGraphNode_tundefined",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga03f5231946f3e850de44120b3fffd58b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeGetDependencies"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipGraphNode_t *pDependencies, size_t *pNumDependencies)"
        ],
        "name": [
          "hipGraphNodeGetDependencies"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependencies"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "pNumDependencies"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a node's dependencies. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\npDependencies may be NULL, in which case this function will return the number of dependencies in pNumDependencies. Otherwise, pNumDependencies entries will be filled in. If pNumDependencies is higher than the actual number of dependencies, the remaining entries in pDependencies will be set to NULL, and the number of nodes actually obtained will be returned in pNumDependencies. \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- graph node to get the dependencies from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependencies",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to to return the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNumDependencies",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns the number of graph node dependencies. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6868",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6868",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeGetDependencies (  cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies )",
      "hipLine": "hipError_t hipGraphNodeGetDependencies (hipGraphNode_t node, hipGraphNode_t *pDependencies, size_t *pNumDependencies)",
      "graft": "// cudaError_t cudaGraphNodeGetDependencies (  cudaGraphNode_t node, cudaGraphNode_t* pDependencies, size_t* pNumDependencies ) using hipError_t hipGraphNodeGetDependencies (hipGraphNode_t node, hipGraphNode_t *pDependencies, size_t *pNumDependencies)\nextern \"C\" "
    },
    "cudaGraphNodeGetDependentNodes": {
      "cuda": "cudaGraphNodeGetDependentNodes",
      "hip": "hipGraphNodeGetDependentNodes",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeGetDependentNodes",
        "args": "  cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes ",
        "types": [
          "cudaGraphNode_t",
          "cudaGraphNode_tundefined",
          "size_tundefined",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga5ca0eedf026ec470d3e7d10724b08253",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeGetDependentNodes"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)"
        ],
        "name": [
          "hipGraphNodeGetDependentNodes"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pDependentNodes"
            ]
          },
          {
            "type": [
              "size_t *"
            ],
            "declname": [
              "pNumDependentNodes"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a node's dependent nodes. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "_": "\n\nDependentNodes may be NULL, in which case this function will return the number of dependent nodes in pNumDependentNodes. Otherwise, pNumDependentNodes entries will be filled in. If pNumDependentNodes is higher than the actual number of dependent nodes, the remaining entries in pDependentNodes will be set to NULL, and the number of nodes actually obtained will be returned in pNumDependentNodes. \n",
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- graph node to get the Dependent nodes from. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pDependentNodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to return the graph dependent nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pNumDependentNodes",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- returns the number of graph node dependent nodes. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6888",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6888",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "size_t undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeGetDependentNodes (  cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes )",
      "hipLine": "hipError_t hipGraphNodeGetDependentNodes (hipGraphNode_t node, hipGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)",
      "graft": "// cudaError_t cudaGraphNodeGetDependentNodes (  cudaGraphNode_t node, cudaGraphNode_t* pDependentNodes, size_t* pNumDependentNodes ) using hipError_t hipGraphNodeGetDependentNodes (hipGraphNode_t node, hipGraphNode_t *pDependentNodes, size_t *pNumDependentNodes)\nextern \"C\" "
    },
    "cudaGraphNodeGetEnabled": {
      "cuda": "cudaGraphNodeGetEnabled",
      "hip": "hipGraphNodeGetEnabled",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeGetEnabled",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga207d60e261a723f81dd573423602239c",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeGetEnabled"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int *isEnabled)"
        ],
        "name": [
          "hipGraphNodeGetEnabled"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              "unsigned int *"
            ],
            "declname": [
              "isEnabled"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Query whether a node in the given graphExec is enabled. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Sets isEnabled to 1 if hNode is enabled, or 0 if it is disabled.",
              "The node is identified by the corresponding node in the non-executable graph, from which the executable graph was instantiated.",
              "hNode must not have been removed from the original graph.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "Currently only kernel, memset and memcpy nodes are supported."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The executable graph in which to set the specified node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "isEnabled",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Location to return the enabled status of the node."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7886",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7886",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "unsigned int undefined",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeGetEnabled (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled )",
      "hipLine": "hipError_t hipGraphNodeGetEnabled (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int *isEnabled)",
      "graft": "// cudaError_t cudaGraphNodeGetEnabled (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int* isEnabled ) using hipError_t hipGraphNodeGetEnabled (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int *isEnabled)\nextern \"C\" "
    },
    "cudaGraphNodeGetType": {
      "cuda": "cudaGraphNodeGetType",
      "hip": "hipGraphNodeGetType",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeGetType",
        "args": "  cudaGraphNode_t node, cudaGraphNodeType ** pType ",
        "types": [
          "cudaGraphNode_t",
          "cudaGraphNodeType",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga87c68ae9408a6438d4a1101560ceea11",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeGetType"
        ],
        "argsstring": [
          "(hipGraphNode_t node, hipGraphNodeType *pType)"
        ],
        "name": [
          "hipGraphNodeGetType"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "node"
            ]
          },
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipGraphNodeType",
                    "$": {
                      "refid": "group___global_defs_1ga4727d20b89566832c74b762f987b9728",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "pType"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Returns a node's type. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "node",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to add dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "pType",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to the return the type "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6902",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6902",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphNode_t",
          "hipGraphNodeType",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeGetType (  cudaGraphNode_t node, cudaGraphNodeType ** pType )",
      "hipLine": "hipError_t hipGraphNodeGetType (hipGraphNode_t node, hipGraphNodeType *pType)",
      "graft": "// cudaError_t cudaGraphNodeGetType (  cudaGraphNode_t node, cudaGraphNodeType ** pType ) using hipError_t hipGraphNodeGetType (hipGraphNode_t node, hipGraphNodeType *pType)\nextern \"C\" "
    },
    "cudaGraphNodeSetEnabled": {
      "cuda": "cudaGraphNodeSetEnabled",
      "hip": "hipGraphNodeSetEnabled",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphNodeSetEnabled",
        "args": "  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int  isEnabled ",
        "types": [
          "cudaGraphExec_t",
          "cudaGraphNode_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga8902200d9fed1df7644fc7a51c4d327b",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphNodeSetEnabled"
        ],
        "argsstring": [
          "(hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int isEnabled)"
        ],
        "name": [
          "hipGraphNodeSetEnabled"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hGraphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "hNode"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "isEnabled"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Enables or disables the specified node in the given graphExec. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              "Sets hNode to be either enabled or disabled. Disabled nodes are functionally equivalent to empty nodes until they are reenabled. Existing node parameters are not affected by disabling/enabling the node.",
              "The node is identified by the corresponding hNode in the non-executable graph, from which the executable graph was instantiated.",
              "hNode must not have been removed from the original graph.",
              {
                "simplesect": [
                  {
                    "$": {
                      "kind": "note"
                    },
                    "para": [
                      "Currently only kernel, memset and memcpy nodes are supported."
                    ]
                  },
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", , ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ],
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hGraphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- The executable graph in which to set the specified node. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "hNode",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node from the graph from which graphExec was instantiated. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "isEnabled",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Node is enabled if != 0, otherwise the node is disabled."
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7864",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7864",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipGraphNode_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphNodeSetEnabled (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int  isEnabled )",
      "hipLine": "hipError_t hipGraphNodeSetEnabled (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int isEnabled)",
      "graft": "// cudaError_t cudaGraphNodeSetEnabled (  cudaGraphExec_t hGraphExec, cudaGraphNode_t hNode, unsigned int  isEnabled ) using hipError_t hipGraphNodeSetEnabled (hipGraphExec_t hGraphExec, hipGraphNode_t hNode, unsigned int isEnabled)\nextern \"C\" "
    },
    "cudaGraphReleaseUserObject": {
      "cuda": "cudaGraphReleaseUserObject",
      "hip": "hipGraphReleaseUserObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphReleaseUserObject",
        "args": "  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1 ",
        "types": [
          "cudaGraph_t",
          "cudaUserObject_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga3287f181e8e0999c6774ac37ba04ee8f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphReleaseUserObject"
        ],
        "argsstring": [
          "(hipGraph_t graph, hipUserObject_t object, unsigned int count)"
        ],
        "name": [
          "hipGraphReleaseUserObject"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipUserObject_t",
                    "$": {
                      "refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "object"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Release user object from graphs. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph to retain the user object for. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "object",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instace of userobj. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- reference to resource to be retained. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7811",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7811",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipUserObject_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphReleaseUserObject (  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1 )",
      "hipLine": "hipError_t hipGraphReleaseUserObject (hipGraph_t graph, hipUserObject_t object, unsigned int count)",
      "graft": "// cudaError_t cudaGraphReleaseUserObject (  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1 ) using hipError_t hipGraphReleaseUserObject (hipGraph_t graph, hipUserObject_t object, unsigned int count)\nextern \"C\" "
    },
    "cudaGraphRemoveDependencies": {
      "cuda": "cudaGraphRemoveDependencies",
      "hip": "hipGraphRemoveDependencies",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphRemoveDependencies",
        "args": "  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies ",
        "types": [
          "cudaGraph_t",
          "const",
          "size_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga3a97f18f0c27e7cd58b404532e940dc6",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphRemoveDependencies"
        ],
        "argsstring": [
          "(hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)"
        ],
        "name": [
          "hipGraphRemoveDependencies"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "from"
            ]
          },
          {
            "type": [
              {
                "_": "const  *",
                "ref": [
                  {
                    "_": "hipGraphNode_t",
                    "$": {
                      "refid": "group___global_defs_1gae127ef09c4eec55642394658ec3433ec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "to"
            ]
          },
          {
            "type": [
              "size_t"
            ],
            "declname": [
              "numDependencies"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Removes dependency edges from a graph. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of the graph to remove dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "from",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Array of nodes that provide the dependencies. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "to",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- Array of dependent nodes. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "numDependencies",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- the number of dependencies to remove. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "6792",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "6792",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipGraphNode_t",
          "size_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphRemoveDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies )",
      "hipLine": "hipError_t hipGraphRemoveDependencies (hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)",
      "graft": "// cudaError_t cudaGraphRemoveDependencies (  cudaGraph_t graph, const cudaGraphNode_t* from, const cudaGraphNode_t* to, size_t numDependencies ) using hipError_t hipGraphRemoveDependencies (hipGraph_t graph, const hipGraphNode_t *from, const hipGraphNode_t *to, size_t numDependencies)\nextern \"C\" "
    },
    "cudaGraphRetainUserObject": {
      "cuda": "cudaGraphRetainUserObject",
      "hip": "hipGraphRetainUserObject",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphRetainUserObject",
        "args": "  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1, unsigned int  flags = 0 ",
        "types": [
          "cudaGraph_t",
          "cudaUserObject_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1gae158b791c4bb11d2389fc8876aea4a8f",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphRetainUserObject"
        ],
        "argsstring": [
          "(hipGraph_t graph, hipUserObject_t object, unsigned int count, unsigned int flags)"
        ],
        "name": [
          "hipGraphRetainUserObject"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraph_t",
                    "$": {
                      "refid": "group___global_defs_1ga76cd3d33523dd0544c9031fcccc95eec",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graph"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipUserObject_t",
                    "$": {
                      "refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "object"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "count"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Retain user object for graphs. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graph",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to graph to retain the user object for. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "object",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instace of userobj. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- reference to resource to be retained. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- flags passed to API. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7798",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7798",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraph_t",
          "hipUserObject_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphRetainUserObject (  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1, unsigned int  flags = 0 )",
      "hipLine": "hipError_t hipGraphRetainUserObject (hipGraph_t graph, hipUserObject_t object, unsigned int count, unsigned int flags)",
      "graft": "// cudaError_t cudaGraphRetainUserObject (  cudaGraph_t graph, cudaUserObject_t object, unsigned int  count = 1, unsigned int  flags = 0 ) using hipError_t hipGraphRetainUserObject (hipGraph_t graph, hipUserObject_t object, unsigned int count, unsigned int flags)\nextern \"C\" "
    },
    "cudaGraphUpload": {
      "cuda": "cudaGraphUpload",
      "hip": "hipGraphUpload",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaGraphUpload",
        "args": "  cudaGraphExec_t graphExec, cudaStream_t stream ",
        "types": [
          "cudaGraphExec_t",
          "cudaStream_t",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga6626b6ab9daa6358b0c2067272c449ff",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipGraphUpload"
        ],
        "argsstring": [
          "(hipGraphExec_t graphExec, hipStream_t stream)"
        ],
        "name": [
          "hipGraphUpload"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipGraphExec_t",
                    "$": {
                      "refid": "group___global_defs_1gac6cdb648ca4cdd1f61d82c0c0644a065",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "graphExec"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipStream_t",
                    "$": {
                      "refid": "group___global_defs_1ga0fc4326b345ac109cb72b90a22a1cb29",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "stream"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "uploads an executable graph in a stream "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "graphExec",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of executable graph to launch. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "stream",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- instance of stream in which to launch executable graph. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ", ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7013",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7013",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipGraphExec_t",
          "hipStream_t",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaGraphUpload (  cudaGraphExec_t graphExec, cudaStream_t stream )",
      "hipLine": "hipError_t hipGraphUpload (hipGraphExec_t graphExec, hipStream_t stream)",
      "graft": "// cudaError_t cudaGraphUpload (  cudaGraphExec_t graphExec, cudaStream_t stream ) using hipError_t hipGraphUpload (hipGraphExec_t graphExec, hipStream_t stream)\nextern \"C\" "
    },
    "cudaUserObjectCreate": {
      "cuda": "cudaUserObjectCreate",
      "hip": "hipUserObjectCreate",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaUserObjectCreate",
        "args": "  cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int  initialRefcount, unsigned int  flags ",
        "types": [
          "cudaUserObject_tundefined",
          "voidundefined",
          "cudaHostFn_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga0c464e200034254c80cdfb9277a55cb5",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipUserObjectCreate"
        ],
        "argsstring": [
          "(hipUserObject_t *object_out, void *ptr, hipHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)"
        ],
        "name": [
          "hipUserObjectCreate"
        ],
        "param": [
          {
            "type": [
              {
                "_": " *",
                "ref": [
                  {
                    "_": "hipUserObject_t",
                    "$": {
                      "refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "object_out"
            ]
          },
          {
            "type": [
              "void *"
            ],
            "declname": [
              "ptr"
            ]
          },
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipHostFn_t",
                    "$": {
                      "refid": "group___global_defs_1ga6b1ea90b2fea2d4c62eb351e1ed44f93",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "destroy"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "initialRefcount"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "flags"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Create an instance of userObject to manage lifetime of a resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "object_out",
                                "$": {
                                  "direction": "out"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instace of userobj. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "ptr",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to pass to destroy function. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "destroy",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- destroy callback to remove resource. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "initialRefcount",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- reference to resource. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "flags",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- flags passed to API. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7762",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7762",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipUserObject_t",
          "void undefined",
          "hipHostFn_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaUserObjectCreate (  cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int  initialRefcount, unsigned int  flags )",
      "hipLine": "hipError_t hipUserObjectCreate (hipUserObject_t *object_out, void *ptr, hipHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)",
      "graft": "// cudaError_t cudaUserObjectCreate (  cudaUserObject_t* object_out, void* ptr, cudaHostFn_t destroy, unsigned int  initialRefcount, unsigned int  flags ) using hipError_t hipUserObjectCreate (hipUserObject_t *object_out, void *ptr, hipHostFn_t destroy, unsigned int initialRefcount, unsigned int flags)\nextern \"C\" "
    },
    "cudaUserObjectRelease": {
      "cuda": "cudaUserObjectRelease",
      "hip": "hipUserObjectRelease",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaUserObjectRelease",
        "args": "  cudaUserObject_t object, unsigned int  count = 1 ",
        "types": [
          "cudaUserObject_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga6b15f4e7a77f9dbda0d4e3a3febedff5",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipUserObjectRelease"
        ],
        "argsstring": [
          "(hipUserObject_t object, unsigned int count)"
        ],
        "name": [
          "hipUserObjectRelease"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipUserObject_t",
                    "$": {
                      "refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "object"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Release number of references to resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "object",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instace of userobj. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- reference to resource to be retained. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7774",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7774",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipUserObject_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaUserObjectRelease (  cudaUserObject_t object, unsigned int  count = 1 )",
      "hipLine": "hipError_t hipUserObjectRelease (hipUserObject_t object, unsigned int count)",
      "graft": "// cudaError_t cudaUserObjectRelease (  cudaUserObject_t object, unsigned int  count = 1 ) using hipError_t hipUserObjectRelease (hipUserObject_t object, unsigned int count)\nextern \"C\" "
    },
    "cudaUserObjectRetain": {
      "cuda": "cudaUserObjectRetain",
      "hip": "hipUserObjectRetain",
      "cudaFun": {
        "keyword": "__host__",
        "return": "cudaError_t",
        "name": "cudaUserObjectRetain",
        "args": "  cudaUserObject_t object, unsigned int  count = 1 ",
        "types": [
          "cudaUserObject_t",
          "unsigned",
          "cudaError_t"
        ]
      },
      "hipFun": {
        "$": {
          "kind": "function",
          "id": "group___graph_1ga87b191d080e9b6c9d1ec1bc7990e405d",
          "prot": "public",
          "static": "no",
          "const": "no",
          "explicit": "no",
          "inline": "no",
          "virt": "non-virtual"
        },
        "type": [
          {
            "ref": [
              {
                "_": "hipError_t",
                "$": {
                  "refid": "group___global_defs_1ga6742b54e2b83c1a5d6861ede4825aafe",
                  "kindref": "member"
                }
              }
            ]
          }
        ],
        "definition": [
          "hipError_t hipUserObjectRetain"
        ],
        "argsstring": [
          "(hipUserObject_t object, unsigned int count)"
        ],
        "name": [
          "hipUserObjectRetain"
        ],
        "param": [
          {
            "type": [
              {
                "ref": [
                  {
                    "_": "hipUserObject_t",
                    "$": {
                      "refid": "group___global_defs_1gab5b072cf29fa8e0a61cbad91e3798565",
                      "kindref": "member"
                    }
                  }
                ]
              }
            ],
            "declname": [
              "object"
            ]
          },
          {
            "type": [
              "unsigned int"
            ],
            "declname": [
              "count"
            ]
          }
        ],
        "briefdescription": [
          {
            "para": [
              "Retain number of references to resource. "
            ]
          }
        ],
        "detaileddescription": [
          {
            "para": [
              {
                "parameterlist": [
                  {
                    "$": {
                      "kind": "param"
                    },
                    "parameteritem": [
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "object",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- pointer to instace of userobj. "
                            ]
                          }
                        ]
                      },
                      {
                        "parameternamelist": [
                          {
                            "parametername": [
                              {
                                "_": "count",
                                "$": {
                                  "direction": "in"
                                }
                              }
                            ]
                          }
                        ],
                        "parameterdescription": [
                          {
                            "para": [
                              "- reference to resource to be retained. "
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ],
                "simplesect": [
                  {
                    "$": {
                      "kind": "return"
                    },
                    "para": [
                      {
                        "_": ",  ",
                        "ref": [
                          {
                            "_": "hipSuccess",
                            "$": {
                              "refid": "hip__runtime__api_8h_1ae4a28dbad173b548a3ac2a2092994d6b",
                              "kindref": "member"
                            }
                          },
                          {
                            "_": "hipErrorInvalidValue",
                            "$": {
                              "refid": "hip__runtime__api_8h_1a657deda9809cdddcbfcd336a29894635",
                              "kindref": "member"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "$": {
                      "kind": "warning"
                    },
                    "para": [
                      ": This API is marked as beta, meaning, while this is feature complete, it is still open to changes and may have outstanding issues. "
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "inbodydescription": [
          "\n        "
        ],
        "location": [
          {
            "$": {
              "file": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "line": "7785",
              "column": "12",
              "declfile": "/Users/riccardo/Sources/GitHub/rocm-cuda/docs/headers/HIP-develop/include/hip/hip_runtime_api.h",
              "declline": "7785",
              "declcolumn": "12"
            }
          }
        ],
        "return": "hipError_t",
        "types": [
          "hipUserObject_t",
          "unsigned int",
          "hipError_t"
        ]
      },
      "cudaLine": "cudaError_t cudaUserObjectRetain (  cudaUserObject_t object, unsigned int  count = 1 )",
      "hipLine": "hipError_t hipUserObjectRetain (hipUserObject_t object, unsigned int count)",
      "graft": "// cudaError_t cudaUserObjectRetain (  cudaUserObject_t object, unsigned int  count = 1 ) using hipError_t hipUserObjectRetain (hipUserObject_t object, unsigned int count)\nextern \"C\" "
    }
  },
  "types": {
    "cudaError_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipError_t",
      "converter": "// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n",
      "converterName": "cudaError_t_TO_hipError_t",
      "graft": "// cudaError_t to hipError_t\nhipError_t cudaError_t_TO_hipError_t(cudaError_t);\n"
    },
    "hipError_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaError_t",
      "converter": "// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n",
      "converterName": "hipError_t_TO_cudaError_t",
      "graft": "// hipError_t to cudaError_t\ncudaError_t hipError_t_TO_cudaError_t(hipError_t);\n"
    },
    "cudaMemPool_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaDeviceP2PAttr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipDeviceP2PAttr",
      "converter": "// cudaDeviceP2PAttr to hipDeviceP2PAttr\nhipDeviceP2PAttr cudaDeviceP2PAttr_TO_hipDeviceP2PAttr(cudaDeviceP2PAttr);\n",
      "converterName": "cudaDeviceP2PAttr_TO_hipDeviceP2PAttr",
      "graft": "// cudaDeviceP2PAttr to hipDeviceP2PAttr\nhipDeviceP2PAttr cudaDeviceP2PAttr_TO_hipDeviceP2PAttr(cudaDeviceP2PAttr);\n"
    },
    "hipDeviceP2PAttr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaDeviceP2PAttr",
      "converter": "// hipDeviceP2PAttr to cudaDeviceP2PAttr\ncudaDeviceP2PAttr hipDeviceP2PAttr_TO_cudaDeviceP2PAttr(hipDeviceP2PAttr);\n",
      "converterName": "hipDeviceP2PAttr_TO_cudaDeviceP2PAttr",
      "graft": "// hipDeviceP2PAttr to cudaDeviceP2PAttr\ncudaDeviceP2PAttr hipDeviceP2PAttr_TO_cudaDeviceP2PAttr(hipDeviceP2PAttr);\n"
    },
    "cudaFuncCache": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipFuncCache_t",
      "converter": "// cudaFuncCache to hipFuncCache_t\nhipFuncCache_t cudaFuncCache_TO_hipFuncCache_t(cudaFuncCache);\n",
      "converterName": "cudaFuncCache_TO_hipFuncCache_t",
      "graft": "// cudaFuncCache to hipFuncCache_t\nhipFuncCache_t cudaFuncCache_TO_hipFuncCache_t(cudaFuncCache);\n"
    },
    "hipFuncCache_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaFuncCache",
      "converter": "// hipFuncCache_t to cudaFuncCache\ncudaFuncCache hipFuncCache_t_TO_cudaFuncCache(hipFuncCache_t);\n",
      "converterName": "hipFuncCache_t_TO_cudaFuncCache",
      "graft": "// hipFuncCache_t to cudaFuncCache\ncudaFuncCache hipFuncCache_t_TO_cudaFuncCache(hipFuncCache_t);\n"
    },
    "cudaLimit": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipLimit_t",
      "converter": "// cudaLimit to hipLimit_t\nhipLimit_t cudaLimit_TO_hipLimit_t(cudaLimit);\n",
      "converterName": "cudaLimit_TO_hipLimit_t",
      "graft": "// cudaLimit to hipLimit_t\nhipLimit_t cudaLimit_TO_hipLimit_t(cudaLimit);\n"
    },
    "hipLimit_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaLimit",
      "converter": "// hipLimit_t to cudaLimit\ncudaLimit hipLimit_t_TO_cudaLimit(hipLimit_t);\n",
      "converterName": "hipLimit_t_TO_cudaLimit",
      "graft": "// hipLimit_t to cudaLimit\ncudaLimit hipLimit_t_TO_cudaLimit(hipLimit_t);\n"
    },
    "cudaMemPool_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemPool_t",
      "converter": "// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n",
      "converterName": "cudaMemPool_t_TO_hipMemPool_t",
      "graft": "// cudaMemPool_t to hipMemPool_t\nhipMemPool_t cudaMemPool_t_TO_hipMemPool_t(cudaMemPool_t);\n"
    },
    "hipMemPool_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemPool_t",
      "converter": "// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n",
      "converterName": "hipMemPool_t_TO_cudaMemPool_t",
      "graft": "// hipMemPool_t to cudaMemPool_t\ncudaMemPool_t hipMemPool_t_TO_cudaMemPool_t(hipMemPool_t);\n"
    },
    "cudaSharedMemConfig": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipSharedMemConfig",
      "converter": "// cudaSharedMemConfig to hipSharedMemConfig\nhipSharedMemConfig cudaSharedMemConfig_TO_hipSharedMemConfig(cudaSharedMemConfig);\n",
      "converterName": "cudaSharedMemConfig_TO_hipSharedMemConfig",
      "graft": "// cudaSharedMemConfig to hipSharedMemConfig\nhipSharedMemConfig cudaSharedMemConfig_TO_hipSharedMemConfig(cudaSharedMemConfig);\n"
    },
    "hipSharedMemConfig": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaSharedMemConfig",
      "converter": "// hipSharedMemConfig to cudaSharedMemConfig\ncudaSharedMemConfig hipSharedMemConfig_TO_cudaSharedMemConfig(hipSharedMemConfig);\n",
      "converterName": "hipSharedMemConfig_TO_cudaSharedMemConfig",
      "graft": "// hipSharedMemConfig to cudaSharedMemConfig\ncudaSharedMemConfig hipSharedMemConfig_TO_cudaSharedMemConfig(hipSharedMemConfig);\n"
    },
    "cudaDevicePropundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaIpcEventHandle_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaEvent_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipEvent_t",
      "converter": "// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n",
      "converterName": "cudaEvent_t_TO_hipEvent_t",
      "graft": "// cudaEvent_t to hipEvent_t\nhipEvent_t cudaEvent_t_TO_hipEvent_t(cudaEvent_t);\n"
    },
    "hipEvent_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaEvent_t",
      "converter": "// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n",
      "converterName": "hipEvent_t_TO_cudaEvent_t",
      "graft": "// hipEvent_t to cudaEvent_t\ncudaEvent_t hipEvent_t_TO_cudaEvent_t(hipEvent_t);\n"
    },
    "cudaIpcMemHandle_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaEvent_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaIpcEventHandle_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipIpcEventHandle_t",
      "converter": "// cudaIpcEventHandle_t to hipIpcEventHandle_t\nhipIpcEventHandle_t cudaIpcEventHandle_t_TO_hipIpcEventHandle_t(cudaIpcEventHandle_t);\n",
      "converterName": "cudaIpcEventHandle_t_TO_hipIpcEventHandle_t",
      "graft": "// cudaIpcEventHandle_t to hipIpcEventHandle_t\nhipIpcEventHandle_t cudaIpcEventHandle_t_TO_hipIpcEventHandle_t(cudaIpcEventHandle_t);\n"
    },
    "hipIpcEventHandle_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaIpcEventHandle_t",
      "converter": "// hipIpcEventHandle_t to cudaIpcEventHandle_t\ncudaIpcEventHandle_t hipIpcEventHandle_t_TO_cudaIpcEventHandle_t(hipIpcEventHandle_t);\n",
      "converterName": "hipIpcEventHandle_t_TO_cudaIpcEventHandle_t",
      "graft": "// hipIpcEventHandle_t to cudaIpcEventHandle_t\ncudaIpcEventHandle_t hipIpcEventHandle_t_TO_cudaIpcEventHandle_t(hipIpcEventHandle_t);\n"
    },
    "cudaIpcMemHandle_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipIpcMemHandle_t",
      "converter": "// cudaIpcMemHandle_t to hipIpcMemHandle_t\nhipIpcMemHandle_t cudaIpcMemHandle_t_TO_hipIpcMemHandle_t(cudaIpcMemHandle_t);\n",
      "converterName": "cudaIpcMemHandle_t_TO_hipIpcMemHandle_t",
      "graft": "// cudaIpcMemHandle_t to hipIpcMemHandle_t\nhipIpcMemHandle_t cudaIpcMemHandle_t_TO_hipIpcMemHandle_t(cudaIpcMemHandle_t);\n"
    },
    "hipIpcMemHandle_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaIpcMemHandle_t",
      "converter": "// hipIpcMemHandle_t to cudaIpcMemHandle_t\ncudaIpcMemHandle_t hipIpcMemHandle_t_TO_cudaIpcMemHandle_t(hipIpcMemHandle_t);\n",
      "converterName": "hipIpcMemHandle_t_TO_cudaIpcMemHandle_t",
      "graft": "// hipIpcMemHandle_t to cudaIpcMemHandle_t\ncudaIpcMemHandle_t hipIpcMemHandle_t_TO_cudaIpcMemHandle_t(hipIpcMemHandle_t);\n"
    },
    "cudaStream_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipStream_t",
      "converter": "// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n",
      "converterName": "cudaStream_t_TO_hipStream_t",
      "graft": "// cudaStream_t to hipStream_t\nhipStream_t cudaStream_t_TO_hipStream_t(cudaStream_t);\n"
    },
    "hipStream_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaStream_t",
      "converter": "// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n",
      "converterName": "hipStream_t_TO_cudaStream_t",
      "graft": "// hipStream_t to cudaStream_t\ncudaStream_t hipStream_t_TO_cudaStream_t(hipStream_t);\n"
    },
    "cudaStreamCallback_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipStreamCallback_t",
      "converter": "// cudaStreamCallback_t to hipStreamCallback_t\nhipStreamCallback_t cudaStreamCallback_t_TO_hipStreamCallback_t(cudaStreamCallback_t);\n",
      "converterName": "cudaStreamCallback_t_TO_hipStreamCallback_t",
      "graft": "// cudaStreamCallback_t to hipStreamCallback_t\nhipStreamCallback_t cudaStreamCallback_t_TO_hipStreamCallback_t(cudaStreamCallback_t);\n"
    },
    "hipStreamCallback_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaStreamCallback_t",
      "converter": "// hipStreamCallback_t to cudaStreamCallback_t\ncudaStreamCallback_t hipStreamCallback_t_TO_cudaStreamCallback_t(hipStreamCallback_t);\n",
      "converterName": "hipStreamCallback_t_TO_cudaStreamCallback_t",
      "graft": "// hipStreamCallback_t to cudaStreamCallback_t\ncudaStreamCallback_t hipStreamCallback_t_TO_cudaStreamCallback_t(hipStreamCallback_t);\n"
    },
    "cudaStreamCaptureMode": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipStreamCaptureMode",
      "converter": "// cudaStreamCaptureMode to hipStreamCaptureMode\nhipStreamCaptureMode cudaStreamCaptureMode_TO_hipStreamCaptureMode(cudaStreamCaptureMode);\n",
      "converterName": "cudaStreamCaptureMode_TO_hipStreamCaptureMode",
      "graft": "// cudaStreamCaptureMode to hipStreamCaptureMode\nhipStreamCaptureMode cudaStreamCaptureMode_TO_hipStreamCaptureMode(cudaStreamCaptureMode);\n"
    },
    "hipStreamCaptureMode": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaStreamCaptureMode",
      "converter": "// hipStreamCaptureMode to cudaStreamCaptureMode\ncudaStreamCaptureMode hipStreamCaptureMode_TO_cudaStreamCaptureMode(hipStreamCaptureMode);\n",
      "converterName": "hipStreamCaptureMode_TO_cudaStreamCaptureMode",
      "graft": "// hipStreamCaptureMode to cudaStreamCaptureMode\ncudaStreamCaptureMode hipStreamCaptureMode_TO_cudaStreamCaptureMode(hipStreamCaptureMode);\n"
    },
    "cudaStream_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraph_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaStreamCaptureStatus": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipStreamCaptureStatus",
      "converter": "// cudaStreamCaptureStatus to hipStreamCaptureStatus\nhipStreamCaptureStatus cudaStreamCaptureStatus_TO_hipStreamCaptureStatus(cudaStreamCaptureStatus);\n",
      "converterName": "cudaStreamCaptureStatus_TO_hipStreamCaptureStatus",
      "graft": "// cudaStreamCaptureStatus to hipStreamCaptureStatus\nhipStreamCaptureStatus cudaStreamCaptureStatus_TO_hipStreamCaptureStatus(cudaStreamCaptureStatus);\n"
    },
    "hipStreamCaptureStatus": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaStreamCaptureStatus",
      "converter": "// hipStreamCaptureStatus to cudaStreamCaptureStatus\ncudaStreamCaptureStatus hipStreamCaptureStatus_TO_cudaStreamCaptureStatus(hipStreamCaptureStatus);\n",
      "converterName": "hipStreamCaptureStatus_TO_cudaStreamCaptureStatus",
      "graft": "// hipStreamCaptureStatus to cudaStreamCaptureStatus\ncudaStreamCaptureStatus hipStreamCaptureStatus_TO_cudaStreamCaptureStatus(hipStreamCaptureStatus);\n"
    },
    "cudaExternalMemory_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalMemory_t",
      "converter": "// cudaExternalMemory_t to hipExternalMemory_t\nhipExternalMemory_t cudaExternalMemory_t_TO_hipExternalMemory_t(cudaExternalMemory_t);\n",
      "converterName": "cudaExternalMemory_t_TO_hipExternalMemory_t",
      "graft": "// cudaExternalMemory_t to hipExternalMemory_t\nhipExternalMemory_t cudaExternalMemory_t_TO_hipExternalMemory_t(cudaExternalMemory_t);\n"
    },
    "hipExternalMemory_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalMemory_t",
      "converter": "// hipExternalMemory_t to cudaExternalMemory_t\ncudaExternalMemory_t hipExternalMemory_t_TO_cudaExternalMemory_t(hipExternalMemory_t);\n",
      "converterName": "hipExternalMemory_t_TO_cudaExternalMemory_t",
      "graft": "// hipExternalMemory_t to cudaExternalMemory_t\ncudaExternalMemory_t hipExternalMemory_t_TO_cudaExternalMemory_t(hipExternalMemory_t);\n"
    },
    "cudaExternalSemaphore_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphore_t",
      "converter": "// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n",
      "converterName": "cudaExternalSemaphore_t_TO_hipExternalSemaphore_t",
      "graft": "// cudaExternalSemaphore_t to hipExternalSemaphore_t\nhipExternalSemaphore_t cudaExternalSemaphore_t_TO_hipExternalSemaphore_t(cudaExternalSemaphore_t);\n"
    },
    "hipExternalSemaphore_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphore_t",
      "converter": "// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n",
      "converterName": "hipExternalSemaphore_t_TO_cudaExternalSemaphore_t",
      "graft": "// hipExternalSemaphore_t to cudaExternalSemaphore_t\ncudaExternalSemaphore_t hipExternalSemaphore_t_TO_cudaExternalSemaphore_t(hipExternalSemaphore_t);\n"
    },
    "cudaExternalMemory_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaExternalSemaphore_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaFuncAttributesundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaFuncAttribute": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipFuncAttribute",
      "converter": "// cudaFuncAttribute to hipFuncAttribute\nhipFuncAttribute cudaFuncAttribute_TO_hipFuncAttribute(cudaFuncAttribute);\n",
      "converterName": "cudaFuncAttribute_TO_hipFuncAttribute",
      "graft": "// cudaFuncAttribute to hipFuncAttribute\nhipFuncAttribute cudaFuncAttribute_TO_hipFuncAttribute(cudaFuncAttribute);\n"
    },
    "hipFuncAttribute": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaFuncAttribute",
      "converter": "// hipFuncAttribute to cudaFuncAttribute\ncudaFuncAttribute hipFuncAttribute_TO_cudaFuncAttribute(hipFuncAttribute);\n",
      "converterName": "hipFuncAttribute_TO_cudaFuncAttribute",
      "graft": "// hipFuncAttribute to cudaFuncAttribute\ncudaFuncAttribute hipFuncAttribute_TO_cudaFuncAttribute(hipFuncAttribute);\n"
    },
    "cudaLaunchParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaHostFn_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipHostFn_t",
      "converter": "// cudaHostFn_t to hipHostFn_t\nhipHostFn_t cudaHostFn_t_TO_hipHostFn_t(cudaHostFn_t);\n",
      "converterName": "cudaHostFn_t_TO_hipHostFn_t",
      "graft": "// cudaHostFn_t to hipHostFn_t\nhipHostFn_t cudaHostFn_t_TO_hipHostFn_t(cudaHostFn_t);\n"
    },
    "hipHostFn_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaHostFn_t",
      "converter": "// hipHostFn_t to cudaHostFn_t\ncudaHostFn_t hipHostFn_t_TO_cudaHostFn_t(hipHostFn_t);\n",
      "converterName": "hipHostFn_t_TO_cudaHostFn_t",
      "graft": "// hipHostFn_t to cudaHostFn_t\ncudaHostFn_t hipHostFn_t_TO_cudaHostFn_t(hipHostFn_t);\n"
    },
    "cudaChannelFormatDescundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaExtentundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaArray_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipArray_t",
      "converter": "// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n",
      "converterName": "cudaArray_t_TO_hipArray_t",
      "graft": "// cudaArray_t to hipArray_t\nhipArray_t cudaArray_t_TO_hipArray_t(cudaArray_t);\n"
    },
    "hipArray_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaArray_t",
      "converter": "// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n",
      "converterName": "hipArray_t_TO_cudaArray_t",
      "graft": "// hipArray_t to cudaArray_t\ncudaArray_t hipArray_t_TO_cudaArray_t(hipArray_t);\n"
    },
    "cudaMipmappedArray_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMipmappedArray_t",
      "converter": "// cudaMipmappedArray_t to hipMipmappedArray_t\nhipMipmappedArray_t cudaMipmappedArray_t_TO_hipMipmappedArray_t(cudaMipmappedArray_t);\n",
      "converterName": "cudaMipmappedArray_t_TO_hipMipmappedArray_t",
      "graft": "// cudaMipmappedArray_t to hipMipmappedArray_t\nhipMipmappedArray_t cudaMipmappedArray_t_TO_hipMipmappedArray_t(cudaMipmappedArray_t);\n"
    },
    "hipMipmappedArray_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMipmappedArray_t",
      "converter": "// hipMipmappedArray_t to cudaMipmappedArray_t\ncudaMipmappedArray_t hipMipmappedArray_t_TO_cudaMipmappedArray_t(hipMipmappedArray_t);\n",
      "converterName": "hipMipmappedArray_t_TO_cudaMipmappedArray_t",
      "graft": "// hipMipmappedArray_t to cudaMipmappedArray_t\ncudaMipmappedArray_t hipMipmappedArray_t_TO_cudaMipmappedArray_t(hipMipmappedArray_t);\n"
    },
    "cudaArray_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMipmappedArray_const_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMipmappedArray_const_t",
      "converter": "// cudaMipmappedArray_const_t to hipMipmappedArray_const_t\nhipMipmappedArray_const_t cudaMipmappedArray_const_t_TO_hipMipmappedArray_const_t(cudaMipmappedArray_const_t);\n",
      "converterName": "cudaMipmappedArray_const_t_TO_hipMipmappedArray_const_t",
      "graft": "// cudaMipmappedArray_const_t to hipMipmappedArray_const_t\nhipMipmappedArray_const_t cudaMipmappedArray_const_t_TO_hipMipmappedArray_const_t(cudaMipmappedArray_const_t);\n"
    },
    "hipMipmappedArray_const_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMipmappedArray_const_t",
      "converter": "// hipMipmappedArray_const_t to cudaMipmappedArray_const_t\ncudaMipmappedArray_const_t hipMipmappedArray_const_t_TO_cudaMipmappedArray_const_t(hipMipmappedArray_const_t);\n",
      "converterName": "hipMipmappedArray_const_t_TO_cudaMipmappedArray_const_t",
      "graft": "// hipMipmappedArray_const_t to cudaMipmappedArray_const_t\ncudaMipmappedArray_const_t hipMipmappedArray_const_t_TO_cudaMipmappedArray_const_t(hipMipmappedArray_const_t);\n"
    },
    "cudaPitchedPtrundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaExtent": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExtent",
      "converter": "// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n",
      "converterName": "cudaExtent_TO_hipExtent",
      "graft": "// cudaExtent to hipExtent\nhipExtent cudaExtent_TO_hipExtent(cudaExtent);\n"
    },
    "hipExtent": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExtent",
      "converter": "// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n",
      "converterName": "hipExtent_TO_cudaExtent",
      "graft": "// hipExtent to cudaExtent\ncudaExtent hipExtent_TO_cudaExtent(hipExtent);\n"
    },
    "cudaMipmappedArray_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMemoryAdvise": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemoryAdvise",
      "converter": "// cudaMemoryAdvise to hipMemoryAdvise\nhipMemoryAdvise cudaMemoryAdvise_TO_hipMemoryAdvise(cudaMemoryAdvise);\n",
      "converterName": "cudaMemoryAdvise_TO_hipMemoryAdvise",
      "graft": "// cudaMemoryAdvise to hipMemoryAdvise\nhipMemoryAdvise cudaMemoryAdvise_TO_hipMemoryAdvise(cudaMemoryAdvise);\n"
    },
    "hipMemoryAdvise": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemoryAdvise",
      "converter": "// hipMemoryAdvise to cudaMemoryAdvise\ncudaMemoryAdvise hipMemoryAdvise_TO_cudaMemoryAdvise(hipMemoryAdvise);\n",
      "converterName": "hipMemoryAdvise_TO_cudaMemoryAdvise",
      "graft": "// hipMemoryAdvise to cudaMemoryAdvise\ncudaMemoryAdvise hipMemoryAdvise_TO_cudaMemoryAdvise(hipMemoryAdvise);\n"
    },
    "cudaMemLocation": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemLocation",
      "converter": "// cudaMemLocation to hipMemLocation\nhipMemLocation cudaMemLocation_TO_hipMemLocation(cudaMemLocation);\n",
      "converterName": "cudaMemLocation_TO_hipMemLocation",
      "graft": "// cudaMemLocation to hipMemLocation\nhipMemLocation cudaMemLocation_TO_hipMemLocation(cudaMemLocation);\n"
    },
    "hipMemLocation": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemLocation",
      "converter": "// hipMemLocation to cudaMemLocation\ncudaMemLocation hipMemLocation_TO_cudaMemLocation(hipMemLocation);\n",
      "converterName": "hipMemLocation_TO_cudaMemLocation",
      "graft": "// hipMemLocation to cudaMemLocation\ncudaMemLocation hipMemLocation_TO_cudaMemLocation(hipMemLocation);\n"
    },
    "cudaMemRangeAttribute": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemRangeAttribute",
      "converter": "// cudaMemRangeAttribute to hipMemRangeAttribute\nhipMemRangeAttribute cudaMemRangeAttribute_TO_hipMemRangeAttribute(cudaMemRangeAttribute);\n",
      "converterName": "cudaMemRangeAttribute_TO_hipMemRangeAttribute",
      "graft": "// cudaMemRangeAttribute to hipMemRangeAttribute\nhipMemRangeAttribute cudaMemRangeAttribute_TO_hipMemRangeAttribute(cudaMemRangeAttribute);\n"
    },
    "hipMemRangeAttribute": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemRangeAttribute",
      "converter": "// hipMemRangeAttribute to cudaMemRangeAttribute\ncudaMemRangeAttribute hipMemRangeAttribute_TO_cudaMemRangeAttribute(hipMemRangeAttribute);\n",
      "converterName": "hipMemRangeAttribute_TO_cudaMemRangeAttribute",
      "graft": "// hipMemRangeAttribute to cudaMemRangeAttribute\ncudaMemRangeAttribute hipMemRangeAttribute_TO_cudaMemRangeAttribute(hipMemRangeAttribute);\n"
    },
    "cudaMemcpyKind": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemcpyKind",
      "converter": "// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n",
      "converterName": "cudaMemcpyKind_TO_hipMemcpyKind",
      "graft": "// cudaMemcpyKind to hipMemcpyKind\nhipMemcpyKind cudaMemcpyKind_TO_hipMemcpyKind(cudaMemcpyKind);\n"
    },
    "hipMemcpyKind": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemcpyKind",
      "converter": "// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n",
      "converterName": "hipMemcpyKind_TO_cudaMemcpyKind",
      "graft": "// hipMemcpyKind to cudaMemcpyKind\ncudaMemcpyKind hipMemcpyKind_TO_cudaMemcpyKind(hipMemcpyKind);\n"
    },
    "cudaArray_const_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipArray_const_t",
      "converter": "// cudaArray_const_t to hipArray_const_t\nhipArray_const_t cudaArray_const_t_TO_hipArray_const_t(cudaArray_const_t);\n",
      "converterName": "cudaArray_const_t_TO_hipArray_const_t",
      "graft": "// cudaArray_const_t to hipArray_const_t\nhipArray_const_t cudaArray_const_t_TO_hipArray_const_t(cudaArray_const_t);\n"
    },
    "hipArray_const_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaArray_const_t",
      "converter": "// hipArray_const_t to cudaArray_const_t\ncudaArray_const_t hipArray_const_t_TO_cudaArray_const_t(hipArray_const_t);\n",
      "converterName": "hipArray_const_t_TO_cudaArray_const_t",
      "graft": "// hipArray_const_t to cudaArray_const_t\ncudaArray_const_t hipArray_const_t_TO_cudaArray_const_t(hipArray_const_t);\n"
    },
    "cudaPitchedPtr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipPitchedPtr",
      "converter": "// cudaPitchedPtr to hipPitchedPtr\nhipPitchedPtr cudaPitchedPtr_TO_hipPitchedPtr(cudaPitchedPtr);\n",
      "converterName": "cudaPitchedPtr_TO_hipPitchedPtr",
      "graft": "// cudaPitchedPtr to hipPitchedPtr\nhipPitchedPtr cudaPitchedPtr_TO_hipPitchedPtr(cudaPitchedPtr);\n"
    },
    "hipPitchedPtr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaPitchedPtr",
      "converter": "// hipPitchedPtr to cudaPitchedPtr\ncudaPitchedPtr hipPitchedPtr_TO_cudaPitchedPtr(hipPitchedPtr);\n",
      "converterName": "hipPitchedPtr_TO_cudaPitchedPtr",
      "graft": "// hipPitchedPtr to cudaPitchedPtr\ncudaPitchedPtr hipPitchedPtr_TO_cudaPitchedPtr(hipPitchedPtr);\n"
    },
    "cudaMemPoolPtrExportDataundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMemAllocationHandleType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemAllocationHandleType",
      "converter": "// cudaMemAllocationHandleType to hipMemAllocationHandleType\nhipMemAllocationHandleType cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(cudaMemAllocationHandleType);\n",
      "converterName": "cudaMemAllocationHandleType_TO_hipMemAllocationHandleType",
      "graft": "// cudaMemAllocationHandleType to hipMemAllocationHandleType\nhipMemAllocationHandleType cudaMemAllocationHandleType_TO_hipMemAllocationHandleType(cudaMemAllocationHandleType);\n"
    },
    "hipMemAllocationHandleType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemAllocationHandleType",
      "converter": "// hipMemAllocationHandleType to cudaMemAllocationHandleType\ncudaMemAllocationHandleType hipMemAllocationHandleType_TO_cudaMemAllocationHandleType(hipMemAllocationHandleType);\n",
      "converterName": "hipMemAllocationHandleType_TO_cudaMemAllocationHandleType",
      "graft": "// hipMemAllocationHandleType to cudaMemAllocationHandleType\ncudaMemAllocationHandleType hipMemAllocationHandleType_TO_cudaMemAllocationHandleType(hipMemAllocationHandleType);\n"
    },
    "cudaMemAccessFlags": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemAccessFlags",
      "converter": "// cudaMemAccessFlags to hipMemAccessFlags\nhipMemAccessFlags cudaMemAccessFlags_TO_hipMemAccessFlags(cudaMemAccessFlags);\n",
      "converterName": "cudaMemAccessFlags_TO_hipMemAccessFlags",
      "graft": "// cudaMemAccessFlags to hipMemAccessFlags\nhipMemAccessFlags cudaMemAccessFlags_TO_hipMemAccessFlags(cudaMemAccessFlags);\n"
    },
    "hipMemAccessFlags": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemAccessFlags",
      "converter": "// hipMemAccessFlags to cudaMemAccessFlags\ncudaMemAccessFlags hipMemAccessFlags_TO_cudaMemAccessFlags(hipMemAccessFlags);\n",
      "converterName": "hipMemAccessFlags_TO_cudaMemAccessFlags",
      "graft": "// hipMemAccessFlags to cudaMemAccessFlags\ncudaMemAccessFlags hipMemAccessFlags_TO_cudaMemAccessFlags(hipMemAccessFlags);\n"
    },
    "cudaMemLocationundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMemPoolAttr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemPoolAttr",
      "converter": "// cudaMemPoolAttr to hipMemPoolAttr\nhipMemPoolAttr cudaMemPoolAttr_TO_hipMemPoolAttr(cudaMemPoolAttr);\n",
      "converterName": "cudaMemPoolAttr_TO_hipMemPoolAttr",
      "graft": "// cudaMemPoolAttr to hipMemPoolAttr\nhipMemPoolAttr cudaMemPoolAttr_TO_hipMemPoolAttr(cudaMemPoolAttr);\n"
    },
    "hipMemPoolAttr": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemPoolAttr",
      "converter": "// hipMemPoolAttr to cudaMemPoolAttr\ncudaMemPoolAttr hipMemPoolAttr_TO_cudaMemPoolAttr(hipMemPoolAttr);\n",
      "converterName": "hipMemPoolAttr_TO_cudaMemPoolAttr",
      "graft": "// hipMemPoolAttr to cudaMemPoolAttr\ncudaMemPoolAttr hipMemPoolAttr_TO_cudaMemPoolAttr(hipMemPoolAttr);\n"
    },
    "cudaPointerAttributesundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraphicsResource_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraphicsResource_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphicsResource_t",
      "converter": "// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n",
      "converterName": "cudaGraphicsResource_t_TO_hipGraphicsResource_t",
      "graft": "// cudaGraphicsResource_t to hipGraphicsResource_t\nhipGraphicsResource_t cudaGraphicsResource_t_TO_hipGraphicsResource_t(cudaGraphicsResource_t);\n"
    },
    "hipGraphicsResource_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphicsResource_t",
      "converter": "// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n",
      "converterName": "hipGraphicsResource_t_TO_cudaGraphicsResource_t",
      "graft": "// hipGraphicsResource_t to cudaGraphicsResource_t\ncudaGraphicsResource_t hipGraphicsResource_t_TO_cudaGraphicsResource_t(hipGraphicsResource_t);\n"
    },
    "cudaTextureObject_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaTextureObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipTextureObject_t",
      "converter": "// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n",
      "converterName": "cudaTextureObject_t_TO_hipTextureObject_t",
      "graft": "// cudaTextureObject_t to hipTextureObject_t\nhipTextureObject_t cudaTextureObject_t_TO_hipTextureObject_t(cudaTextureObject_t);\n"
    },
    "hipTextureObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaTextureObject_t",
      "converter": "// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n",
      "converterName": "hipTextureObject_t_TO_cudaTextureObject_t",
      "graft": "// hipTextureObject_t to cudaTextureObject_t\ncudaTextureObject_t hipTextureObject_t_TO_cudaTextureObject_t(hipTextureObject_t);\n"
    },
    "cudaResourceDescundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaResourceViewDescundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaTextureDescundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaSurfaceObject_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaSurfaceObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipSurfaceObject_t",
      "converter": "// cudaSurfaceObject_t to hipSurfaceObject_t\nhipSurfaceObject_t cudaSurfaceObject_t_TO_hipSurfaceObject_t(cudaSurfaceObject_t);\n",
      "converterName": "cudaSurfaceObject_t_TO_hipSurfaceObject_t",
      "graft": "// cudaSurfaceObject_t to hipSurfaceObject_t\nhipSurfaceObject_t cudaSurfaceObject_t_TO_hipSurfaceObject_t(cudaSurfaceObject_t);\n"
    },
    "hipSurfaceObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaSurfaceObject_t",
      "converter": "// hipSurfaceObject_t to cudaSurfaceObject_t\ncudaSurfaceObject_t hipSurfaceObject_t_TO_cudaSurfaceObject_t(hipSurfaceObject_t);\n",
      "converterName": "hipSurfaceObject_t_TO_cudaSurfaceObject_t",
      "graft": "// hipSurfaceObject_t to cudaSurfaceObject_t\ncudaSurfaceObject_t hipSurfaceObject_t_TO_cudaSurfaceObject_t(hipSurfaceObject_t);\n"
    },
    "cudaGraphMemAttributeType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphMemAttributeType",
      "converter": "// cudaGraphMemAttributeType to hipGraphMemAttributeType\nhipGraphMemAttributeType cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(cudaGraphMemAttributeType);\n",
      "converterName": "cudaGraphMemAttributeType_TO_hipGraphMemAttributeType",
      "graft": "// cudaGraphMemAttributeType to hipGraphMemAttributeType\nhipGraphMemAttributeType cudaGraphMemAttributeType_TO_hipGraphMemAttributeType(cudaGraphMemAttributeType);\n"
    },
    "hipGraphMemAttributeType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphMemAttributeType",
      "converter": "// hipGraphMemAttributeType to cudaGraphMemAttributeType\ncudaGraphMemAttributeType hipGraphMemAttributeType_TO_cudaGraphMemAttributeType(hipGraphMemAttributeType);\n",
      "converterName": "hipGraphMemAttributeType_TO_cudaGraphMemAttributeType",
      "graft": "// hipGraphMemAttributeType to cudaGraphMemAttributeType\ncudaGraphMemAttributeType hipGraphMemAttributeType_TO_cudaGraphMemAttributeType(hipGraphMemAttributeType);\n"
    },
    "cudaGraphNode_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraph_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraph_t",
      "converter": "// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n",
      "converterName": "cudaGraph_t_TO_hipGraph_t",
      "graft": "// cudaGraph_t to hipGraph_t\nhipGraph_t cudaGraph_t_TO_hipGraph_t(cudaGraph_t);\n"
    },
    "hipGraph_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraph_t",
      "converter": "// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n",
      "converterName": "hipGraph_t_TO_cudaGraph_t",
      "graft": "// hipGraph_t to cudaGraph_t\ncudaGraph_t hipGraph_t_TO_cudaGraph_t(hipGraph_t);\n"
    },
    "cudaMemAllocNodeParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraphNode_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphNode_t",
      "converter": "// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n",
      "converterName": "cudaGraphNode_t_TO_hipGraphNode_t",
      "graft": "// cudaGraphNode_t to hipGraphNode_t\nhipGraphNode_t cudaGraphNode_t_TO_hipGraphNode_t(cudaGraphNode_t);\n"
    },
    "hipGraphNode_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphNode_t",
      "converter": "// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n",
      "converterName": "hipGraphNode_t_TO_cudaGraphNode_t",
      "graft": "// hipGraphNode_t to cudaGraphNode_t\ncudaGraphNode_t hipGraphNode_t_TO_cudaGraphNode_t(hipGraphNode_t);\n"
    },
    "cudaGraphExec_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphExec_t",
      "converter": "// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n",
      "converterName": "cudaGraphExec_t_TO_hipGraphExec_t",
      "graft": "// cudaGraphExec_t to hipGraphExec_t\nhipGraphExec_t cudaGraphExec_t_TO_hipGraphExec_t(cudaGraphExec_t);\n"
    },
    "hipGraphExec_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphExec_t",
      "converter": "// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n",
      "converterName": "hipGraphExec_t_TO_cudaGraphExec_t",
      "graft": "// hipGraphExec_t to cudaGraphExec_t\ncudaGraphExec_t hipGraphExec_t_TO_cudaGraphExec_t(hipGraphExec_t);\n"
    },
    "cudaGraphExecUpdateResultInfoundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaExternalSemaphoreSignalNodeParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaExternalSemaphoreWaitNodeParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaHostNodeParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraphExec_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaKernelNodeAttrID": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipKernelNodeAttrID",
      "converter": "// cudaKernelNodeAttrID to hipKernelNodeAttrID\nhipKernelNodeAttrID cudaKernelNodeAttrID_TO_hipKernelNodeAttrID(cudaKernelNodeAttrID);\n",
      "converterName": "cudaKernelNodeAttrID_TO_hipKernelNodeAttrID",
      "graft": "// cudaKernelNodeAttrID to hipKernelNodeAttrID\nhipKernelNodeAttrID cudaKernelNodeAttrID_TO_hipKernelNodeAttrID(cudaKernelNodeAttrID);\n"
    },
    "hipKernelNodeAttrID": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaKernelNodeAttrID",
      "converter": "// hipKernelNodeAttrID to cudaKernelNodeAttrID\ncudaKernelNodeAttrID hipKernelNodeAttrID_TO_cudaKernelNodeAttrID(hipKernelNodeAttrID);\n",
      "converterName": "hipKernelNodeAttrID_TO_cudaKernelNodeAttrID",
      "graft": "// hipKernelNodeAttrID to cudaKernelNodeAttrID\ncudaKernelNodeAttrID hipKernelNodeAttrID_TO_cudaKernelNodeAttrID(hipKernelNodeAttrID);\n"
    },
    "cudaKernelNodeAttrValueundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaKernelNodeParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMemcpy3DParmsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaMemsetParamsundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "cudaGraphNodeType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphNodeType",
      "converter": "// cudaGraphNodeType to hipGraphNodeType\nhipGraphNodeType cudaGraphNodeType_TO_hipGraphNodeType(cudaGraphNodeType);\n",
      "converterName": "cudaGraphNodeType_TO_hipGraphNodeType",
      "graft": "// cudaGraphNodeType to hipGraphNodeType\nhipGraphNodeType cudaGraphNodeType_TO_hipGraphNodeType(cudaGraphNodeType);\n"
    },
    "hipGraphNodeType": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphNodeType",
      "converter": "// hipGraphNodeType to cudaGraphNodeType\ncudaGraphNodeType hipGraphNodeType_TO_cudaGraphNodeType(hipGraphNodeType);\n",
      "converterName": "hipGraphNodeType_TO_cudaGraphNodeType",
      "graft": "// hipGraphNodeType to cudaGraphNodeType\ncudaGraphNodeType hipGraphNodeType_TO_cudaGraphNodeType(hipGraphNodeType);\n"
    },
    "cudaUserObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipUserObject_t",
      "converter": "// cudaUserObject_t to hipUserObject_t\nhipUserObject_t cudaUserObject_t_TO_hipUserObject_t(cudaUserObject_t);\n",
      "converterName": "cudaUserObject_t_TO_hipUserObject_t",
      "graft": "// cudaUserObject_t to hipUserObject_t\nhipUserObject_t cudaUserObject_t_TO_hipUserObject_t(cudaUserObject_t);\n"
    },
    "hipUserObject_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaUserObject_t",
      "converter": "// hipUserObject_t to cudaUserObject_t\ncudaUserObject_t hipUserObject_t_TO_cudaUserObject_t(hipUserObject_t);\n",
      "converterName": "hipUserObject_t_TO_cudaUserObject_t",
      "graft": "// hipUserObject_t to cudaUserObject_t\ncudaUserObject_t hipUserObject_t_TO_cudaUserObject_t(hipUserObject_t);\n"
    },
    "cudaUserObject_tundefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "hipDeviceProp_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaDeviceProp",
      "converter": "// hipDeviceProp_t to cudaDeviceProp\ncudaDeviceProp hipDeviceProp_t_TO_cudaDeviceProp(hipDeviceProp_t);\n",
      "converterName": "hipDeviceProp_t_TO_cudaDeviceProp",
      "graft": "// hipDeviceProp_t to cudaDeviceProp\ncudaDeviceProp hipDeviceProp_t_TO_cudaDeviceProp(hipDeviceProp_t);\n"
    },
    "cudaDeviceProp": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipDeviceProp_t",
      "converter": "// cudaDeviceProp to hipDeviceProp_t\nhipDeviceProp_t cudaDeviceProp_TO_hipDeviceProp_t(cudaDeviceProp);\n",
      "converterName": "cudaDeviceProp_TO_hipDeviceProp_t",
      "graft": "// cudaDeviceProp to hipDeviceProp_t\nhipDeviceProp_t cudaDeviceProp_TO_hipDeviceProp_t(cudaDeviceProp);\n"
    },
    "hipExternalMemoryBufferDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalMemoryBufferDesc",
      "converter": "// hipExternalMemoryBufferDesc to cudaExternalMemoryBufferDesc\ncudaExternalMemoryBufferDesc hipExternalMemoryBufferDesc_TO_cudaExternalMemoryBufferDesc(hipExternalMemoryBufferDesc);\n",
      "converterName": "hipExternalMemoryBufferDesc_TO_cudaExternalMemoryBufferDesc",
      "graft": "// hipExternalMemoryBufferDesc to cudaExternalMemoryBufferDesc\ncudaExternalMemoryBufferDesc hipExternalMemoryBufferDesc_TO_cudaExternalMemoryBufferDesc(hipExternalMemoryBufferDesc);\n"
    },
    "cudaExternalMemoryBufferDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalMemoryBufferDesc",
      "converter": "// cudaExternalMemoryBufferDesc to hipExternalMemoryBufferDesc\nhipExternalMemoryBufferDesc cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc(cudaExternalMemoryBufferDesc);\n",
      "converterName": "cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc",
      "graft": "// cudaExternalMemoryBufferDesc to hipExternalMemoryBufferDesc\nhipExternalMemoryBufferDesc cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc(cudaExternalMemoryBufferDesc);\n"
    },
    "hipExternalMemoryHandleDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalMemoryHandleDesc",
      "converter": "// hipExternalMemoryHandleDesc to cudaExternalMemoryHandleDesc\ncudaExternalMemoryHandleDesc hipExternalMemoryHandleDesc_TO_cudaExternalMemoryHandleDesc(hipExternalMemoryHandleDesc);\n",
      "converterName": "hipExternalMemoryHandleDesc_TO_cudaExternalMemoryHandleDesc",
      "graft": "// hipExternalMemoryHandleDesc to cudaExternalMemoryHandleDesc\ncudaExternalMemoryHandleDesc hipExternalMemoryHandleDesc_TO_cudaExternalMemoryHandleDesc(hipExternalMemoryHandleDesc);\n"
    },
    "cudaExternalMemoryHandleDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalMemoryHandleDesc",
      "converter": "// cudaExternalMemoryHandleDesc to hipExternalMemoryHandleDesc\nhipExternalMemoryHandleDesc cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc(cudaExternalMemoryHandleDesc);\n",
      "converterName": "cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc",
      "graft": "// cudaExternalMemoryHandleDesc to hipExternalMemoryHandleDesc\nhipExternalMemoryHandleDesc cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc(cudaExternalMemoryHandleDesc);\n"
    },
    "hipExternalSemaphoreHandleDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphoreHandleDesc",
      "converter": "// hipExternalSemaphoreHandleDesc to cudaExternalSemaphoreHandleDesc\ncudaExternalSemaphoreHandleDesc hipExternalSemaphoreHandleDesc_TO_cudaExternalSemaphoreHandleDesc(hipExternalSemaphoreHandleDesc);\n",
      "converterName": "hipExternalSemaphoreHandleDesc_TO_cudaExternalSemaphoreHandleDesc",
      "graft": "// hipExternalSemaphoreHandleDesc to cudaExternalSemaphoreHandleDesc\ncudaExternalSemaphoreHandleDesc hipExternalSemaphoreHandleDesc_TO_cudaExternalSemaphoreHandleDesc(hipExternalSemaphoreHandleDesc);\n"
    },
    "cudaExternalSemaphoreHandleDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphoreHandleDesc",
      "converter": "// cudaExternalSemaphoreHandleDesc to hipExternalSemaphoreHandleDesc\nhipExternalSemaphoreHandleDesc cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc(cudaExternalSemaphoreHandleDesc);\n",
      "converterName": "cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc",
      "graft": "// cudaExternalSemaphoreHandleDesc to hipExternalSemaphoreHandleDesc\nhipExternalSemaphoreHandleDesc cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc(cudaExternalSemaphoreHandleDesc);\n"
    },
    "hipExternalSemaphoreSignalParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphoreSignalParams_v1",
      "converter": "// hipExternalSemaphoreSignalParams to cudaExternalSemaphoreSignalParams_v1\ncudaExternalSemaphoreSignalParams_v1 hipExternalSemaphoreSignalParams_TO_cudaExternalSemaphoreSignalParams_v1(hipExternalSemaphoreSignalParams);\n",
      "converterName": "hipExternalSemaphoreSignalParams_TO_cudaExternalSemaphoreSignalParams_v1",
      "graft": "// hipExternalSemaphoreSignalParams to cudaExternalSemaphoreSignalParams_v1\ncudaExternalSemaphoreSignalParams_v1 hipExternalSemaphoreSignalParams_TO_cudaExternalSemaphoreSignalParams_v1(hipExternalSemaphoreSignalParams);\n"
    },
    "cudaExternalSemaphoreSignalParams_v1": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphoreSignalParams",
      "converter": "// cudaExternalSemaphoreSignalParams_v1 to hipExternalSemaphoreSignalParams\nhipExternalSemaphoreSignalParams cudaExternalSemaphoreSignalParams_v1_TO_hipExternalSemaphoreSignalParams(cudaExternalSemaphoreSignalParams_v1);\n",
      "converterName": "cudaExternalSemaphoreSignalParams_v1_TO_hipExternalSemaphoreSignalParams",
      "graft": "// cudaExternalSemaphoreSignalParams_v1 to hipExternalSemaphoreSignalParams\nhipExternalSemaphoreSignalParams cudaExternalSemaphoreSignalParams_v1_TO_hipExternalSemaphoreSignalParams(cudaExternalSemaphoreSignalParams_v1);\n"
    },
    "hipExternalSemaphoreWaitParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphoreWaitParams_v1",
      "converter": "// hipExternalSemaphoreWaitParams to cudaExternalSemaphoreWaitParams_v1\ncudaExternalSemaphoreWaitParams_v1 hipExternalSemaphoreWaitParams_TO_cudaExternalSemaphoreWaitParams_v1(hipExternalSemaphoreWaitParams);\n",
      "converterName": "hipExternalSemaphoreWaitParams_TO_cudaExternalSemaphoreWaitParams_v1",
      "graft": "// hipExternalSemaphoreWaitParams to cudaExternalSemaphoreWaitParams_v1\ncudaExternalSemaphoreWaitParams_v1 hipExternalSemaphoreWaitParams_TO_cudaExternalSemaphoreWaitParams_v1(hipExternalSemaphoreWaitParams);\n"
    },
    "cudaExternalSemaphoreWaitParams_v1": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphoreWaitParams",
      "converter": "// cudaExternalSemaphoreWaitParams_v1 to hipExternalSemaphoreWaitParams\nhipExternalSemaphoreWaitParams cudaExternalSemaphoreWaitParams_v1_TO_hipExternalSemaphoreWaitParams(cudaExternalSemaphoreWaitParams_v1);\n",
      "converterName": "cudaExternalSemaphoreWaitParams_v1_TO_hipExternalSemaphoreWaitParams",
      "graft": "// cudaExternalSemaphoreWaitParams_v1 to hipExternalSemaphoreWaitParams\nhipExternalSemaphoreWaitParams cudaExternalSemaphoreWaitParams_v1_TO_hipExternalSemaphoreWaitParams(cudaExternalSemaphoreWaitParams_v1);\n"
    },
    "hipFuncAttributes": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaFuncAttributes",
      "converter": "// hipFuncAttributes to cudaFuncAttributes\ncudaFuncAttributes hipFuncAttributes_TO_cudaFuncAttributes(hipFuncAttributes);\n",
      "converterName": "hipFuncAttributes_TO_cudaFuncAttributes",
      "graft": "// hipFuncAttributes to cudaFuncAttributes\ncudaFuncAttributes hipFuncAttributes_TO_cudaFuncAttributes(hipFuncAttributes);\n"
    },
    "cudaFuncAttributes": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipFuncAttributes",
      "converter": "// cudaFuncAttributes to hipFuncAttributes\nhipFuncAttributes cudaFuncAttributes_TO_hipFuncAttributes(cudaFuncAttributes);\n",
      "converterName": "cudaFuncAttributes_TO_hipFuncAttributes",
      "graft": "// cudaFuncAttributes to hipFuncAttributes\nhipFuncAttributes cudaFuncAttributes_TO_hipFuncAttributes(cudaFuncAttributes);\n"
    },
    "hipLaunchParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaLaunchParams",
      "converter": "// hipLaunchParams to cudaLaunchParams\ncudaLaunchParams hipLaunchParams_TO_cudaLaunchParams(hipLaunchParams);\n",
      "converterName": "hipLaunchParams_TO_cudaLaunchParams",
      "graft": "// hipLaunchParams to cudaLaunchParams\ncudaLaunchParams hipLaunchParams_TO_cudaLaunchParams(hipLaunchParams);\n"
    },
    "cudaLaunchParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipLaunchParams",
      "converter": "// cudaLaunchParams to hipLaunchParams\nhipLaunchParams cudaLaunchParams_TO_hipLaunchParams(cudaLaunchParams);\n",
      "converterName": "cudaLaunchParams_TO_hipLaunchParams",
      "graft": "// cudaLaunchParams to hipLaunchParams\nhipLaunchParams cudaLaunchParams_TO_hipLaunchParams(cudaLaunchParams);\n"
    },
    "hipChannelFormatDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaChannelFormatDesc",
      "converter": "// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n",
      "converterName": "hipChannelFormatDesc_TO_cudaChannelFormatDesc",
      "graft": "// hipChannelFormatDesc to cudaChannelFormatDesc\ncudaChannelFormatDesc hipChannelFormatDesc_TO_cudaChannelFormatDesc(hipChannelFormatDesc);\n"
    },
    "cudaChannelFormatDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipChannelFormatDesc",
      "converter": "// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n",
      "converterName": "cudaChannelFormatDesc_TO_hipChannelFormatDesc",
      "graft": "// cudaChannelFormatDesc to hipChannelFormatDesc\nhipChannelFormatDesc cudaChannelFormatDesc_TO_hipChannelFormatDesc(cudaChannelFormatDesc);\n"
    },
    "hipMipmappedArray_t undefined": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": true
    },
    "hipMemcpy3DParms": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemcpy3DParms",
      "converter": "// hipMemcpy3DParms to cudaMemcpy3DParms\ncudaMemcpy3DParms hipMemcpy3DParms_TO_cudaMemcpy3DParms(hipMemcpy3DParms);\n",
      "converterName": "hipMemcpy3DParms_TO_cudaMemcpy3DParms",
      "graft": "// hipMemcpy3DParms to cudaMemcpy3DParms\ncudaMemcpy3DParms hipMemcpy3DParms_TO_cudaMemcpy3DParms(hipMemcpy3DParms);\n"
    },
    "cudaMemcpy3DParms": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemcpy3DParms",
      "converter": "// cudaMemcpy3DParms to hipMemcpy3DParms\nhipMemcpy3DParms cudaMemcpy3DParms_TO_hipMemcpy3DParms(cudaMemcpy3DParms);\n",
      "converterName": "cudaMemcpy3DParms_TO_hipMemcpy3DParms",
      "graft": "// cudaMemcpy3DParms to hipMemcpy3DParms\nhipMemcpy3DParms cudaMemcpy3DParms_TO_hipMemcpy3DParms(cudaMemcpy3DParms);\n"
    },
    "hipMemPoolProps": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemPoolProps",
      "converter": "// hipMemPoolProps to cudaMemPoolProps\ncudaMemPoolProps hipMemPoolProps_TO_cudaMemPoolProps(hipMemPoolProps);\n",
      "converterName": "hipMemPoolProps_TO_cudaMemPoolProps",
      "graft": "// hipMemPoolProps to cudaMemPoolProps\ncudaMemPoolProps hipMemPoolProps_TO_cudaMemPoolProps(hipMemPoolProps);\n"
    },
    "cudaMemPoolProps": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemPoolProps",
      "converter": "// cudaMemPoolProps to hipMemPoolProps\nhipMemPoolProps cudaMemPoolProps_TO_hipMemPoolProps(cudaMemPoolProps);\n",
      "converterName": "cudaMemPoolProps_TO_hipMemPoolProps",
      "graft": "// cudaMemPoolProps to hipMemPoolProps\nhipMemPoolProps cudaMemPoolProps_TO_hipMemPoolProps(cudaMemPoolProps);\n"
    },
    "hipMemPoolPtrExportData": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemPoolPtrExportData",
      "converter": "// hipMemPoolPtrExportData to cudaMemPoolPtrExportData\ncudaMemPoolPtrExportData hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData(hipMemPoolPtrExportData);\n",
      "converterName": "hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData",
      "graft": "// hipMemPoolPtrExportData to cudaMemPoolPtrExportData\ncudaMemPoolPtrExportData hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData(hipMemPoolPtrExportData);\n"
    },
    "cudaMemPoolPtrExportData": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemPoolPtrExportData",
      "converter": "// cudaMemPoolPtrExportData to hipMemPoolPtrExportData\nhipMemPoolPtrExportData cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData(cudaMemPoolPtrExportData);\n",
      "converterName": "cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData",
      "graft": "// cudaMemPoolPtrExportData to hipMemPoolPtrExportData\nhipMemPoolPtrExportData cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData(cudaMemPoolPtrExportData);\n"
    },
    "hipMemAccessDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemAccessDesc",
      "converter": "// hipMemAccessDesc to cudaMemAccessDesc\ncudaMemAccessDesc hipMemAccessDesc_TO_cudaMemAccessDesc(hipMemAccessDesc);\n",
      "converterName": "hipMemAccessDesc_TO_cudaMemAccessDesc",
      "graft": "// hipMemAccessDesc to cudaMemAccessDesc\ncudaMemAccessDesc hipMemAccessDesc_TO_cudaMemAccessDesc(hipMemAccessDesc);\n"
    },
    "cudaMemAccessDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemAccessDesc",
      "converter": "// cudaMemAccessDesc to hipMemAccessDesc\nhipMemAccessDesc cudaMemAccessDesc_TO_hipMemAccessDesc(cudaMemAccessDesc);\n",
      "converterName": "cudaMemAccessDesc_TO_hipMemAccessDesc",
      "graft": "// cudaMemAccessDesc to hipMemAccessDesc\nhipMemAccessDesc cudaMemAccessDesc_TO_hipMemAccessDesc(cudaMemAccessDesc);\n"
    },
    "hipPointerAttribute_t": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaPointerAttributes",
      "converter": "// hipPointerAttribute_t to cudaPointerAttributes\ncudaPointerAttributes hipPointerAttribute_t_TO_cudaPointerAttributes(hipPointerAttribute_t);\n",
      "converterName": "hipPointerAttribute_t_TO_cudaPointerAttributes",
      "graft": "// hipPointerAttribute_t to cudaPointerAttributes\ncudaPointerAttributes hipPointerAttribute_t_TO_cudaPointerAttributes(hipPointerAttribute_t);\n"
    },
    "cudaPointerAttributes": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipPointerAttribute_t",
      "converter": "// cudaPointerAttributes to hipPointerAttribute_t\nhipPointerAttribute_t cudaPointerAttributes_TO_hipPointerAttribute_t(cudaPointerAttributes);\n",
      "converterName": "cudaPointerAttributes_TO_hipPointerAttribute_t",
      "graft": "// cudaPointerAttributes to hipPointerAttribute_t\nhipPointerAttribute_t cudaPointerAttributes_TO_hipPointerAttribute_t(cudaPointerAttributes);\n"
    },
    "hipResourceDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaResourceDesc",
      "converter": "// hipResourceDesc to cudaResourceDesc\ncudaResourceDesc hipResourceDesc_TO_cudaResourceDesc(hipResourceDesc);\n",
      "converterName": "hipResourceDesc_TO_cudaResourceDesc",
      "graft": "// hipResourceDesc to cudaResourceDesc\ncudaResourceDesc hipResourceDesc_TO_cudaResourceDesc(hipResourceDesc);\n"
    },
    "cudaResourceDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipResourceDesc",
      "converter": "// cudaResourceDesc to hipResourceDesc\nhipResourceDesc cudaResourceDesc_TO_hipResourceDesc(cudaResourceDesc);\n",
      "converterName": "cudaResourceDesc_TO_hipResourceDesc",
      "graft": "// cudaResourceDesc to hipResourceDesc\nhipResourceDesc cudaResourceDesc_TO_hipResourceDesc(cudaResourceDesc);\n"
    },
    "hipTextureDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaTextureDesc",
      "converter": "// hipTextureDesc to cudaTextureDesc\ncudaTextureDesc hipTextureDesc_TO_cudaTextureDesc(hipTextureDesc);\n",
      "converterName": "hipTextureDesc_TO_cudaTextureDesc",
      "graft": "// hipTextureDesc to cudaTextureDesc\ncudaTextureDesc hipTextureDesc_TO_cudaTextureDesc(hipTextureDesc);\n"
    },
    "cudaTextureDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipTextureDesc",
      "converter": "// cudaTextureDesc to hipTextureDesc\nhipTextureDesc cudaTextureDesc_TO_hipTextureDesc(cudaTextureDesc);\n",
      "converterName": "cudaTextureDesc_TO_hipTextureDesc",
      "graft": "// cudaTextureDesc to hipTextureDesc\nhipTextureDesc cudaTextureDesc_TO_hipTextureDesc(cudaTextureDesc);\n"
    },
    "hipResourceViewDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaResourceViewDesc",
      "converter": "// hipResourceViewDesc to cudaResourceViewDesc\ncudaResourceViewDesc hipResourceViewDesc_TO_cudaResourceViewDesc(hipResourceViewDesc);\n",
      "converterName": "hipResourceViewDesc_TO_cudaResourceViewDesc",
      "graft": "// hipResourceViewDesc to cudaResourceViewDesc\ncudaResourceViewDesc hipResourceViewDesc_TO_cudaResourceViewDesc(hipResourceViewDesc);\n"
    },
    "cudaResourceViewDesc": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipResourceViewDesc",
      "converter": "// cudaResourceViewDesc to hipResourceViewDesc\nhipResourceViewDesc cudaResourceViewDesc_TO_hipResourceViewDesc(cudaResourceViewDesc);\n",
      "converterName": "cudaResourceViewDesc_TO_hipResourceViewDesc",
      "graft": "// cudaResourceViewDesc to hipResourceViewDesc\nhipResourceViewDesc cudaResourceViewDesc_TO_hipResourceViewDesc(cudaResourceViewDesc);\n"
    },
    "hipExternalSemaphoreSignalNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphoreSignalNodeParamsV2",
      "converter": "// hipExternalSemaphoreSignalNodeParams to cudaExternalSemaphoreSignalNodeParamsV2\ncudaExternalSemaphoreSignalNodeParamsV2 hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(hipExternalSemaphoreSignalNodeParams);\n",
      "converterName": "hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2",
      "graft": "// hipExternalSemaphoreSignalNodeParams to cudaExternalSemaphoreSignalNodeParamsV2\ncudaExternalSemaphoreSignalNodeParamsV2 hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2(hipExternalSemaphoreSignalNodeParams);\n"
    },
    "cudaExternalSemaphoreSignalNodeParamsV2": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphoreSignalNodeParams",
      "converter": "// cudaExternalSemaphoreSignalNodeParamsV2 to hipExternalSemaphoreSignalNodeParams\nhipExternalSemaphoreSignalNodeParams cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams(cudaExternalSemaphoreSignalNodeParamsV2);\n",
      "converterName": "cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams",
      "graft": "// cudaExternalSemaphoreSignalNodeParamsV2 to hipExternalSemaphoreSignalNodeParams\nhipExternalSemaphoreSignalNodeParams cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams(cudaExternalSemaphoreSignalNodeParamsV2);\n"
    },
    "hipExternalSemaphoreWaitNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaExternalSemaphoreWaitNodeParamsV2",
      "converter": "// hipExternalSemaphoreWaitNodeParams to cudaExternalSemaphoreWaitNodeParamsV2\ncudaExternalSemaphoreWaitNodeParamsV2 hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2(hipExternalSemaphoreWaitNodeParams);\n",
      "converterName": "hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2",
      "graft": "// hipExternalSemaphoreWaitNodeParams to cudaExternalSemaphoreWaitNodeParamsV2\ncudaExternalSemaphoreWaitNodeParamsV2 hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2(hipExternalSemaphoreWaitNodeParams);\n"
    },
    "cudaExternalSemaphoreWaitNodeParamsV2": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipExternalSemaphoreWaitNodeParams",
      "converter": "// cudaExternalSemaphoreWaitNodeParamsV2 to hipExternalSemaphoreWaitNodeParams\nhipExternalSemaphoreWaitNodeParams cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams(cudaExternalSemaphoreWaitNodeParamsV2);\n",
      "converterName": "cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams",
      "graft": "// cudaExternalSemaphoreWaitNodeParamsV2 to hipExternalSemaphoreWaitNodeParams\nhipExternalSemaphoreWaitNodeParams cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams(cudaExternalSemaphoreWaitNodeParamsV2);\n"
    },
    "hipHostNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaHostNodeParams",
      "converter": "// hipHostNodeParams to cudaHostNodeParams\ncudaHostNodeParams hipHostNodeParams_TO_cudaHostNodeParams(hipHostNodeParams);\n",
      "converterName": "hipHostNodeParams_TO_cudaHostNodeParams",
      "graft": "// hipHostNodeParams to cudaHostNodeParams\ncudaHostNodeParams hipHostNodeParams_TO_cudaHostNodeParams(hipHostNodeParams);\n"
    },
    "cudaHostNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipHostNodeParams",
      "converter": "// cudaHostNodeParams to hipHostNodeParams\nhipHostNodeParams cudaHostNodeParams_TO_hipHostNodeParams(cudaHostNodeParams);\n",
      "converterName": "cudaHostNodeParams_TO_hipHostNodeParams",
      "graft": "// cudaHostNodeParams to hipHostNodeParams\nhipHostNodeParams cudaHostNodeParams_TO_hipHostNodeParams(cudaHostNodeParams);\n"
    },
    "hipKernelNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaKernelNodeParams",
      "converter": "// hipKernelNodeParams to cudaKernelNodeParams\ncudaKernelNodeParams hipKernelNodeParams_TO_cudaKernelNodeParams(hipKernelNodeParams);\n",
      "converterName": "hipKernelNodeParams_TO_cudaKernelNodeParams",
      "graft": "// hipKernelNodeParams to cudaKernelNodeParams\ncudaKernelNodeParams hipKernelNodeParams_TO_cudaKernelNodeParams(hipKernelNodeParams);\n"
    },
    "cudaKernelNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipKernelNodeParams",
      "converter": "// cudaKernelNodeParams to hipKernelNodeParams\nhipKernelNodeParams cudaKernelNodeParams_TO_hipKernelNodeParams(cudaKernelNodeParams);\n",
      "converterName": "cudaKernelNodeParams_TO_hipKernelNodeParams",
      "graft": "// cudaKernelNodeParams to hipKernelNodeParams\nhipKernelNodeParams cudaKernelNodeParams_TO_hipKernelNodeParams(cudaKernelNodeParams);\n"
    },
    "hipMemAllocNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemAllocNodeParams",
      "converter": "// hipMemAllocNodeParams to cudaMemAllocNodeParams\ncudaMemAllocNodeParams hipMemAllocNodeParams_TO_cudaMemAllocNodeParams(hipMemAllocNodeParams);\n",
      "converterName": "hipMemAllocNodeParams_TO_cudaMemAllocNodeParams",
      "graft": "// hipMemAllocNodeParams to cudaMemAllocNodeParams\ncudaMemAllocNodeParams hipMemAllocNodeParams_TO_cudaMemAllocNodeParams(hipMemAllocNodeParams);\n"
    },
    "cudaMemAllocNodeParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemAllocNodeParams",
      "converter": "// cudaMemAllocNodeParams to hipMemAllocNodeParams\nhipMemAllocNodeParams cudaMemAllocNodeParams_TO_hipMemAllocNodeParams(cudaMemAllocNodeParams);\n",
      "converterName": "cudaMemAllocNodeParams_TO_hipMemAllocNodeParams",
      "graft": "// cudaMemAllocNodeParams to hipMemAllocNodeParams\nhipMemAllocNodeParams cudaMemAllocNodeParams_TO_hipMemAllocNodeParams(cudaMemAllocNodeParams);\n"
    },
    "hipMemsetParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaMemsetParams",
      "converter": "// hipMemsetParams to cudaMemsetParams\ncudaMemsetParams hipMemsetParams_TO_cudaMemsetParams(hipMemsetParams);\n",
      "converterName": "hipMemsetParams_TO_cudaMemsetParams",
      "graft": "// hipMemsetParams to cudaMemsetParams\ncudaMemsetParams hipMemsetParams_TO_cudaMemsetParams(hipMemsetParams);\n"
    },
    "cudaMemsetParams": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipMemsetParams",
      "converter": "// cudaMemsetParams to hipMemsetParams\nhipMemsetParams cudaMemsetParams_TO_hipMemsetParams(cudaMemsetParams);\n",
      "converterName": "cudaMemsetParams_TO_hipMemsetParams",
      "graft": "// cudaMemsetParams to hipMemsetParams\nhipMemsetParams cudaMemsetParams_TO_hipMemsetParams(cudaMemsetParams);\n"
    },
    "hipGraphExecUpdateResult": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaGraphExecUpdateResult",
      "converter": "// hipGraphExecUpdateResult to cudaGraphExecUpdateResult\ncudaGraphExecUpdateResult hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult(hipGraphExecUpdateResult);\n",
      "converterName": "hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult",
      "graft": "// hipGraphExecUpdateResult to cudaGraphExecUpdateResult\ncudaGraphExecUpdateResult hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult(hipGraphExecUpdateResult);\n"
    },
    "cudaGraphExecUpdateResult": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipGraphExecUpdateResult",
      "converter": "// cudaGraphExecUpdateResult to hipGraphExecUpdateResult\nhipGraphExecUpdateResult cudaGraphExecUpdateResult_TO_hipGraphExecUpdateResult(cudaGraphExecUpdateResult);\n",
      "converterName": "cudaGraphExecUpdateResult_TO_hipGraphExecUpdateResult",
      "graft": "// cudaGraphExecUpdateResult to hipGraphExecUpdateResult\nhipGraphExecUpdateResult cudaGraphExecUpdateResult_TO_hipGraphExecUpdateResult(cudaGraphExecUpdateResult);\n"
    },
    "hipKernelNodeAttrValue": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "cudaKernelNodeAttrValue",
      "converter": "// hipKernelNodeAttrValue to cudaKernelNodeAttrValue\ncudaKernelNodeAttrValue hipKernelNodeAttrValue_TO_cudaKernelNodeAttrValue(hipKernelNodeAttrValue);\n",
      "converterName": "hipKernelNodeAttrValue_TO_cudaKernelNodeAttrValue",
      "graft": "// hipKernelNodeAttrValue to cudaKernelNodeAttrValue\ncudaKernelNodeAttrValue hipKernelNodeAttrValue_TO_cudaKernelNodeAttrValue(hipKernelNodeAttrValue);\n"
    },
    "cudaKernelNodeAttrValue": {
      "onPrediction": 0,
      "goToPrediction": 0,
      "pointer": false,
      "toType": "hipKernelNodeAttrValue",
      "converter": "// cudaKernelNodeAttrValue to hipKernelNodeAttrValue\nhipKernelNodeAttrValue cudaKernelNodeAttrValue_TO_hipKernelNodeAttrValue(cudaKernelNodeAttrValue);\n",
      "converterName": "cudaKernelNodeAttrValue_TO_hipKernelNodeAttrValue",
      "graft": "// cudaKernelNodeAttrValue to hipKernelNodeAttrValue\nhipKernelNodeAttrValue cudaKernelNodeAttrValue_TO_hipKernelNodeAttrValue(cudaKernelNodeAttrValue);\n"
    }
  },
  "ignoredFunctions": [
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ],
    [
      "cudaDeviceGetAttribute",
      "hipDeviceGetAttribute"
    ],
    [
      "cudaDeviceGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaDeviceGetLimit",
      "hipDeviceGetLimit"
    ],
    [
      "cudaDeviceGetSharedMemConfig",
      "hipDeviceGetSharedMemConfig"
    ],
    [
      "cudaDeviceSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetDevice",
      "hipGetDevice"
    ],
    [
      "cudaGetDeviceCount",
      "hipGetDeviceCount"
    ],
    [
      "cudaThreadExit",
      "hipDeviceReset"
    ],
    [
      "cudaThreadGetCacheConfig",
      "hipDeviceGetCacheConfig"
    ],
    [
      "cudaThreadSetCacheConfig",
      "hipDeviceSetCacheConfig"
    ],
    [
      "cudaThreadSynchronize",
      "hipDeviceSynchronize"
    ],
    [
      "cudaGetErrorName",
      "hipGetErrorName"
    ],
    [
      "cudaGetErrorString",
      "hipGetErrorString"
    ],
    [
      "cudaGetLastError",
      "hipGetLastError"
    ],
    [
      "cudaPeekAtLastError",
      "hipPeekAtLastError"
    ],
    [
      "cudaStreamCreateWithFlags",
      "hipStreamCreateWithFlags"
    ],
    [
      "cudaStreamDestroy",
      "hipStreamDestroy"
    ],
    [
      "cudaStreamWaitEvent",
      "hipStreamWaitEvent"
    ],
    [
      "cudaEventCreateWithFlags",
      "hipEventCreateWithFlags"
    ],
    [
      "cudaEventDestroy",
      "hipEventDestroy"
    ],
    [
      "cudaEventRecord",
      "hipEventRecord"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMem",
      "hipOccupancyMaxPotentialBlockSizeVariableSMem"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags",
      "hipOccupancyMaxPotentialBlockSizeVariableSMemWithFlags"
    ],
    [
      "cudaOccupancyMaxPotentialBlockSizeWithFlags",
      "hipOccupancyMaxPotentialBlockSizeWithFlags"
    ],
    [
      "cudaFree",
      "hipFree"
    ],
    [
      "cudaMalloc",
      "hipMalloc"
    ],
    [
      "cudaMemcpy2DAsync",
      "hipMemcpy2DAsync"
    ],
    [
      "cudaMemcpy3DAsync",
      "hipMemcpy3DAsync"
    ],
    [
      "cudaMemcpyAsync",
      "hipMemcpyAsync"
    ],
    [
      "cudaMemcpyPeer",
      "hipMemcpyPeer"
    ],
    [
      "cudaMemcpyPeerAsync",
      "hipMemcpyPeerAsync"
    ],
    [
      "cudaMemset2DAsync",
      "hipMemset2DAsync"
    ],
    [
      "cudaMemset3DAsync",
      "hipMemset3DAsync"
    ],
    [
      "cudaMemsetAsync",
      "hipMemsetAsync"
    ],
    [
      "cudaMemcpyFromArray",
      "hipMemcpyFromArray"
    ],
    [
      "cudaMemcpyToArray",
      "hipMemcpyToArray"
    ],
    [
      "cudaGLGetDevices",
      "hipGLGetDevices"
    ],
    [
      "cudaGraphicsGLRegisterBuffer",
      "hipGraphicsGLRegisterBuffer"
    ],
    [
      "cudaGraphicsGLRegisterImage",
      "hipGraphicsGLRegisterImage"
    ],
    [
      "cudaCreateChannelDesc",
      "hipCreateChannelDesc"
    ],
    [
      "cudaRuntimeGetVersion",
      "hipRuntimeGetVersion"
    ],
    [
      "cudaGraphLaunch",
      "hipGraphLaunch"
    ],
    [
      "cudaAccessPolicyWindow",
      "hipAccessPolicyWindow"
    ],
    [
      "cudaAccessProperty",
      "hipAccessProperty"
    ],
    [
      "cudaAccessPropertyNormal",
      "hipAccessPropertyNormal"
    ],
    [
      "cudaAccessPropertyPersisting",
      "hipAccessPropertyPersisting"
    ],
    [
      "cudaAccessPropertyStreaming",
      "hipAccessPropertyStreaming"
    ],
    [
      "cudaAddressModeBorder",
      "hipAddressModeBorder"
    ],
    [
      "cudaAddressModeClamp",
      "hipAddressModeClamp"
    ],
    [
      "cudaAddressModeMirror",
      "hipAddressModeMirror"
    ],
    [
      "cudaAddressModeWrap",
      "hipAddressModeWrap"
    ],
    [
      "cudaArray",
      "hipArray"
    ],
    [
      "cudaArrayCubemap",
      "hipArrayCubemap"
    ],
    [
      "cudaArrayDefault",
      "hipArrayDefault"
    ],
    [
      "cudaArrayLayered",
      "hipArrayLayered"
    ],
    [
      "cudaArraySurfaceLoadStore",
      "hipArraySurfaceLoadStore"
    ],
    [
      "cudaArrayTextureGather",
      "hipArrayTextureGather"
    ],
    [
      "cudaArray_const_t",
      "hipArray_const_t"
    ],
    [
      "cudaArray_t",
      "hipArray_t"
    ],
    [
      "cudaBoundaryModeClamp",
      "hipBoundaryModeClamp"
    ],
    [
      "cudaBoundaryModeTrap",
      "hipBoundaryModeTrap"
    ],
    [
      "cudaBoundaryModeZero",
      "hipBoundaryModeZero"
    ],
    [
      "cudaChannelFormatDesc",
      "hipChannelFormatDesc"
    ],
    [
      "cudaChannelFormatKind",
      "hipChannelFormatKind"
    ],
    [
      "cudaChannelFormatKindFloat",
      "hipChannelFormatKindFloat"
    ],
    [
      "cudaChannelFormatKindNone",
      "hipChannelFormatKindNone"
    ],
    [
      "cudaChannelFormatKindSigned",
      "hipChannelFormatKindSigned"
    ],
    [
      "cudaChannelFormatKindUnsigned",
      "hipChannelFormatKindUnsigned"
    ],
    [
      "cudaComputeMode",
      "hipComputeMode"
    ],
    [
      "cudaComputeModeDefault",
      "hipComputeModeDefault"
    ],
    [
      "cudaComputeModeExclusive",
      "hipComputeModeExclusive"
    ],
    [
      "cudaComputeModeExclusiveProcess",
      "hipComputeModeExclusiveProcess"
    ],
    [
      "cudaComputeModeProhibited",
      "hipComputeModeProhibited"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPostSync",
      "hipCooperativeLaunchMultiDeviceNoPostSync"
    ],
    [
      "cudaCooperativeLaunchMultiDeviceNoPreSync",
      "hipCooperativeLaunchMultiDeviceNoPreSync"
    ],
    [
      "cudaCpuDeviceId",
      "hipCpuDeviceId"
    ],
    [
      "cudaDevAttrAsyncEngineCount",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrCanMapHostMemory",
      "hipDeviceAttributeCanMapHostMemory"
    ],
    [
      "cudaDevAttrCanUseHostPointerForRegisteredMem",
      "hipDeviceAttributeCanUseHostPointerForRegisteredMem"
    ],
    [
      "cudaDevAttrClockRate",
      "hipDeviceAttributeClockRate"
    ],
    [
      "cudaDevAttrComputeCapabilityMajor",
      "hipDeviceAttributeComputeCapabilityMajor"
    ],
    [
      "cudaDevAttrComputeCapabilityMinor",
      "hipDeviceAttributeComputeCapabilityMinor"
    ],
    [
      "cudaDevAttrComputeMode",
      "hipDeviceAttributeComputeMode"
    ],
    [
      "cudaDevAttrComputePreemptionSupported",
      "hipDeviceAttributeComputePreemptionSupported"
    ],
    [
      "cudaDevAttrConcurrentKernels",
      "hipDeviceAttributeConcurrentKernels"
    ],
    [
      "cudaDevAttrConcurrentManagedAccess",
      "hipDeviceAttributeConcurrentManagedAccess"
    ],
    [
      "cudaDevAttrCooperativeLaunch",
      "hipDeviceAttributeCooperativeLaunch"
    ],
    [
      "cudaDevAttrCooperativeMultiDeviceLaunch",
      "hipDeviceAttributeCooperativeMultiDeviceLaunch"
    ],
    [
      "cudaDevAttrDirectManagedMemAccessFromHost",
      "hipDeviceAttributeDirectManagedMemAccessFromHost"
    ],
    [
      "cudaDevAttrEccEnabled",
      "hipDeviceAttributeEccEnabled"
    ],
    [
      "cudaDevAttrGlobalL1CacheSupported",
      "hipDeviceAttributeGlobalL1CacheSupported"
    ],
    [
      "cudaDevAttrGlobalMemoryBusWidth",
      "hipDeviceAttributeMemoryBusWidth"
    ],
    [
      "cudaDevAttrGpuOverlap",
      "hipDeviceAttributeAsyncEngineCount"
    ],
    [
      "cudaDevAttrHostNativeAtomicSupported",
      "hipDeviceAttributeHostNativeAtomicSupported"
    ],
    [
      "cudaDevAttrHostRegisterSupported",
      "hipDeviceAttributeHostRegisterSupported"
    ],
    [
      "cudaDevAttrIntegrated",
      "hipDeviceAttributeIntegrated"
    ],
    [
      "cudaDevAttrIsMultiGpuBoard",
      "hipDeviceAttributeIsMultiGpuBoard"
    ],
    [
      "cudaDevAttrKernelExecTimeout",
      "hipDeviceAttributeKernelExecTimeout"
    ],
    [
      "cudaDevAttrL2CacheSize",
      "hipDeviceAttributeL2CacheSize"
    ],
    [
      "cudaDevAttrLocalL1CacheSupported",
      "hipDeviceAttributeLocalL1CacheSupported"
    ],
    [
      "cudaDevAttrManagedMemory",
      "hipDeviceAttributeManagedMemory"
    ],
    [
      "cudaDevAttrMaxBlockDimX",
      "hipDeviceAttributeMaxBlockDimX"
    ],
    [
      "cudaDevAttrMaxBlockDimY",
      "hipDeviceAttributeMaxBlockDimY"
    ],
    [
      "cudaDevAttrMaxBlockDimZ",
      "hipDeviceAttributeMaxBlockDimZ"
    ],
    [
      "cudaDevAttrMaxBlocksPerMultiprocessor",
      "hipDeviceAttributeMaxBlocksPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxGridDimX",
      "hipDeviceAttributeMaxGridDimX"
    ],
    [
      "cudaDevAttrMaxGridDimY",
      "hipDeviceAttributeMaxGridDimY"
    ],
    [
      "cudaDevAttrMaxGridDimZ",
      "hipDeviceAttributeMaxGridDimZ"
    ],
    [
      "cudaDevAttrMaxPitch",
      "hipDeviceAttributeMaxPitch"
    ],
    [
      "cudaDevAttrMaxRegistersPerBlock",
      "hipDeviceAttributeMaxRegistersPerBlock"
    ],
    [
      "cudaDevAttrMaxRegistersPerMultiprocessor",
      "hipDeviceAttributeMaxRegistersPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlock",
      "hipDeviceAttributeMaxSharedMemoryPerBlock"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerBlockOptin",
      "hipDeviceAttributeSharedMemPerBlockOptin"
    ],
    [
      "cudaDevAttrMaxSharedMemoryPerMultiprocessor",
      "hipDeviceAttributeMaxSharedMemoryPerMultiprocessor"
    ],
    [
      "cudaDevAttrMaxSurface1DLayeredWidth",
      "hipDeviceAttributeMaxSurface1DLayered"
    ],
    [
      "cudaDevAttrMaxSurface1DWidth",
      "hipDeviceAttributeMaxSurface1D"
    ],
    [
      "cudaDevAttrMaxSurface2DHeight",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredHeight",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DLayeredWidth",
      "hipDeviceAttributeMaxSurface2DLayered"
    ],
    [
      "cudaDevAttrMaxSurface2DWidth",
      "hipDeviceAttributeMaxSurface2D"
    ],
    [
      "cudaDevAttrMaxSurface3DDepth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DHeight",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurface3DWidth",
      "hipDeviceAttributeMaxSurface3D"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapLayeredWidth",
      "hipDeviceAttributeMaxSurfaceCubemapLayered"
    ],
    [
      "cudaDevAttrMaxSurfaceCubemapWidth",
      "hipDeviceAttributeMaxSurfaceCubemap"
    ],
    [
      "cudaDevAttrMaxTexture1DLayeredWidth",
      "hipDeviceAttributeMaxTexture1DLayered"
    ],
    [
      "cudaDevAttrMaxTexture1DLinearWidth",
      "hipDeviceAttributeMaxTexture1DLinear"
    ],
    [
      "cudaDevAttrMaxTexture1DMipmappedWidth",
      "hipDeviceAttributeMaxTexture1DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture1DWidth",
      "hipDeviceAttributeMaxTexture1DWidth"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherHeight",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DGatherWidth",
      "hipDeviceAttributeMaxTexture2DGather"
    ],
    [
      "cudaDevAttrMaxTexture2DHeight",
      "hipDeviceAttributeMaxTexture2DHeight"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredHeight",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLayeredWidth",
      "hipDeviceAttributeMaxTexture2DLayered"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearHeight",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearPitch",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DLinearWidth",
      "hipDeviceAttributeMaxTexture2DLinear"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedHeight",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DMipmappedWidth",
      "hipDeviceAttributeMaxTexture2DMipmap"
    ],
    [
      "cudaDevAttrMaxTexture2DWidth",
      "hipDeviceAttributeMaxTexture2DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepth",
      "hipDeviceAttributeMaxTexture3DDepth"
    ],
    [
      "cudaDevAttrMaxTexture3DDepthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DHeight",
      "hipDeviceAttributeMaxTexture3DHeight"
    ],
    [
      "cudaDevAttrMaxTexture3DHeightAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTexture3DWidth",
      "hipDeviceAttributeMaxTexture3DWidth"
    ],
    [
      "cudaDevAttrMaxTexture3DWidthAlt",
      "hipDeviceAttributeMaxTexture3DAlt"
    ],
    [
      "cudaDevAttrMaxTextureCubemapLayeredWidth",
      "hipDeviceAttributeMaxTextureCubemapLayered"
    ],
    [
      "cudaDevAttrMaxTextureCubemapWidth",
      "hipDeviceAttributeMaxTextureCubemap"
    ],
    [
      "cudaDevAttrMaxThreadsPerBlock",
      "hipDeviceAttributeMaxThreadsPerBlock"
    ],
    [
      "cudaDevAttrMaxThreadsPerMultiProcessor",
      "hipDeviceAttributeMaxThreadsPerMultiProcessor"
    ],
    [
      "cudaDevAttrMemoryClockRate",
      "hipDeviceAttributeMemoryClockRate"
    ],
    [
      "cudaDevAttrMemoryPoolsSupported",
      "hipDeviceAttributeMemoryPoolsSupported"
    ],
    [
      "cudaDevAttrMultiGpuBoardGroupID",
      "hipDeviceAttributeMultiGpuBoardGroupID"
    ],
    [
      "cudaDevAttrMultiProcessorCount",
      "hipDeviceAttributeMultiprocessorCount"
    ],
    [
      "cudaDevAttrPageableMemoryAccess",
      "hipDeviceAttributePageableMemoryAccess"
    ],
    [
      "cudaDevAttrPageableMemoryAccessUsesHostPageTables",
      "hipDeviceAttributePageableMemoryAccessUsesHostPageTables"
    ],
    [
      "cudaDevAttrPciBusId",
      "hipDeviceAttributePciBusId"
    ],
    [
      "cudaDevAttrPciDeviceId",
      "hipDeviceAttributePciDeviceId"
    ],
    [
      "cudaDevAttrPciDomainId",
      "hipDeviceAttributePciDomainID"
    ],
    [
      "cudaDevAttrReserved94",
      "hipDeviceAttributeCanUseStreamWaitValue"
    ],
    [
      "cudaDevAttrSingleToDoublePrecisionPerfRatio",
      "hipDeviceAttributeSingleToDoublePrecisionPerfRatio"
    ],
    [
      "cudaDevAttrStreamPrioritiesSupported",
      "hipDeviceAttributeStreamPrioritiesSupported"
    ],
    [
      "cudaDevAttrSurfaceAlignment",
      "hipDeviceAttributeSurfaceAlignment"
    ],
    [
      "cudaDevAttrTccDriver",
      "hipDeviceAttributeTccDriver"
    ],
    [
      "cudaDevAttrTextureAlignment",
      "hipDeviceAttributeTextureAlignment"
    ],
    [
      "cudaDevAttrTexturePitchAlignment",
      "hipDeviceAttributeTexturePitchAlignment"
    ],
    [
      "cudaDevAttrTotalConstantMemory",
      "hipDeviceAttributeTotalConstantMemory"
    ],
    [
      "cudaDevAttrUnifiedAddressing",
      "hipDeviceAttributeUnifiedAddressing"
    ],
    [
      "cudaDevAttrWarpSize",
      "hipDeviceAttributeWarpSize"
    ],
    [
      "cudaDevP2PAttrAccessSupported",
      "hipDevP2PAttrAccessSupported"
    ],
    [
      "cudaDevP2PAttrCudaArrayAccessSupported",
      "hipDevP2PAttrHipArrayAccessSupported"
    ],
    [
      "cudaDevP2PAttrNativeAtomicSupported",
      "hipDevP2PAttrNativeAtomicSupported"
    ],
    [
      "cudaDevP2PAttrPerformanceRank",
      "hipDevP2PAttrPerformanceRank"
    ],
    [
      "cudaDeviceAttr",
      "hipDeviceAttribute_t"
    ],
    [
      "cudaDeviceBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceLmemResizeToMax",
      "hipDeviceLmemResizeToMax"
    ],
    [
      "cudaDeviceMapHost",
      "hipDeviceMapHost"
    ],
    [
      "cudaDeviceP2PAttr",
      "hipDeviceP2PAttr"
    ],
    [
      "cudaDeviceProp",
      "hipDeviceProp_t"
    ],
    [
      "cudaDeviceScheduleAuto",
      "hipDeviceScheduleAuto"
    ],
    [
      "cudaDeviceScheduleBlockingSync",
      "hipDeviceScheduleBlockingSync"
    ],
    [
      "cudaDeviceScheduleMask",
      "hipDeviceScheduleMask"
    ],
    [
      "cudaDeviceScheduleSpin",
      "hipDeviceScheduleSpin"
    ],
    [
      "cudaDeviceScheduleYield",
      "hipDeviceScheduleYield"
    ],
    [
      "cudaError",
      "hipError_t"
    ],
    [
      "cudaErrorAlreadyAcquired",
      "hipErrorAlreadyAcquired"
    ],
    [
      "cudaErrorAlreadyMapped",
      "hipErrorAlreadyMapped"
    ],
    [
      "cudaErrorArrayIsMapped",
      "hipErrorArrayIsMapped"
    ],
    [
      "cudaErrorAssert",
      "hipErrorAssert"
    ],
    [
      "cudaErrorCapturedEvent",
      "hipErrorCapturedEvent"
    ],
    [
      "cudaErrorContextIsDestroyed",
      "hipErrorContextIsDestroyed"
    ],
    [
      "cudaErrorCooperativeLaunchTooLarge",
      "hipErrorCooperativeLaunchTooLarge"
    ],
    [
      "cudaErrorCudartUnloading",
      "hipErrorDeinitialized"
    ],
    [
      "cudaErrorDeviceAlreadyInUse",
      "hipErrorContextAlreadyInUse"
    ],
    [
      "cudaErrorDeviceUninitialized",
      "hipErrorInvalidContext"
    ],
    [
      "cudaErrorECCUncorrectable",
      "hipErrorECCNotCorrectable"
    ],
    [
      "cudaErrorFileNotFound",
      "hipErrorFileNotFound"
    ],
    [
      "cudaErrorGraphExecUpdateFailure",
      "hipErrorGraphExecUpdateFailure"
    ],
    [
      "cudaErrorHostMemoryAlreadyRegistered",
      "hipErrorHostMemoryAlreadyRegistered"
    ],
    [
      "cudaErrorHostMemoryNotRegistered",
      "hipErrorHostMemoryNotRegistered"
    ],
    [
      "cudaErrorIllegalAddress",
      "hipErrorIllegalAddress"
    ],
    [
      "cudaErrorIllegalState",
      "hipErrorIllegalState"
    ],
    [
      "cudaErrorInitializationError",
      "hipErrorNotInitialized"
    ],
    [
      "cudaErrorInsufficientDriver",
      "hipErrorInsufficientDriver"
    ],
    [
      "cudaErrorInvalidConfiguration",
      "hipErrorInvalidConfiguration"
    ],
    [
      "cudaErrorInvalidDevice",
      "hipErrorInvalidDevice"
    ],
    [
      "cudaErrorInvalidDeviceFunction",
      "hipErrorInvalidDeviceFunction"
    ],
    [
      "cudaErrorInvalidDevicePointer",
      "hipErrorInvalidDevicePointer"
    ],
    [
      "cudaErrorInvalidGraphicsContext",
      "hipErrorInvalidGraphicsContext"
    ],
    [
      "cudaErrorInvalidKernelImage",
      "hipErrorInvalidImage"
    ],
    [
      "cudaErrorInvalidMemcpyDirection",
      "hipErrorInvalidMemcpyDirection"
    ],
    [
      "cudaErrorInvalidPitchValue",
      "hipErrorInvalidPitchValue"
    ],
    [
      "cudaErrorInvalidPtx",
      "hipErrorInvalidKernelFile"
    ],
    [
      "cudaErrorInvalidResourceHandle",
      "hipErrorInvalidHandle"
    ],
    [
      "cudaErrorInvalidSource",
      "hipErrorInvalidSource"
    ],
    [
      "cudaErrorInvalidSymbol",
      "hipErrorInvalidSymbol"
    ],
    [
      "cudaErrorInvalidValue",
      "hipErrorInvalidValue"
    ],
    [
      "cudaErrorLaunchFailure",
      "hipErrorLaunchFailure"
    ],
    [
      "cudaErrorLaunchOutOfResources",
      "hipErrorLaunchOutOfResources"
    ],
    [
      "cudaErrorLaunchTimeout",
      "hipErrorLaunchTimeOut"
    ],
    [
      "cudaErrorMapBufferObjectFailed",
      "hipErrorMapFailed"
    ],
    [
      "cudaErrorMemoryAllocation",
      "hipErrorOutOfMemory"
    ],
    [
      "cudaErrorMissingConfiguration",
      "hipErrorMissingConfiguration"
    ],
    [
      "cudaErrorNoDevice",
      "hipErrorNoDevice"
    ],
    [
      "cudaErrorNoKernelImageForDevice",
      "hipErrorNoBinaryForGpu"
    ],
    [
      "cudaErrorNotMapped",
      "hipErrorNotMapped"
    ],
    [
      "cudaErrorNotMappedAsArray",
      "hipErrorNotMappedAsArray"
    ],
    [
      "cudaErrorNotMappedAsPointer",
      "hipErrorNotMappedAsPointer"
    ],
    [
      "cudaErrorNotReady",
      "hipErrorNotReady"
    ],
    [
      "cudaErrorNotSupported",
      "hipErrorNotSupported"
    ],
    [
      "cudaErrorOperatingSystem",
      "hipErrorOperatingSystem"
    ],
    [
      "cudaErrorPeerAccessAlreadyEnabled",
      "hipErrorPeerAccessAlreadyEnabled"
    ],
    [
      "cudaErrorPeerAccessNotEnabled",
      "hipErrorPeerAccessNotEnabled"
    ],
    [
      "cudaErrorPeerAccessUnsupported",
      "hipErrorPeerAccessUnsupported"
    ],
    [
      "cudaErrorPriorLaunchFailure",
      "hipErrorPriorLaunchFailure"
    ],
    [
      "cudaErrorProfilerAlreadyStarted",
      "hipErrorProfilerAlreadyStarted"
    ],
    [
      "cudaErrorProfilerAlreadyStopped",
      "hipErrorProfilerAlreadyStopped"
    ],
    [
      "cudaErrorProfilerDisabled",
      "hipErrorProfilerDisabled"
    ],
    [
      "cudaErrorProfilerNotInitialized",
      "hipErrorProfilerNotInitialized"
    ],
    [
      "cudaErrorSetOnActiveProcess",
      "hipErrorSetOnActiveProcess"
    ],
    [
      "cudaErrorSharedObjectInitFailed",
      "hipErrorSharedObjectInitFailed"
    ],
    [
      "cudaErrorSharedObjectSymbolNotFound",
      "hipErrorSharedObjectSymbolNotFound"
    ],
    [
      "cudaErrorStreamCaptureImplicit",
      "hipErrorStreamCaptureImplicit"
    ],
    [
      "cudaErrorStreamCaptureInvalidated",
      "hipErrorStreamCaptureInvalidated"
    ],
    [
      "cudaErrorStreamCaptureIsolation",
      "hipErrorStreamCaptureIsolation"
    ],
    [
      "cudaErrorStreamCaptureMerge",
      "hipErrorStreamCaptureMerge"
    ],
    [
      "cudaErrorStreamCaptureUnjoined",
      "hipErrorStreamCaptureUnjoined"
    ],
    [
      "cudaErrorStreamCaptureUnmatched",
      "hipErrorStreamCaptureUnmatched"
    ],
    [
      "cudaErrorStreamCaptureUnsupported",
      "hipErrorStreamCaptureUnsupported"
    ],
    [
      "cudaErrorStreamCaptureWrongThread",
      "hipErrorStreamCaptureWrongThread"
    ],
    [
      "cudaErrorSymbolNotFound",
      "hipErrorNotFound"
    ],
    [
      "cudaErrorUnknown",
      "hipErrorUnknown"
    ],
    [
      "cudaErrorUnmapBufferObjectFailed",
      "hipErrorUnmapFailed"
    ],
    [
      "cudaErrorUnsupportedLimit",
      "hipErrorUnsupportedLimit"
    ],
    [
      "cudaError_t",
      "hipError_t"
    ],
    [
      "cudaEventBlockingSync",
      "hipEventBlockingSync"
    ],
    [
      "cudaEventDefault",
      "hipEventDefault"
    ],
    [
      "cudaEventDisableTiming",
      "hipEventDisableTiming"
    ],
    [
      "cudaEventInterprocess",
      "hipEventInterprocess"
    ],
    [
      "cudaEvent_t",
      "hipEvent_t"
    ],
    [
      "cudaExtent",
      "hipExtent"
    ],
    [
      "cudaExternalMemoryBufferDesc",
      "hipExternalMemoryBufferDesc"
    ],
    [
      "cudaExternalMemoryDedicated",
      "hipExternalMemoryDedicated"
    ],
    [
      "cudaExternalMemoryHandleDesc",
      "hipExternalMemoryHandleDesc"
    ],
    [
      "cudaExternalMemoryHandleType",
      "hipExternalMemoryHandleType"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11Resource",
      "hipExternalMemoryHandleTypeD3D11Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D11ResourceKmt",
      "hipExternalMemoryHandleTypeD3D11ResourceKmt"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Heap",
      "hipExternalMemoryHandleTypeD3D12Heap"
    ],
    [
      "cudaExternalMemoryHandleTypeD3D12Resource",
      "hipExternalMemoryHandleTypeD3D12Resource"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueFd",
      "hipExternalMemoryHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32",
      "hipExternalMemoryHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalMemoryHandleTypeOpaqueWin32Kmt",
      "hipExternalMemoryHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalMemory_t",
      "hipExternalMemory_t"
    ],
    [
      "cudaExternalSemaphoreHandleDesc",
      "hipExternalSemaphoreHandleDesc"
    ],
    [
      "cudaExternalSemaphoreHandleType",
      "hipExternalSemaphoreHandleType"
    ],
    [
      "cudaExternalSemaphoreHandleTypeD3D12Fence",
      "hipExternalSemaphoreHandleTypeD3D12Fence"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueFd",
      "hipExternalSemaphoreHandleTypeOpaqueFd"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32",
      "hipExternalSemaphoreHandleTypeOpaqueWin32"
    ],
    [
      "cudaExternalSemaphoreHandleTypeOpaqueWin32Kmt",
      "hipExternalSemaphoreHandleTypeOpaqueWin32Kmt"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParams",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalNodeParamsV2",
      "hipExternalSemaphoreSignalNodeParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreSignalParams_v1",
      "hipExternalSemaphoreSignalParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParams",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitNodeParamsV2",
      "hipExternalSemaphoreWaitNodeParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphoreWaitParams_v1",
      "hipExternalSemaphoreWaitParams"
    ],
    [
      "cudaExternalSemaphore_t",
      "hipExternalSemaphore_t"
    ],
    [
      "cudaFilterModeLinear",
      "hipFilterModeLinear"
    ],
    [
      "cudaFilterModePoint",
      "hipFilterModePoint"
    ],
    [
      "cudaFuncAttribute",
      "hipFuncAttribute"
    ],
    [
      "cudaFuncAttributeMax",
      "hipFuncAttributeMax"
    ],
    [
      "cudaFuncAttributeMaxDynamicSharedMemorySize",
      "hipFuncAttributeMaxDynamicSharedMemorySize"
    ],
    [
      "cudaFuncAttributePreferredSharedMemoryCarveout",
      "hipFuncAttributePreferredSharedMemoryCarveout"
    ],
    [
      "cudaFuncAttributes",
      "hipFuncAttributes"
    ],
    [
      "cudaFuncCache",
      "hipFuncCache_t"
    ],
    [
      "cudaFuncCachePreferEqual",
      "hipFuncCachePreferEqual"
    ],
    [
      "cudaFuncCachePreferL1",
      "hipFuncCachePreferL1"
    ],
    [
      "cudaFuncCachePreferNone",
      "hipFuncCachePreferNone"
    ],
    [
      "cudaFuncCachePreferShared",
      "hipFuncCachePreferShared"
    ],
    [
      "cudaFunction_t",
      "hipFunction_t"
    ],
    [
      "cudaGLDeviceList",
      "hipGLDeviceList"
    ],
    [
      "cudaGLDeviceListAll",
      "hipGLDeviceListAll"
    ],
    [
      "cudaGLDeviceListCurrentFrame",
      "hipGLDeviceListCurrentFrame"
    ],
    [
      "cudaGLDeviceListNextFrame",
      "hipGLDeviceListNextFrame"
    ],
    [
      "cudaGraphDebugDotFlags",
      "hipGraphDebugDotFlags"
    ],
    [
      "cudaGraphDebugDotFlagsEventNodeParams",
      "hipGraphDebugDotFlagsEventNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasSignalNodeParams",
      "hipGraphDebugDotFlagsExtSemasSignalNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsExtSemasWaitNodeParams",
      "hipGraphDebugDotFlagsExtSemasWaitNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsHandles",
      "hipGraphDebugDotFlagsHandles"
    ],
    [
      "cudaGraphDebugDotFlagsHostNodeParams",
      "hipGraphDebugDotFlagsHostNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeAttributes",
      "hipGraphDebugDotFlagsKernelNodeAttributes"
    ],
    [
      "cudaGraphDebugDotFlagsKernelNodeParams",
      "hipGraphDebugDotFlagsKernelNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemcpyNodeParams",
      "hipGraphDebugDotFlagsMemcpyNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsMemsetNodeParams",
      "hipGraphDebugDotFlagsMemsetNodeParams"
    ],
    [
      "cudaGraphDebugDotFlagsVerbose",
      "hipGraphDebugDotFlagsVerbose"
    ],
    [
      "cudaGraphExecUpdateError",
      "hipGraphExecUpdateError"
    ],
    [
      "cudaGraphExecUpdateErrorFunctionChanged",
      "hipGraphExecUpdateErrorFunctionChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNodeTypeChanged",
      "hipGraphExecUpdateErrorNodeTypeChanged"
    ],
    [
      "cudaGraphExecUpdateErrorNotSupported",
      "hipGraphExecUpdateErrorNotSupported"
    ],
    [
      "cudaGraphExecUpdateErrorParametersChanged",
      "hipGraphExecUpdateErrorParametersChanged"
    ],
    [
      "cudaGraphExecUpdateErrorTopologyChanged",
      "hipGraphExecUpdateErrorTopologyChanged"
    ],
    [
      "cudaGraphExecUpdateErrorUnsupportedFunctionChange",
      "hipGraphExecUpdateErrorUnsupportedFunctionChange"
    ],
    [
      "cudaGraphExecUpdateResult",
      "hipGraphExecUpdateResult"
    ],
    [
      "cudaGraphExecUpdateSuccess",
      "hipGraphExecUpdateSuccess"
    ],
    [
      "cudaGraphExec_t",
      "hipGraphExec_t"
    ],
    [
      "cudaGraphInstantiateFlagAutoFreeOnLaunch",
      "hipGraphInstantiateFlagAutoFreeOnLaunch"
    ],
    [
      "cudaGraphInstantiateFlagDeviceLaunch",
      "hipGraphInstantiateFlagDeviceLaunch"
    ],
    [
      "cudaGraphInstantiateFlagUpload",
      "hipGraphInstantiateFlagUpload"
    ],
    [
      "cudaGraphInstantiateFlagUseNodePriority",
      "hipGraphInstantiateFlagUseNodePriority"
    ],
    [
      "cudaGraphInstantiateFlags",
      "hipGraphInstantiateFlags"
    ],
    [
      "cudaGraphMemAttrReservedMemCurrent",
      "hipGraphMemAttrReservedMemCurrent"
    ],
    [
      "cudaGraphMemAttrReservedMemHigh",
      "hipGraphMemAttrReservedMemHigh"
    ],
    [
      "cudaGraphMemAttrUsedMemCurrent",
      "hipGraphMemAttrUsedMemCurrent"
    ],
    [
      "cudaGraphMemAttrUsedMemHigh",
      "hipGraphMemAttrUsedMemHigh"
    ],
    [
      "cudaGraphMemAttributeType",
      "hipGraphMemAttributeType"
    ],
    [
      "cudaGraphNodeType",
      "hipGraphNodeType"
    ],
    [
      "cudaGraphNodeTypeCount",
      "hipGraphNodeTypeCount"
    ],
    [
      "cudaGraphNodeTypeEmpty",
      "hipGraphNodeTypeEmpty"
    ],
    [
      "cudaGraphNodeTypeEventRecord",
      "hipGraphNodeTypeEventRecord"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreSignal",
      "hipGraphNodeTypeExtSemaphoreSignal"
    ],
    [
      "cudaGraphNodeTypeExtSemaphoreWait",
      "hipGraphNodeTypeExtSemaphoreWait"
    ],
    [
      "cudaGraphNodeTypeGraph",
      "hipGraphNodeTypeGraph"
    ],
    [
      "cudaGraphNodeTypeHost",
      "hipGraphNodeTypeHost"
    ],
    [
      "cudaGraphNodeTypeKernel",
      "hipGraphNodeTypeKernel"
    ],
    [
      "cudaGraphNodeTypeMemAlloc",
      "hipGraphNodeTypeMemAlloc"
    ],
    [
      "cudaGraphNodeTypeMemFree",
      "hipGraphNodeTypeMemFree"
    ],
    [
      "cudaGraphNodeTypeMemcpy",
      "hipGraphNodeTypeMemcpy"
    ],
    [
      "cudaGraphNodeTypeMemset",
      "hipGraphNodeTypeMemset"
    ],
    [
      "cudaGraphNodeTypeWaitEvent",
      "hipGraphNodeTypeWaitEvent"
    ],
    [
      "cudaGraphNode_t",
      "hipGraphNode_t"
    ],
    [
      "cudaGraphUserObjectMove",
      "hipGraphUserObjectMove"
    ],
    [
      "cudaGraph_t",
      "hipGraph_t"
    ],
    [
      "cudaGraphicsRegisterFlags",
      "hipGraphicsRegisterFlags"
    ],
    [
      "cudaGraphicsRegisterFlagsNone",
      "hipGraphicsRegisterFlagsNone"
    ],
    [
      "cudaGraphicsRegisterFlagsReadOnly",
      "hipGraphicsRegisterFlagsReadOnly"
    ],
    [
      "cudaGraphicsRegisterFlagsSurfaceLoadStore",
      "hipGraphicsRegisterFlagsSurfaceLoadStore"
    ],
    [
      "cudaGraphicsRegisterFlagsTextureGather",
      "hipGraphicsRegisterFlagsTextureGather"
    ],
    [
      "cudaGraphicsRegisterFlagsWriteDiscard",
      "hipGraphicsRegisterFlagsWriteDiscard"
    ],
    [
      "cudaGraphicsResource",
      "hipGraphicsResource"
    ],
    [
      "cudaGraphicsResource_t",
      "hipGraphicsResource_t"
    ],
    [
      "cudaHostAllocDefault",
      "hipHostMallocDefault"
    ],
    [
      "cudaHostAllocMapped",
      "hipHostMallocMapped"
    ],
    [
      "cudaHostAllocPortable",
      "hipHostMallocPortable"
    ],
    [
      "cudaHostAllocWriteCombined",
      "hipHostMallocWriteCombined"
    ],
    [
      "cudaHostFn_t",
      "hipHostFn_t"
    ],
    [
      "cudaHostNodeParams",
      "hipHostNodeParams"
    ],
    [
      "cudaHostRegisterDefault",
      "hipHostRegisterDefault"
    ],
    [
      "cudaHostRegisterIoMemory",
      "hipHostRegisterIoMemory"
    ],
    [
      "cudaHostRegisterMapped",
      "hipHostRegisterMapped"
    ],
    [
      "cudaHostRegisterPortable",
      "hipHostRegisterPortable"
    ],
    [
      "cudaHostRegisterReadOnly",
      "hipHostRegisterReadOnly"
    ],
    [
      "cudaInvalidDeviceId",
      "hipInvalidDeviceId"
    ],
    [
      "cudaIpcEventHandle_st",
      "hipIpcEventHandle_st"
    ],
    [
      "cudaIpcEventHandle_t",
      "hipIpcEventHandle_t"
    ],
    [
      "cudaIpcMemHandle_st",
      "hipIpcMemHandle_st"
    ],
    [
      "cudaIpcMemHandle_t",
      "hipIpcMemHandle_t"
    ],
    [
      "cudaIpcMemLazyEnablePeerAccess",
      "hipIpcMemLazyEnablePeerAccess"
    ],
    [
      "cudaKernelNodeAttrID",
      "hipKernelNodeAttrID"
    ],
    [
      "cudaKernelNodeAttrValue",
      "hipKernelNodeAttrValue"
    ],
    [
      "cudaKernelNodeAttributeAccessPolicyWindow",
      "hipKernelNodeAttributeAccessPolicyWindow"
    ],
    [
      "cudaKernelNodeAttributeCooperative",
      "hipKernelNodeAttributeCooperative"
    ],
    [
      "cudaKernelNodeParams",
      "hipKernelNodeParams"
    ],
    [
      "cudaLaunchParams",
      "hipLaunchParams"
    ],
    [
      "cudaLimit",
      "hipLimit_t"
    ],
    [
      "cudaLimitMallocHeapSize",
      "hipLimitMallocHeapSize"
    ],
    [
      "cudaLimitPrintfFifoSize",
      "hipLimitPrintfFifoSize"
    ],
    [
      "cudaLimitStackSize",
      "hipLimitStackSize"
    ],
    [
      "cudaMemAccessDesc",
      "hipMemAccessDesc"
    ],
    [
      "cudaMemAccessFlags",
      "hipMemAccessFlags"
    ],
    [
      "cudaMemAccessFlagsProtNone",
      "hipMemAccessFlagsProtNone"
    ],
    [
      "cudaMemAccessFlagsProtRead",
      "hipMemAccessFlagsProtRead"
    ],
    [
      "cudaMemAccessFlagsProtReadWrite",
      "hipMemAccessFlagsProtReadWrite"
    ],
    [
      "cudaMemAdviseSetAccessedBy",
      "hipMemAdviseSetAccessedBy"
    ],
    [
      "cudaMemAdviseSetPreferredLocation",
      "hipMemAdviseSetPreferredLocation"
    ],
    [
      "cudaMemAdviseSetReadMostly",
      "hipMemAdviseSetReadMostly"
    ],
    [
      "cudaMemAdviseUnsetAccessedBy",
      "hipMemAdviseUnsetAccessedBy"
    ],
    [
      "cudaMemAdviseUnsetPreferredLocation",
      "hipMemAdviseUnsetPreferredLocation"
    ],
    [
      "cudaMemAdviseUnsetReadMostly",
      "hipMemAdviseUnsetReadMostly"
    ],
    [
      "cudaMemAllocNodeParams",
      "hipMemAllocNodeParams"
    ],
    [
      "cudaMemAllocationHandleType",
      "hipMemAllocationHandleType"
    ],
    [
      "cudaMemAllocationType",
      "hipMemAllocationType"
    ],
    [
      "cudaMemAllocationTypeInvalid",
      "hipMemAllocationTypeInvalid"
    ],
    [
      "cudaMemAllocationTypeMax",
      "hipMemAllocationTypeMax"
    ],
    [
      "cudaMemAllocationTypePinned",
      "hipMemAllocationTypePinned"
    ],
    [
      "cudaMemAttachGlobal",
      "hipMemAttachGlobal"
    ],
    [
      "cudaMemAttachHost",
      "hipMemAttachHost"
    ],
    [
      "cudaMemAttachSingle",
      "hipMemAttachSingle"
    ],
    [
      "cudaMemHandleTypeNone",
      "hipMemHandleTypeNone"
    ],
    [
      "cudaMemHandleTypePosixFileDescriptor",
      "hipMemHandleTypePosixFileDescriptor"
    ],
    [
      "cudaMemHandleTypeWin32",
      "hipMemHandleTypeWin32"
    ],
    [
      "cudaMemHandleTypeWin32Kmt",
      "hipMemHandleTypeWin32Kmt"
    ],
    [
      "cudaMemLocation",
      "hipMemLocation"
    ],
    [
      "cudaMemLocationType",
      "hipMemLocationType"
    ],
    [
      "cudaMemLocationTypeDevice",
      "hipMemLocationTypeDevice"
    ],
    [
      "cudaMemLocationTypeInvalid",
      "hipMemLocationTypeInvalid"
    ],
    [
      "cudaMemPoolAttr",
      "hipMemPoolAttr"
    ],
    [
      "cudaMemPoolAttrReleaseThreshold",
      "hipMemPoolAttrReleaseThreshold"
    ],
    [
      "cudaMemPoolAttrReservedMemCurrent",
      "hipMemPoolAttrReservedMemCurrent"
    ],
    [
      "cudaMemPoolAttrReservedMemHigh",
      "hipMemPoolAttrReservedMemHigh"
    ],
    [
      "cudaMemPoolAttrUsedMemCurrent",
      "hipMemPoolAttrUsedMemCurrent"
    ],
    [
      "cudaMemPoolAttrUsedMemHigh",
      "hipMemPoolAttrUsedMemHigh"
    ],
    [
      "cudaMemPoolProps",
      "hipMemPoolProps"
    ],
    [
      "cudaMemPoolPtrExportData",
      "hipMemPoolPtrExportData"
    ],
    [
      "cudaMemPoolReuseAllowInternalDependencies",
      "hipMemPoolReuseAllowInternalDependencies"
    ],
    [
      "cudaMemPoolReuseAllowOpportunistic",
      "hipMemPoolReuseAllowOpportunistic"
    ],
    [
      "cudaMemPoolReuseFollowEventDependencies",
      "hipMemPoolReuseFollowEventDependencies"
    ],
    [
      "cudaMemPool_t",
      "hipMemPool_t"
    ],
    [
      "cudaMemRangeAttribute",
      "hipMemRangeAttribute"
    ],
    [
      "cudaMemRangeAttributeAccessedBy",
      "hipMemRangeAttributeAccessedBy"
    ],
    [
      "cudaMemRangeAttributeLastPrefetchLocation",
      "hipMemRangeAttributeLastPrefetchLocation"
    ],
    [
      "cudaMemRangeAttributePreferredLocation",
      "hipMemRangeAttributePreferredLocation"
    ],
    [
      "cudaMemRangeAttributeReadMostly",
      "hipMemRangeAttributeReadMostly"
    ],
    [
      "cudaMemcpy3DParms",
      "hipMemcpy3DParms"
    ],
    [
      "cudaMemcpyDefault",
      "hipMemcpyDefault"
    ],
    [
      "cudaMemcpyDeviceToDevice",
      "hipMemcpyDeviceToDevice"
    ],
    [
      "cudaMemcpyDeviceToHost",
      "hipMemcpyDeviceToHost"
    ],
    [
      "cudaMemcpyHostToDevice",
      "hipMemcpyHostToDevice"
    ],
    [
      "cudaMemcpyHostToHost",
      "hipMemcpyHostToHost"
    ],
    [
      "cudaMemcpyKind",
      "hipMemcpyKind"
    ],
    [
      "cudaMemoryAdvise",
      "hipMemoryAdvise"
    ],
    [
      "cudaMemoryType",
      "hipMemoryType"
    ],
    [
      "cudaMemoryTypeDevice",
      "hipMemoryTypeDevice"
    ],
    [
      "cudaMemoryTypeHost",
      "hipMemoryTypeHost"
    ],
    [
      "cudaMemoryTypeManaged",
      "hipMemoryTypeManaged"
    ],
    [
      "cudaMemsetParams",
      "hipMemsetParams"
    ],
    [
      "cudaMipmappedArray",
      "hipMipmappedArray"
    ],
    [
      "cudaMipmappedArray_const_t",
      "hipMipmappedArray_const_t"
    ],
    [
      "cudaMipmappedArray_t",
      "hipMipmappedArray_t"
    ],
    [
      "cudaOccupancyDefault",
      "hipOccupancyDefault"
    ],
    [
      "cudaOccupancyDisableCachingOverride",
      "hipOccupancyDisableCachingOverride"
    ],
    [
      "cudaPitchedPtr",
      "hipPitchedPtr"
    ],
    [
      "cudaPointerAttributes",
      "hipPointerAttribute_t"
    ],
    [
      "cudaPos",
      "hipPos"
    ],
    [
      "cudaReadModeElementType",
      "hipReadModeElementType"
    ],
    [
      "cudaReadModeNormalizedFloat",
      "hipReadModeNormalizedFloat"
    ],
    [
      "cudaResViewFormatFloat1",
      "hipResViewFormatFloat1"
    ],
    [
      "cudaResViewFormatFloat2",
      "hipResViewFormatFloat2"
    ],
    [
      "cudaResViewFormatFloat4",
      "hipResViewFormatFloat4"
    ],
    [
      "cudaResViewFormatHalf1",
      "hipResViewFormatHalf1"
    ],
    [
      "cudaResViewFormatHalf2",
      "hipResViewFormatHalf2"
    ],
    [
      "cudaResViewFormatHalf4",
      "hipResViewFormatHalf4"
    ],
    [
      "cudaResViewFormatNone",
      "hipResViewFormatNone"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed4",
      "hipResViewFormatSignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed5",
      "hipResViewFormatSignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatSignedBlockCompressed6H",
      "hipResViewFormatSignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatSignedChar1",
      "hipResViewFormatSignedChar1"
    ],
    [
      "cudaResViewFormatSignedChar2",
      "hipResViewFormatSignedChar2"
    ],
    [
      "cudaResViewFormatSignedChar4",
      "hipResViewFormatSignedChar4"
    ],
    [
      "cudaResViewFormatSignedInt1",
      "hipResViewFormatSignedInt1"
    ],
    [
      "cudaResViewFormatSignedInt2",
      "hipResViewFormatSignedInt2"
    ],
    [
      "cudaResViewFormatSignedInt4",
      "hipResViewFormatSignedInt4"
    ],
    [
      "cudaResViewFormatSignedShort1",
      "hipResViewFormatSignedShort1"
    ],
    [
      "cudaResViewFormatSignedShort2",
      "hipResViewFormatSignedShort2"
    ],
    [
      "cudaResViewFormatSignedShort4",
      "hipResViewFormatSignedShort4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed1",
      "hipResViewFormatUnsignedBlockCompressed1"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed2",
      "hipResViewFormatUnsignedBlockCompressed2"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed3",
      "hipResViewFormatUnsignedBlockCompressed3"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed4",
      "hipResViewFormatUnsignedBlockCompressed4"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed5",
      "hipResViewFormatUnsignedBlockCompressed5"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed6H",
      "hipResViewFormatUnsignedBlockCompressed6H"
    ],
    [
      "cudaResViewFormatUnsignedBlockCompressed7",
      "hipResViewFormatUnsignedBlockCompressed7"
    ],
    [
      "cudaResViewFormatUnsignedChar1",
      "hipResViewFormatUnsignedChar1"
    ],
    [
      "cudaResViewFormatUnsignedChar2",
      "hipResViewFormatUnsignedChar2"
    ],
    [
      "cudaResViewFormatUnsignedChar4",
      "hipResViewFormatUnsignedChar4"
    ],
    [
      "cudaResViewFormatUnsignedInt1",
      "hipResViewFormatUnsignedInt1"
    ],
    [
      "cudaResViewFormatUnsignedInt2",
      "hipResViewFormatUnsignedInt2"
    ],
    [
      "cudaResViewFormatUnsignedInt4",
      "hipResViewFormatUnsignedInt4"
    ],
    [
      "cudaResViewFormatUnsignedShort1",
      "hipResViewFormatUnsignedShort1"
    ],
    [
      "cudaResViewFormatUnsignedShort2",
      "hipResViewFormatUnsignedShort2"
    ],
    [
      "cudaResViewFormatUnsignedShort4",
      "hipResViewFormatUnsignedShort4"
    ],
    [
      "cudaResourceDesc",
      "hipResourceDesc"
    ],
    [
      "cudaResourceType",
      "hipResourceType"
    ],
    [
      "cudaResourceTypeArray",
      "hipResourceTypeArray"
    ],
    [
      "cudaResourceTypeLinear",
      "hipResourceTypeLinear"
    ],
    [
      "cudaResourceTypeMipmappedArray",
      "hipResourceTypeMipmappedArray"
    ],
    [
      "cudaResourceTypePitch2D",
      "hipResourceTypePitch2D"
    ],
    [
      "cudaResourceViewDesc",
      "hipResourceViewDesc"
    ],
    [
      "cudaResourceViewFormat",
      "hipResourceViewFormat"
    ],
    [
      "cudaSharedMemBankSizeDefault",
      "hipSharedMemBankSizeDefault"
    ],
    [
      "cudaSharedMemBankSizeEightByte",
      "hipSharedMemBankSizeEightByte"
    ],
    [
      "cudaSharedMemBankSizeFourByte",
      "hipSharedMemBankSizeFourByte"
    ],
    [
      "cudaSharedMemConfig",
      "hipSharedMemConfig"
    ],
    [
      "cudaStreamAddCaptureDependencies",
      "hipStreamAddCaptureDependencies"
    ],
    [
      "cudaStreamCallback_t",
      "hipStreamCallback_t"
    ],
    [
      "cudaStreamCaptureMode",
      "hipStreamCaptureMode"
    ],
    [
      "cudaStreamCaptureModeGlobal",
      "hipStreamCaptureModeGlobal"
    ],
    [
      "cudaStreamCaptureModeRelaxed",
      "hipStreamCaptureModeRelaxed"
    ],
    [
      "cudaStreamCaptureModeThreadLocal",
      "hipStreamCaptureModeThreadLocal"
    ],
    [
      "cudaStreamCaptureStatus",
      "hipStreamCaptureStatus"
    ],
    [
      "cudaStreamCaptureStatusActive",
      "hipStreamCaptureStatusActive"
    ],
    [
      "cudaStreamCaptureStatusInvalidated",
      "hipStreamCaptureStatusInvalidated"
    ],
    [
      "cudaStreamCaptureStatusNone",
      "hipStreamCaptureStatusNone"
    ],
    [
      "cudaStreamDefault",
      "hipStreamDefault"
    ],
    [
      "cudaStreamNonBlocking",
      "hipStreamNonBlocking"
    ],
    [
      "cudaStreamPerThread",
      "hipStreamPerThread"
    ],
    [
      "cudaStreamSetCaptureDependencies",
      "hipStreamSetCaptureDependencies"
    ],
    [
      "cudaStreamUpdateCaptureDependenciesFlags",
      "hipStreamUpdateCaptureDependenciesFlags"
    ],
    [
      "cudaStream_t",
      "hipStream_t"
    ],
    [
      "cudaSuccess",
      "hipSuccess"
    ],
    [
      "cudaSurfaceBoundaryMode",
      "hipSurfaceBoundaryMode"
    ],
    [
      "cudaSurfaceObject_t",
      "hipSurfaceObject_t"
    ],
    [
      "cudaTextureAddressMode",
      "hipTextureAddressMode"
    ],
    [
      "cudaTextureDesc",
      "hipTextureDesc"
    ],
    [
      "cudaTextureFilterMode",
      "hipTextureFilterMode"
    ],
    [
      "cudaTextureObject_t",
      "hipTextureObject_t"
    ],
    [
      "cudaTextureReadMode",
      "hipTextureReadMode"
    ],
    [
      "cudaTextureType1D",
      "hipTextureType1D"
    ],
    [
      "cudaTextureType1DLayered",
      "hipTextureType1DLayered"
    ],
    [
      "cudaTextureType2D",
      "hipTextureType2D"
    ],
    [
      "cudaTextureType2DLayered",
      "hipTextureType2DLayered"
    ],
    [
      "cudaTextureType3D",
      "hipTextureType3D"
    ],
    [
      "cudaTextureTypeCubemap",
      "hipTextureTypeCubemap"
    ],
    [
      "cudaTextureTypeCubemapLayered",
      "hipTextureTypeCubemapLayered"
    ],
    [
      "cudaUUID_t",
      "hipUUID"
    ],
    [
      "cudaUserObjectFlags",
      "hipUserObjectFlags"
    ],
    [
      "cudaUserObjectNoDestructorSync",
      "hipUserObjectNoDestructorSync"
    ],
    [
      "cudaUserObjectRetainFlags",
      "hipUserObjectRetainFlags"
    ],
    [
      "cudaUserObject_t",
      "hipUserObject_t"
    ],
    [
      "cudaConfigureCall",
      "hipConfigureCall"
    ],
    [
      "cudaLaunch",
      "hipLaunchByPtr"
    ],
    [
      "cudaSetupArgument",
      "hipSetupArgument"
    ],
    [
      "cudaBindTexture",
      "hipBindTexture"
    ],
    [
      "cudaBindTexture2D",
      "hipBindTexture2D"
    ],
    [
      "cudaBindTextureToArray",
      "hipBindTextureToArray"
    ],
    [
      "cudaBindTextureToMipmappedArray",
      "hipBindTextureToMipmappedArray"
    ],
    [
      "cudaGetTextureAlignmentOffset",
      "hipGetTextureAlignmentOffset"
    ],
    [
      "cudaGetTextureReference",
      "hipGetTextureReference"
    ],
    [
      "cudaUnbindTexture",
      "hipUnbindTexture"
    ]
  ],
  "requestedConverters": [
    "cudaError_t_TO_hipError_t",
    "hipDeviceProp_t_TO_cudaDeviceProp",
    "hipError_t_TO_cudaError_t",
    null,
    "hipMemPool_t_TO_cudaMemPool_t",
    "cudaMemPool_t_TO_hipMemPool_t",
    null,
    "cudaDeviceP2PAttr_TO_hipDeviceP2PAttr",
    "hipDeviceP2PAttr_TO_cudaDeviceP2PAttr",
    "cudaFuncCache_TO_hipFuncCache_t",
    "hipFuncCache_t_TO_cudaFuncCache",
    "cudaLimit_TO_hipLimit_t",
    "hipLimit_t_TO_cudaLimit",
    "cudaSharedMemConfig_TO_hipSharedMemConfig",
    "hipSharedMemConfig_TO_cudaSharedMemConfig",
    null,
    "cudaDeviceProp_TO_hipDeviceProp_t",
    "cudaEvent_t_TO_hipEvent_t",
    "hipEvent_t_TO_cudaEvent_t",
    "hipIpcEventHandle_t_TO_cudaIpcEventHandle_t",
    "cudaIpcEventHandle_t_TO_hipIpcEventHandle_t",
    "hipIpcMemHandle_t_TO_cudaIpcMemHandle_t",
    "cudaIpcMemHandle_t_TO_hipIpcMemHandle_t",
    "cudaStream_t_TO_hipStream_t",
    "hipStream_t_TO_cudaStream_t",
    "cudaStreamCallback_t_TO_hipStreamCallback_t",
    "hipStreamCallback_t_TO_cudaStreamCallback_t",
    "cudaStreamCaptureMode_TO_hipStreamCaptureMode",
    "hipStreamCaptureMode_TO_cudaStreamCaptureMode",
    "hipGraph_t_TO_cudaGraph_t",
    "cudaGraph_t_TO_hipGraph_t",
    "cudaStreamCaptureStatus_TO_hipStreamCaptureStatus",
    "hipStreamCaptureStatus_TO_cudaStreamCaptureStatus",
    "cudaExternalMemory_t_TO_hipExternalMemory_t",
    "hipExternalMemory_t_TO_cudaExternalMemory_t",
    "cudaExternalSemaphore_t_TO_hipExternalSemaphore_t",
    "hipExternalSemaphore_t_TO_cudaExternalSemaphore_t",
    "hipExternalMemoryBufferDesc_TO_cudaExternalMemoryBufferDesc",
    "cudaExternalMemoryBufferDesc_TO_hipExternalMemoryBufferDesc",
    "hipExternalMemoryHandleDesc_TO_cudaExternalMemoryHandleDesc",
    "cudaExternalMemoryHandleDesc_TO_hipExternalMemoryHandleDesc",
    "hipExternalSemaphoreHandleDesc_TO_cudaExternalSemaphoreHandleDesc",
    "cudaExternalSemaphoreHandleDesc_TO_hipExternalSemaphoreHandleDesc",
    "hipExternalSemaphoreSignalParams_TO_cudaExternalSemaphoreSignalParams_v1",
    "cudaExternalSemaphoreSignalParams_v1_TO_hipExternalSemaphoreSignalParams",
    "hipExternalSemaphoreWaitParams_TO_cudaExternalSemaphoreWaitParams_v1",
    "cudaExternalSemaphoreWaitParams_v1_TO_hipExternalSemaphoreWaitParams",
    "hipFuncAttributes_TO_cudaFuncAttributes",
    "cudaFuncAttributes_TO_hipFuncAttributes",
    "cudaFuncAttribute_TO_hipFuncAttribute",
    "hipFuncAttribute_TO_cudaFuncAttribute",
    "hipLaunchParams_TO_cudaLaunchParams",
    "cudaLaunchParams_TO_hipLaunchParams",
    "cudaHostFn_t_TO_hipHostFn_t",
    "hipHostFn_t_TO_cudaHostFn_t",
    "cudaArray_t_TO_hipArray_t",
    "hipArray_t_TO_cudaArray_t",
    "hipChannelFormatDesc_TO_cudaChannelFormatDesc",
    "cudaChannelFormatDesc_TO_hipChannelFormatDesc",
    "hipExtent_TO_cudaExtent",
    "cudaExtent_TO_hipExtent",
    "cudaMipmappedArray_t_TO_hipMipmappedArray_t",
    "hipMipmappedArray_t_TO_cudaMipmappedArray_t",
    "cudaMipmappedArray_const_t_TO_hipMipmappedArray_const_t",
    "hipMipmappedArray_const_t_TO_cudaMipmappedArray_const_t",
    "hipPitchedPtr_TO_cudaPitchedPtr",
    "cudaPitchedPtr_TO_hipPitchedPtr",
    null,
    "cudaMemoryAdvise_TO_hipMemoryAdvise",
    "hipMemoryAdvise_TO_cudaMemoryAdvise",
    "cudaMemLocation_TO_hipMemLocation",
    "hipMemLocation_TO_cudaMemLocation",
    "cudaMemRangeAttribute_TO_hipMemRangeAttribute",
    "hipMemRangeAttribute_TO_cudaMemRangeAttribute",
    "cudaMemcpyKind_TO_hipMemcpyKind",
    "hipMemcpyKind_TO_cudaMemcpyKind",
    "cudaArray_const_t_TO_hipArray_const_t",
    "hipArray_const_t_TO_cudaArray_const_t",
    "hipMemcpy3DParms_TO_cudaMemcpy3DParms",
    "cudaMemcpy3DParms_TO_hipMemcpy3DParms",
    "hipMemPoolProps_TO_cudaMemPoolProps",
    "cudaMemPoolProps_TO_hipMemPoolProps",
    "hipMemPoolPtrExportData_TO_cudaMemPoolPtrExportData",
    "cudaMemPoolPtrExportData_TO_hipMemPoolPtrExportData",
    "cudaMemAllocationHandleType_TO_hipMemAllocationHandleType",
    "hipMemAllocationHandleType_TO_cudaMemAllocationHandleType",
    "cudaMemAccessFlags_TO_hipMemAccessFlags",
    "hipMemAccessFlags_TO_cudaMemAccessFlags",
    "cudaMemPoolAttr_TO_hipMemPoolAttr",
    "hipMemPoolAttr_TO_cudaMemPoolAttr",
    "hipMemAccessDesc_TO_cudaMemAccessDesc",
    "cudaMemAccessDesc_TO_hipMemAccessDesc",
    "hipPointerAttribute_t_TO_cudaPointerAttributes",
    "cudaPointerAttributes_TO_hipPointerAttribute_t",
    "hipGraphicsResource_t_TO_cudaGraphicsResource_t",
    "cudaGraphicsResource_t_TO_hipGraphicsResource_t",
    "hipTextureObject_t_TO_cudaTextureObject_t",
    "cudaTextureObject_t_TO_hipTextureObject_t",
    "hipResourceDesc_TO_cudaResourceDesc",
    "cudaResourceDesc_TO_hipResourceDesc",
    "hipTextureDesc_TO_cudaTextureDesc",
    "cudaTextureDesc_TO_hipTextureDesc",
    "hipResourceViewDesc_TO_cudaResourceViewDesc",
    "cudaResourceViewDesc_TO_hipResourceViewDesc",
    "hipSurfaceObject_t_TO_cudaSurfaceObject_t",
    "cudaSurfaceObject_t_TO_hipSurfaceObject_t",
    "cudaGraphMemAttributeType_TO_hipGraphMemAttributeType",
    "hipGraphMemAttributeType_TO_cudaGraphMemAttributeType",
    "hipGraphNode_t_TO_cudaGraphNode_t",
    "cudaGraphNode_t_TO_hipGraphNode_t",
    "hipExternalSemaphoreSignalNodeParams_TO_cudaExternalSemaphoreSignalNodeParamsV2",
    "cudaExternalSemaphoreSignalNodeParamsV2_TO_hipExternalSemaphoreSignalNodeParams",
    "hipExternalSemaphoreWaitNodeParams_TO_cudaExternalSemaphoreWaitNodeParamsV2",
    "cudaExternalSemaphoreWaitNodeParamsV2_TO_hipExternalSemaphoreWaitNodeParams",
    "hipHostNodeParams_TO_cudaHostNodeParams",
    "cudaHostNodeParams_TO_hipHostNodeParams",
    "hipKernelNodeParams_TO_cudaKernelNodeParams",
    "cudaKernelNodeParams_TO_hipKernelNodeParams",
    "hipMemAllocNodeParams_TO_cudaMemAllocNodeParams",
    "cudaMemAllocNodeParams_TO_hipMemAllocNodeParams",
    "hipMemsetParams_TO_cudaMemsetParams",
    "cudaMemsetParams_TO_hipMemsetParams",
    "cudaGraphExec_t_TO_hipGraphExec_t",
    "hipGraphExec_t_TO_cudaGraphExec_t",
    "hipGraphExecUpdateResult_TO_cudaGraphExecUpdateResult",
    "cudaGraphExecUpdateResult_TO_hipGraphExecUpdateResult"
  ]
}