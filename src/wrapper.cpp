#include <iostream>
#include <hip/hip_runtime.h>
#include <hip/hip.h>
#include <cuda_runtime_api.h>

cudaError_t hipErrorToCudaError(hipError_t hipError)
{
    switch (hipError)
    {
    case hipSuccess:
        return cudaSuccess;
    case hipErrorOutOfMemory:
        return cudaErrorMemoryAllocation;
    case hipErrorNotInitialized:
        return cudaErrorInitializationError;
    case hipErrorDeinitialized:
        return cudaErrorCudartUnloading;
    case hipErrorProfilerDisabled:
    case hipErrorProfilerNotInitialized:
    case hipErrorProfilerAlreadyStarted:
    case hipErrorProfilerAlreadyStopped:
        // There is no direct equivalent in CUDA for these, so we use a generic error
        return cudaErrorUnknown;
    case hipErrorInvalidValue:
        return cudaErrorInvalidValue;
    case hipErrorInvalidDevicePointer:
        return cudaErrorInvalidDevicePointer;
    case hipErrorInvalidMemcpyDirection:
        return cudaErrorInvalidMemcpyDirection;
    case hipErrorInvalidResourceHandle:
        return cudaErrorInvalidResourceHandle;
    case hipErrorNotReady:
        return cudaErrorNotReady;
    case hipErrorNoDevice:
        return cudaErrorNoDevice;
    case hipErrorInvalidDevice:
        return cudaErrorInvalidDevice;
    case hipErrorInvalidImage:
        return cudaErrorInvalidKernelImage;
    case hipErrorInvalidContext:
        return cudaErrorInvalidDevice;
    case hipErrorContextAlreadyCurrent:
        return cudaErrorSetOnActiveProcess;
    case hipErrorMapFailed:
        return cudaErrorMapBufferObjectFailed;
    case hipErrorUnmapFailed:
        return cudaErrorUnmapBufferObjectFailed;
    case hipErrorArrayIsMapped:
        return cudaErrorArrayIsMapped;
    case hipErrorAlreadyMapped:
        return cudaErrorAlreadyMapped;
    case hipErrorNoBinaryForGpu:
        return cudaErrorNoKernelImageForDevice;
    case hipErrorAlreadyAcquired:
        return cudaErrorAlreadyAcquired;
    case hipErrorNotMapped:
        return cudaErrorNotMappedAsResource;
    case hipErrorNotMappedAsPointer:
        return cudaErrorNotMappedAsPointer;
    case hipErrorECCNotCorrectable:
        return cudaErrorECCUncorrectable;
    case hipErrorUnsupportedLimit:
        return cudaErrorUnsupportedLimit;
    case hipErrorContextAlreadyInUse:
        return cudaErrorDeviceAlreadyInUse;
    case hipErrorPeerAccessUnsupported:
        return cudaErrorPeerAccessUnsupported;
    case hipErrorInvalidKernelFile:
        return cudaErrorInvalidPtx;
    case hipErrorInvalidGraphicsContext:
        return cudaErrorInvalidGraphicsContext;
    case hipErrorInvalidSource:
        return cudaErrorInvalidSource;
    case hipErrorFileNotFound:
        return cudaErrorFileNotFound;
    case hipErrorSharedObjectSymbolNotFound:
        return cudaErrorSharedObjectSymbolNotFound;
    case hipErrorSharedObjectInitFailed:
        return cudaErrorSharedObjectInitFailed;
    case hipErrorOperatingSystem:
        return cudaErrorOperatingSystem;
    case hipErrorInvalidHandle:
        return cudaErrorInvalidResourceHandle;
    case hipErrorNotFound:
        return cudaErrorNotFound;
    case hipErrorNotReady:
        return cudaErrorNotReady;
    case hipErrorIllegalAddress:
        return cudaErrorIllegalAddress;
    case hipErrorLaunchOutOfResources:
        return cudaErrorLaunchOutOfResources;
    case hipErrorLaunchTimeOut:
        return cudaErrorLaunchTimeout;
    case hipErrorPeerAccessAlreadyEnabled:
        return cudaErrorPeerAccessAlreadyEnabled;
    case hipErrorPeerAccessNotEnabled:
        return cudaErrorPeerAccessNotEnabled;
    case hipErrorSetOnActiveProcess:
        return cudaErrorSetOnActiveProcess;
    case hipErrorAssert:
        return cudaErrorAssert;
    case hipErrorHostMemoryAlreadyRegistered:
        return cudaErrorHostMemoryAlreadyRegistered;
    case hipErrorHostMemoryNotRegistered:
        return cudaErrorHostMemoryNotRegistered;
    case hipErrorLaunchFailure:
        return cudaErrorLaunchFailure;
    case hipErrorCooperativeLaunchTooLarge:
        return cudaErrorCooperativeLaunchTooLarge;
    case hipErrorNotSupported:
        return cudaErrorNotSupported;
    case hipErrorUnknown:
        return cudaErrorUnknown;
    default:
        return cudaErrorUnknown;
    }
}

// cudaError_t cudaGetDeviceCount(int *count) using hipGetDeviceCount(int *count);
extern "C" cudaError_t cudaGetDeviceCount(int *count)
{
    std::cout << "Intercepted cudaGetDeviceCount call" << std::endl;
    // Translate the call to its HIP counterpart
    hipError_t hipError = hipGetDeviceCount(count);

    return hipErrorToCudaError(hipError);
}

// Generated by Gemini
extern "C" cudaError_t cudaArrayGetInfo(cudaChannelFormatDesc *desc, cudaExtent *extent, unsigned int *flags, cudaArray_t array)
{
    hipError_t error = hipArrayGetInfo(ptr, size, (hipChannelFormat *)fmt);
    return error;
}

/*
#include <iostream>\n#include <hip/hip_runtime.h>\n#include <hip/hip.h>\n\nextern "C" {\ncudaError_t cudaGetDeviceCount(int *count) {\nstd::cout << "Intercepted cudaGetDeviceCount call" << std::endl;\n// Translate the call to its HIP counterpart\nhipError_t hipError = hipGetDeviceCount(count);  \n// For simplicity, we're directly mapping HIP error codes to CUDA's. \n// In a full implementation, you'd want to translate HIP errors to their CUDA equivalents. \nreturn static_cast<cudaError_t>(hipError); \n} \n\n  hipError_t cudaArrayGetInfo(void *ptr, size_t *size, hipChannelFormat *fmt) {
*/